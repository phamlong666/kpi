# -*- coding: utf-8 -*-
# =============================================================
#  app.py ‚Äì KPI One-File (Streamlit)
#  - Nh·∫≠p li·ªáu KPI t·ª´ CSV/Excel ho·∫∑c nh·∫≠p tay
#  - L∆∞u theo USE/ƒê∆°n v·ªã/Th√°ng/NƒÉm l√™n Google Sheets (KPI_DB)
#  - B√°o c√°o: th√°ng hi·ªán t·∫°i, so th√°ng tr∆∞·ªõc, so c√πng k·ª≥
#  - USE Admin: x·∫øp h·∫°ng ƒë∆°n v·ªã + c·∫•p m·∫≠t kh·∫©u t·∫°m (ghi Users/ResetRequests)
#  L∆∞u √Ω: C·∫•u h√¨nh secrets.toml ph·∫£i c√≥ kh·ªëi [gdrive_service_account]
# =============================================================

import streamlit as st
import pandas as pd
from datetime import datetime
from io import BytesIO
import json
import uuid
import hashlib
from typing import List

# Google Sheets / Drive
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# =========================
# 1) Page config & CSS
# =========================
st.set_page_config(page_title="KPI ‚Äì EVN USE Center", layout="wide")

CUSTOM_CSS = """
<style>
:root { --mn-blue: #2457F5; }
.block-container { padding-top: 1rem; }
h1,h2,h3 { letter-spacing: .2px; }
.section-title { font-size: 22px; margin: 8px 0 12px 0; }
.stButton>button { border-radius: 12px; padding: .5rem 1rem; }
.dataframe tbody tr:hover {background: #f9fbff}
</style>
"""
st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

st.title("KPI ‚Äì Trung t√¢m ƒëi·ªÅu h√†nh s·ªë (b·∫£n m·ªôt file)")

# =============================
# 2) Secrets & Google Sheets auth
# =============================
@st.cache_resource(show_spinner=False)
def get_gspread_client_if_possible():
    try:
        s = st.secrets["gdrive_service_account"]
    except Exception:
        return None, "‚ùå Kh√¥ng t√¨m th·∫•y 'gdrive_service_account' trong secrets."
    try:
        sa_dict = dict(s)
        # Streamlit secrets c·∫ßn chuy·ªÉn \n v·ªÅ \n th·ª±c
        if "private_key" in sa_dict:
            sa_dict["private_key"] = sa_dict["private_key"].replace("\\n", "\n")
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(sa_dict, scope)
        client = gspread.authorize(creds)
        return client, None
    except Exception as e:
        return None, f"‚ùå L·ªói khi kh·ªüi t·∫°o Google Client: {e}"

client, client_err = get_gspread_client_if_possible()
connected = client is not None
if not connected:
    st.info(client_err or "Ch∆∞a c·∫•u h√¨nh Google Service Account.")

# Spreadsheet ID & email qu·∫£n tr·ªã ƒë·ªÉ hi·ªÉn th·ªã (kh√¥ng g·ª≠i mail)
with st.sidebar:
    st.subheader("üîó K·∫øt n·ªëi d·ªØ li·ªáu")
    spreadsheet_id = st.text_input("Spreadsheet ID (Google Sheets)", value=st.session_state.get("spreadsheet_id", ""))
    st.session_state["spreadsheet_id"] = spreadsheet_id
    email_nhan_bao_cao = st.text_input("Email qu·∫£n tr·ªã / nh·∫≠n b√°o c√°o", value=st.session_state.get("email_admin", "phamlong666@gmail.com"))
    st.session_state["email_admin"] = email_nhan_bao_cao

# =============================
# 3) Ti·ªán √≠ch Sheets: m·ªü/ƒë·∫£m b·∫£o header/DF <-> sheet
# =============================

def _open_sheet(client, spreadsheet_id: str, sheet_name: str):
    sh = client.open_by_key(spreadsheet_id)
    try:
        ws = sh.worksheet(sheet_name)
    except Exception:
        ws = sh.add_worksheet(title=sheet_name, rows=1000, cols=50)
    return ws


def _ensure_headers(ws, headers: List[str]):
    try:
        cur = ws.row_values(1)
    except Exception:
        cur = []
    if cur != headers:
        ws.clear()
        ws.append_row(headers, value_input_option="RAW")


def _ws_to_df(ws) -> pd.DataFrame:
    rows = ws.get_all_values()
    if not rows:
        return pd.DataFrame()
    return pd.DataFrame(rows[1:], columns=rows[0])


def _df_to_ws(ws, df: pd.DataFrame):
    ws.clear()
    ws.append_row(list(df.columns), value_input_option="RAW")
    if not df.empty:
        ws.append_rows(df.astype(str).values.tolist(), value_input_option="RAW")


# =============================
# 4) Sidebar ‚Äì USE / ƒê∆°n v·ªã / K·ª≥ l√†m vi·ªác
# =============================
use_id = ""
don_vi = ""
month_work = datetime.now().month
year_work = datetime.now().year

with st.sidebar:
    st.subheader("üè∑ USE & K·ª≥ l√†m vi·ªác")
    if connected and spreadsheet_id:
        try:
            ws_meta = _open_sheet(client, spreadsheet_id, "Meta_Units")
            meta_cols = ["USE", "ƒê∆°n v·ªã", "Email qu·∫£n tr·ªã"]
            _ensure_headers(ws_meta, meta_cols)
            df_meta = _ws_to_df(ws_meta)
            use_list = sorted(df_meta["USE"].dropna().unique().tolist()) if not df_meta.empty else []
        except Exception as e:
            df_meta = pd.DataFrame()
            use_list = []
            st.warning(f"Kh√¥ng t·∫£i ƒë∆∞·ª£c Meta_Units: {e}")
    else:
        df_meta = pd.DataFrame(); use_list = []

    if use_list:
        use_id = st.selectbox("USE", use_list, index=0)
        don_vi_list = sorted(df_meta[df_meta["USE"] == use_id]["ƒê∆°n v·ªã"].dropna().unique().tolist()) if not df_meta.empty else []
        don_vi = st.selectbox("ƒê∆°n v·ªã", don_vi_list, index=0 if don_vi_list else None) if don_vi_list else st.text_input("ƒê∆°n v·ªã", value="ƒê∆°n v·ªã A")
    else:
        use_id = st.text_input("USE (vd: DH01)")
        don_vi = st.text_input("ƒê∆°n v·ªã", value="ƒê∆°n v·ªã A")

    month_work = st.number_input("Th√°ng", 1, 12, value=month_work, step=1)
    year_work = st.number_input("NƒÉm", 2000, 2100, value=year_work, step=1)

# =============================
# 5) Kh·ªüi t·∫°o state
# =============================
if "temp_kpi_df" not in st.session_state:
    st.session_state.temp_kpi_df = pd.DataFrame(columns=[
        "Ch·ªçn", "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", "T√™n ch·ªâ ti√™u (KPI)", "ƒê∆°n v·ªã t√≠nh",
        "K·∫ø ho·∫°ch", "Th·ª±c hi·ªán", "Tr·ªçng s·ªë", "ƒêi·ªÉm KPI", "Th√°ng", "NƒÉm"
    ])

# =============================
# 6) Nh·∫≠p li·ªáu ‚Äì CSV/Excel v√† nh·∫≠p tay
# =============================
st.markdown('<h2 class="section-title">1) Nh·∫≠p d·ªØ li·ªáu KPI</h2>', unsafe_allow_html=True)

c1, c2 = st.columns([2, 1])
with c1:
    up = st.file_uploader("T·∫£i t·ªáp CSV/Excel (m·ªôt th√°ng)", type=["csv", "xlsx"])  # CSV ho·∫∑c Excel 1 sheet
    if up is not None:
        try:
            if up.name.lower().endswith(".csv"):
                df_in = pd.read_csv(up)
            else:
                df_in = pd.read_excel(up)
            # B·∫Øt bu·ªôc c·ªôt t·ªëi thi·ªÉu
            required = {
                "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", "T√™n ch·ªâ ti√™u (KPI)", "ƒê∆°n v·ªã t√≠nh",
                "K·∫ø ho·∫°ch", "Th·ª±c hi·ªán", "Tr·ªçng s·ªë"
            }
            missing = [c for c in required if c not in df_in.columns]
            if missing:
                st.error(f"Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {missing}")
            else:
                df_in["Th√°ng"] = int(month_work)
                df_in["NƒÉm"] = int(year_work)
                # T√≠nh ƒëi·ªÉm KPI n·∫øu c√≥ c·ªôt % sai s·ªë (v√≠ d·ª• 2 ch·ªâ ti√™u d·ª± b√°o)
                df_in["ƒêi·ªÉm KPI"] = df_in.apply(lambda r: compute_point_safe(r), axis=1)
                st.session_state.temp_kpi_df = tidy_columns(df_in)
                st.success(f"ƒê√£ n·∫°p {len(df_in)} d√≤ng t·ª´ t·ªáp {up.name}")
        except Exception as e:
            st.error(f"L·ªói ƒë·ªçc t·ªáp: {e}")

with c2:
    st.info("Ho·∫∑c nh·∫≠p nhanh m·ªôt d√≤ng:")
    with st.form("quick_add"):
        bp = st.text_input("B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", value="")
        ten = st.text_input("T√™n KPI", value="")
        dv = st.text_input("ƒê∆°n v·ªã t√≠nh", value="%")
        kehoach = st.number_input("K·∫ø ho·∫°ch", value=0.0, format="%f")
        thuchien = st.number_input("Th·ª±c hi·ªán", value=0.0, format="%f")
        ts = st.number_input("Tr·ªçng s·ªë", value=0.0, format="%f")
        ok = st.form_submit_button("‚ûï Th√™m v√†o b·∫£ng t·∫°m")
    if ok:
        row = {
            "Ch·ªçn": True,
            "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch": bp,
            "T√™n ch·ªâ ti√™u (KPI)": ten,
            "ƒê∆°n v·ªã t√≠nh": dv,
            "K·∫ø ho·∫°ch": kehoach,
            "Th·ª±c hi·ªán": thuchien,
            "Tr·ªçng s·ªë": ts,
            "ƒêi·ªÉm KPI": compute_point_quick(ten, kehoach, thuchien, ts),
            "Th√°ng": int(month_work),
            "NƒÉm": int(year_work)
        }
        st.session_state.temp_kpi_df = pd.concat([st.session_state.temp_kpi_df, pd.DataFrame([row])], ignore_index=True)
        st.success("ƒê√£ th√™m 1 d√≤ng")

# =============================
# 7) B·∫£ng t·∫°m ‚Äì ch·ªânh s·ª≠a tr·ª±c ti·∫øp
# =============================
st.markdown('<h2 class="section-title">2) B·∫£ng t·∫°m (ch·ªânh s·ª≠a v√† t√≠nh ƒëi·ªÉm)</h2>', unsafe_allow_html=True)

if st.session_state.temp_kpi_df.empty:
    st.warning("B·∫£ng t·∫°m ƒëang r·ªóng. H√£y n·∫°p t·ªáp ho·∫∑c nh·∫≠p tay ·ªü tr√™n.")
else:
    edited = st.data_editor(
        st.session_state.temp_kpi_df,
        num_rows="dynamic",
        use_container_width=True,
        key="editor_temp",
        column_config={"Ch·ªçn": st.column_config.CheckboxColumn(default=True)}
    )
    st.session_state.temp_kpi_df = edited

    cA, cB, cC, cD = st.columns([1,1,1,1])
    with cA:
        if st.button("üßπ X√≥a d√≤ng ƒë√£ ch·ªçn"):
            df = st.session_state.temp_kpi_df
            if "Ch·ªçn" in df.columns:
                df = df[df["Ch·ªçn"] != True]
            st.session_state.temp_kpi_df = df
    with cB:
        if st.button("üßÆ T√≠nh l·∫°i ƒëi·ªÉm KPI"):
            df = st.session_state.temp_kpi_df.copy()
            df["ƒêi·ªÉm KPI"] = df.apply(lambda r: compute_point_safe(r), axis=1)
            st.session_state.temp_kpi_df = df
    with cC:
        if st.button("‚Ü©Ô∏è L√†m m·ªõi th√°ng/nƒÉm"):
            df = st.session_state.temp_kpi_df.copy()
            df["Th√°ng"], df["NƒÉm"] = int(month_work), int(year_work)
            st.session_state.temp_kpi_df = df
    with cD:
        if st.button("‚¨áÔ∏è Xu·∫•t Excel (B·∫£ng t·∫°m)"):
            out = BytesIO()
            with pd.ExcelWriter(out, engine="xlsxwriter") as writer:
                st.session_state.temp_kpi_df.to_excel(writer, index=False, sheet_name="Bang_tam")
            st.download_button("T·∫£i b·∫£ng t·∫°m", out.getvalue(), file_name="Bang_tam_KPI.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# =============================
# 8) Ghi KPI_DB theo USE/Th√°ng/NƒÉm
# =============================
st.markdown('<h2 class="section-title">3) Ghi d·ªØ li·ªáu l√™n KPI_DB</h2>', unsafe_allow_html=True)

if st.button("üíæ Ghi 'B·∫£ng t·∫°m' v√†o KPI_DB", type="primary"):
    if not connected or not spreadsheet_id:
        st.error("Ch∆∞a k·∫øt n·ªëi Google Sheets ho·∫∑c thi·∫øu Spreadsheet ID.")
    elif st.session_state.temp_kpi_df.empty:
        st.warning("B·∫£ng t·∫°m ƒëang r·ªóng.")
    elif not use_id or not don_vi:
        st.warning("Thi·∫øu USE/ƒê∆°n v·ªã.")
    else:
        try:
            ws_db = _open_sheet(client, spreadsheet_id, "KPI_DB")
            cols_db = [
                "USE","ƒê∆°n v·ªã","B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch","T√™n ch·ªâ ti√™u (KPI)","ƒê∆°n v·ªã t√≠nh",
                "K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Tr·ªçng s·ªë","ƒêi·ªÉm KPI","Th√°ng","NƒÉm",
                "Nh√≥m/Parent","Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£","CreatedAt","UpdatedAt"
            ]
            _ensure_headers(ws_db, cols_db)
            df_db = _ws_to_df(ws_db)

            src = st.session_state.temp_kpi_df.drop(columns=["Ch·ªçn"], errors="ignore").copy()
            src["USE"] = use_id
            src["ƒê∆°n v·ªã"] = don_vi
            now_iso = datetime.now().isoformat(timespec="seconds")
            src["CreatedAt"] = now_iso
            src["UpdatedAt"] = now_iso
            src["Nh√≥m/Parent"] = ""
            src["Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£"] = ""
            src = src[[
                "USE","ƒê∆°n v·ªã","B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch","T√™n ch·ªâ ti√™u (KPI)","ƒê∆°n v·ªã t√≠nh",
                "K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Tr·ªçng s·ªë","ƒêi·ªÉm KPI","Th√°ng","NƒÉm",
                "Nh√≥m/Parent","Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£","CreatedAt","UpdatedAt"
            ]]

            key_cols = ["USE","Th√°ng","NƒÉm","B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch","T√™n ch·ªâ ti√™u (KPI)"]

            if df_db.empty:
                df_new = src
            else:
                for c in key_cols:
                    if c in df_db.columns: df_db[c] = df_db[c].astype(str)
                    src[c] = src[c].astype(str)
                cur_keys = src[key_cols].apply(lambda r: "||".join(r.values), axis=1).unique().tolist()
                df_db = df_db[~df_db[key_cols].apply(lambda r: "||".join(r.values), axis=1).isin(cur_keys)]
                df_new = pd.concat([df_db, src], ignore_index=True)

            _df_to_ws(ws_db, df_new)
            st.success(f"ƒê√£ ghi {len(src)} d√≤ng v√†o KPI_DB cho USE {use_id} ({int(month_work)}/{int(year_work)}).")
        except Exception as e:
            st.error(f"L·ªói khi ghi KPI_DB: {e}")

# =============================
# 9) B√°o c√°o: th√°ng / so th√°ng tr∆∞·ªõc / so c√πng k·ª≥
# =============================
st.markdown('<h2 class="section-title">4) B√°o c√°o KPI</h2>', unsafe_allow_html=True)

if not connected or not spreadsheet_id:
    st.info("K·∫øt n·ªëi Google Sheets ƒë·ªÉ xem b√°o c√°o (ƒë·ªçc KPI_DB).")
else:
    try:
        ws_db = _open_sheet(client, spreadsheet_id, "KPI_DB")
        df_db = _ws_to_df(ws_db)
        for c in ["K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Tr·ªçng s·ªë","ƒêi·ªÉm KPI","Th√°ng","NƒÉm"]:
            if c in df_db.columns:
                df_db[c] = pd.to_numeric(df_db[c], errors="coerce")

        cur = df_db[(df_db["USE"] == str(use_id)) & (df_db["Th√°ng"] == int(month_work)) & (df_db["NƒÉm"] == int(year_work))].copy()
        prev = df_db[(df_db["USE"] == str(use_id)) & (df_db["NƒÉm"] == int(year_work)) & (df_db["Th√°ng"] == int(month_work) - 1)].copy() if int(month_work) > 1 else pd.DataFrame()
        yoy  = df_db[(df_db["USE"] == str(use_id)) & (df_db["Th√°ng"] == int(month_work)) & (df_db["NƒÉm"] == int(year_work) - 1)].copy()

        def _agg(df):
            if df is None or df.empty:
                return pd.DataFrame(columns=["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch","T·ªïng tr·ªçng s·ªë","T·ªïng ƒëi·ªÉm","% ho√†n th√†nh"])
            g = df.groupby("B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", dropna=False).agg(**{
                "T·ªïng tr·ªçng s·ªë": ("Tr·ªçng s·ªë", "sum"),
                "T·ªïng ƒëi·ªÉm": ("ƒêi·ªÉm KPI", "sum"),
            }).reset_index()
            g["% ho√†n th√†nh"] = g.apply(lambda r: (r["T·ªïng ƒëi·ªÉm"]/r["T·ªïng tr·ªçng s·ªë"]*100) if r["T·ªïng tr·ªçng s·ªë"] else 0, axis=1)
            return g

        cur_g = _agg(cur); prev_g = _agg(prev); yoy_g = _agg(yoy)

        st.subheader(f"üìä USE {use_id} ‚Äì Th√°ng {int(month_work)}/{int(year_work)}")
        st.dataframe(cur_g, use_container_width=True, hide_index=True)

        st.subheader("‚ÜîÔ∏è So v·ªõi th√°ng tr∆∞·ªõc")
        if prev_g.empty:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu th√°ng tr∆∞·ªõc.")
        else:
            comp_prev = cur_g.merge(prev_g, on="B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", how="outer", suffixes=("_hi·ªán t·∫°i", "_th√°ng tr∆∞·ªõc")).fillna(0)
            comp_prev["Œî ƒëi·ªÉm"] = comp_prev["T·ªïng ƒëi·ªÉm_hi·ªán t·∫°i"] - comp_prev["T·ªïng ƒëi·ªÉm_th√°ng tr∆∞·ªõc"]
            comp_prev["Œî %"] = comp_prev["% ho√†n th√†nh_hi·ªán t·∫°i"] - comp_prev["% ho√†n th√†nh_th√°ng tr∆∞·ªõc"]
            st.dataframe(comp_prev, use_container_width=True, hide_index=True)

        st.subheader("üìà So v·ªõi c√πng k·ª≥ nƒÉm tr∆∞·ªõc")
        if yoy_g.empty:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu c√πng k·ª≥.")
        else:
            comp_yoy = cur_g.merge(yoy_g, on="B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", how="outer", suffixes=("_hi·ªán t·∫°i", "_c√πng k·ª≥")).fillna(0)
            comp_yoy["Œî ƒëi·ªÉm"] = comp_yoy["T·ªïng ƒëi·ªÉm_hi·ªán t·∫°i"] - comp_yoy["T·ªïng ƒëi·ªÉm_c√πng k·ª≥"]
            comp_yoy["Œî %"] = comp_yoy["% ho√†n th√†nh_hi·ªán t·∫°i"] - comp_yoy["% ho√†n th√†nh_c√πng k·ª≥"]
            st.dataframe(comp_yoy, use_container_width=True, hide_index=True)

        if st.button("‚¨áÔ∏è Xu·∫•t b√°o c√°o Excel (3 b·∫£ng)"):
            out = BytesIO()
            with pd.ExcelWriter(out, engine="xlsxwriter") as writer:
                cur_g.to_excel(writer, index=False, sheet_name="Thang_hien_tai")
                if not prev_g.empty: comp_prev.to_excel(writer, index=False, sheet_name="So_thang_truoc")
                if not yoy_g.empty: comp_yoy.to_excel(writer, index=False, sheet_name="So_cung_ky")
            st.download_button(
                "T·∫£i b√°o c√°o",
                out.getvalue(),
                file_name=f"Bao_cao_KPI_USE_{use_id}_{int(year_work)}_{int(month_work):02d}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc KPI_DB: {e}")

# =============================
# 10) USE Admin ‚Äì X·∫øp h·∫°ng ƒë∆°n v·ªã & Qu√™n m·∫≠t kh·∫©u
# =============================
st.markdown('<h2 class="section-title">5) USE Admin</h2>', unsafe_allow_html=True)

if connected and spreadsheet_id:
    # X√°c ƒë·ªãnh quy·ªÅn: email trong Meta_Units ho·∫∑c default admin
    is_admin = False
    try:
        ws_meta = _open_sheet(client, spreadsheet_id, "Meta_Units")
        df_meta = _ws_to_df(ws_meta)
        admin_emails = df_meta[df_meta["USE"] == str(use_id)]["Email qu·∫£n tr·ªã"].dropna().tolist() if "Email qu·∫£n tr·ªã" in df_meta.columns else []
        is_admin = (email_nhan_bao_cao in admin_emails) or (email_nhan_bao_cao.lower() == "phamlong666@gmail.com")
    except Exception:
        pass

    if not is_admin:
        st.info("B·∫°n kh√¥ng c√≥ quy·ªÅn USE Admin.")
    else:
        st.success(f"USE Admin ‚Äì {use_id}")

        # X·∫øp h·∫°ng gi·ªØa c√°c ƒë∆°n v·ªã
        try:
            ws_db = _open_sheet(client, spreadsheet_id, "KPI_DB")
            df_db = _ws_to_df(ws_db)
            for c in ["K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Tr·ªçng s·ªë","ƒêi·ªÉm KPI","Th√°ng","NƒÉm"]:
                if c in df_db.columns:
                    df_db[c] = pd.to_numeric(df_db[c], errors="coerce")
            filt = df_db[(df_db["USE"] == str(use_id)) & (df_db["Th√°ng"] == int(month_work)) & (df_db["NƒÉm"] == int(year_work))].copy()
            if filt.empty:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu k·ª≥ n√†y.")
            else:
                g = filt.groupby("ƒê∆°n v·ªã", dropna=False).agg(**{
                    "T·ªïng tr·ªçng s·ªë": ("Tr·ªçng s·ªë", "sum"),
                    "T·ªïng ƒëi·ªÉm": ("ƒêi·ªÉm KPI", "sum")
                }).reset_index()
                g["% ho√†n th√†nh"] = g.apply(lambda r: (r["T·ªïng ƒëi·ªÉm"]/r["T·ªïng tr·ªçng s·ªë"]*100) if r["T·ªïng tr·ªçng s·ªë"] else 0, axis=1)
                g = g.sort_values("% ho√†n th√†nh", ascending=False)
                st.subheader("üèÅ X·∫øp h·∫°ng ƒë∆°n v·ªã")
                st.dataframe(g, use_container_width=True, hide_index=True)
        except Exception as e:
            st.error(f"L·ªói so s√°nh ƒë∆°n v·ªã: {e}")

        # Qu√™n m·∫≠t kh·∫©u ‚Äì ghi nh·∫≠n & c·∫•p t·∫°m
        st.subheader("üîê Qu√™n m·∫≠t kh·∫©u")
        tk = st.text_input("T√†i kho·∫£n (ƒë·ªãnh d·∫°ng USE\\username)")
        if st.button("C·∫•p m·∫≠t kh·∫©u t·∫°m"):
            if not tk:
                st.warning("Nh·∫≠p t√†i kho·∫£n.")
            else:
                try:
                    tmp_pass = uuid.uuid4().hex[:8]
                    pass_hash = hashlib.sha256(tmp_pass.encode()).hexdigest()

                    # Ghi ResetRequests
                    ws_req = _open_sheet(client, spreadsheet_id, "ResetRequests")
                    _ensure_headers(ws_req, ["USE","T√†i kho·∫£n","Th·ªùi ƒëi·ªÉm","Tr·∫°ng th√°i","Ghi ch√∫"])
                    df_req = _ws_to_df(ws_req)
                    row = pd.DataFrame([{
                        "USE": use_id,
                        "T√†i kho·∫£n": tk,
                        "Th·ªùi ƒëi·ªÉm": datetime.now().isoformat(timespec="seconds"),
                        "Tr·∫°ng th√°i": "ƒê√£ c·∫•p m·∫≠t kh·∫©u t·∫°m",
                        "Ghi ch√∫": f"G·ª≠i admin {email_nhan_bao_cao}"
                    }])
                    df_req = pd.concat([df_req, row], ignore_index=True)
                    _df_to_ws(ws_req, df_req)

                    # C·∫≠p nh·∫≠t Users (upsert m·∫≠t kh·∫©u_bƒÉm)
                    ws_users = _open_sheet(client, spreadsheet_id, "Users")
                    _ensure_headers(ws_users, ["USE","T√†i kho·∫£n (USE\\username)","H·ªç t√™n","Email","M·∫≠t kh·∫©u_bƒÉm","Vai tr√≤ (admin/user)","K√≠ch ho·∫°t"])
                    df_users = _ws_to_df(ws_users)
                    if df_users.empty:
                        df_users = pd.DataFrame(columns=["USE","T√†i kho·∫£n (USE\\username)","H·ªç t√™n","Email","M·∫≠t kh·∫©u_bƒÉm","Vai tr√≤ (admin/user)","K√≠ch ho·∫°t"])

                    if (not df_users.empty) and (df_users["T√†i kho·∫£n (USE\\username)"].astype(str) == tk).any():
                        df_users.loc[df_users["T√†i kho·∫£n (USE\\username)"].astype(str) == tk, ["USE","M·∫≠t kh·∫©u_bƒÉm","K√≠ch ho·∫°t"]] = [use_id, pass_hash, "1"]
                    else:
                        df_users = pd.concat([df_users, pd.DataFrame([{
                            "USE": use_id,
                            "T√†i kho·∫£n (USE\\username)": tk,
                            "H·ªç t√™n": "",
                            "Email": "",
                            "M·∫≠t kh·∫©u_bƒÉm": pass_hash,
                            "Vai tr√≤ (admin/user)": "user",
                            "K√≠ch ho·∫°t": "1"
                        }])], ignore_index=True)

                    _df_to_ws(ws_users, df_users)
                    st.success(f"ƒê√£ c·∫•p m·∫≠t kh·∫©u t·∫°m: **{tmp_pass}** (ƒë√£ ghi s·ªï). Admin {email_nhan_bao_cao} s·∫Ω ki·ªÉm tra v√† cung c·∫•p l·∫°i cho ng∆∞·ªùi d√πng.")
                except Exception as e:
                    st.error(f"L·ªói c·∫•p m·∫≠t kh·∫©u t·∫°m: {e}")

# =============================
# 11) H√†m t√≠nh ƒëi·ªÉm KPI ‚Äì x·ª≠ l√Ω an to√†n
# =============================

def compute_point_quick(ten_kpi: str, ke_hoach: float, thuc_hien: float, trong_so: float) -> float:
    """T√≠nh ƒëi·ªÉm ƒë∆°n gi·∫£n khi nh·∫≠p tay. C√≥ nh√°nh ri√™ng cho 2 KPI d·ª± b√°o c·ªßa EVN.
    - Hai KPI "D·ª± b√°o t·ªïng th∆∞∆°ng ph·∫©m‚Ä¶": ƒëi·ªÉm t·ªëi ƒëa 3ƒë; m·ªói 0.1% v∆∞·ª£t sai s·ªë tr·ª´ 0.04ƒë.
    - M·∫∑c ƒë·ªãnh: ƒëi·ªÉm = min(100, th·ª±c hi·ªán/ k·∫ø ho·∫°ch * 100) * (tr·ªçng s·ªë/100)
    """
    try:
        name = (ten_kpi or "").lower()
        if "d·ª± b√°o t·ªïng th∆∞∆°ng ph·∫©m" in name:
            # gi·∫£ ƒë·ªãnh c·ªôt Th·ª±c hi·ªán l√† % sai s·ªë tuy·ªát ƒë·ªëi
            sai_so = abs(float(thuc_hien))
            base = 3.0
            if sai_so <= 1.5:
                phat = 0.0
            else:
                phat = ((sai_so - 1.5) / 0.1) * 0.04
            return max(0.0, base - phat)
        # M·∫∑c ƒë·ªãnh
        if ke_hoach and ke_hoach != 0:
            ti_le = (float(thuc_hien) / float(ke_hoach)) * 100
        else:
            ti_le = 0
        return min(100.0, max(0.0, ti_le)) * (float(trong_so) / 100.0)
    except Exception:
        return 0.0


def compute_point_safe(r: pd.Series) -> float:
    try:
        return compute_point_quick(
            str(r.get("T√™n ch·ªâ ti√™u (KPI)", "")),
            float(r.get("K·∫ø ho·∫°ch", 0) or 0),
            float(r.get("Th·ª±c hi·ªán", 0) or 0),
            float(r.get("Tr·ªçng s·ªë", 0) or 0),
        )
    except Exception:
        return 0.0


def tidy_columns(df: pd.DataFrame) -> pd.DataFrame:
    cols = [
        "Ch·ªçn", "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", "T√™n ch·ªâ ti√™u (KPI)", "ƒê∆°n v·ªã t√≠nh",
        "K·∫ø ho·∫°ch", "Th·ª±c hi·ªán", "Tr·ªçng s·ªë", "ƒêi·ªÉm KPI", "Th√°ng", "NƒÉm"
    ]
    for c in cols:
        if c not in df.columns:
            df[c] = None
    df = df[cols]
    # √©p ki·ªÉu s·ªë
    for c in ["K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Tr·ªçng s·ªë","ƒêi·ªÉm KPI","Th√°ng","NƒÉm"]:
        df[c] = pd.to_numeric(df[c], errors="coerce")
    # default tick ch·ªçn
    if "Ch·ªçn" in df.columns:
        df["Ch·ªçn"] = df["Ch·ªçn"].fillna(True)
    return df

# =============================
# End of file
# =============================
