# -*- coding: utf-8 -*-
"""
KPI ‚Äì ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a
B·∫£n ƒë·∫ßy ƒë·ªß (login b·∫Øt bu·ªôc, sticky form, ch·ªçn d√≤ng ‚Üí n·∫°p form, RULES: RATIO_UP/DOWN, PASS_FAIL,
PENALTY_ERR (0.04/0.1% t·ªëi ƒëa 3ƒë), MANUAL, ghi Google Sheets, xu·∫•t Excel, x√°c nh·∫≠n l√†m m·ªõi,
n√∫t nhi·ªÅu m√†u, ti√™u ƒë·ªÅ c√≥ m√†u, t·ªïng ƒëi·ªÉm KPI).
"""

import re, io, json, math, base64
from datetime import datetime
from pathlib import Path

import pandas as pd
import streamlit as st

# ================== PAGE CONFIG & CSS ==================
st.set_page_config(page_title="KPI ‚Äì ƒê·ªãnh H√≥a", page_icon="üìä", layout="wide")

st.markdown("""
<style>
/* Title m√†u & nh·ªè l·∫°i */
.app-title h1{font-size:1.6rem !important;margin:0;color:#0ea5e9 !important;}
.app-sub{color:#64748b;font-size:.9rem;margin:.2rem 0 1rem;}

/* Sticky form */
.sticky-box{
  position:sticky;top:0;z-index:50;background:var(--background-color);
  border:1px solid #e5e7eb;border-radius:12px;padding:12px;
  box-shadow:0 2px 10px rgba(0,0,0,.05);
}

/* N√∫t m√†u (b·ªçc b·∫±ng div) */
.btn-save  button{background:#22c55e !important;color:#fff !important;border:0 !important}
.btn-clear button{background:#f59e0b !important;color:#111 !important;border:0 !important}
.btn-export button{background:#3b82f6 !important;color:#fff !important;border:0 !important}
.btn-drive button{background:#8b5cf6 !important;color:#fff !important;border:0 !important}
.btn-apply button{background:#0ea5e9 !important;color:#fff !important;border:0 !important}

/* T·ªïng ƒëi·ªÉm */
.total-box{background:#f0f9ff;border:1px dashed #7dd3fc;padding:8px 12px;border-radius:10px;color:#0c4a6e;font-weight:600}

/* Nh·∫π ph·∫ßn top padding */
section.main > div.block-container{padding-top:.7rem}
</style>
""", unsafe_allow_html=True)

# ================== HEADER ==================
LOGO_URL = "https://raw.githubusercontent.com/phamlong666/kpi/main/logo_hinh_tron.png"
c1,c2 = st.columns([1,10], vertical_alignment="center")
with c1:
    st.image(LOGO_URL, width=60)
with c2:
    st.markdown('<div class="app-title"><h1>KPI ‚Äì ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a</h1></div>', unsafe_allow_html=True)
    st.markdown('<div class="app-sub">Bi·ªÉu m·∫´u nh·∫≠p tay & ch·∫•m ƒëi·ªÉm linh ho·∫°t theo RULES (c·∫•u h√¨nh trong Google Sheets)</div>', unsafe_allow_html=True)

# ================== UTIL: number ==================
def parse_float(x):
    try:
        if x is None: return None
        if isinstance(x,(int,float)): return float(x)
        s = str(x).strip()
        if s=="" or s.lower() in ("none","nan"): return None
        s = s.replace(" ", "").replace(".", "").replace(",", ".")
        return float(s)
    except: return None

def format_vn(v, nd=2):
    if v is None: return ""
    try: v = round(float(v), nd)
    except: return str(v)
    s = f"{v:,.{nd}f}".replace(",", "_").replace(".", ",").replace("_", ".")
    return s

def weight_to_ratio(w):
    v = parse_float(w)
    if v is None: return 0.0
    # n·∫øu nh·∫≠p 40 nghƒ©a 40% th√¨ d√πng 40/100; n·∫øu nh·∫≠p 0.4 th√¨ d√πng 0.4
    return v/100.0 if v>1 else v

# ================== GOOGLE SHEETS (optional) ==================
try:
    import gspread
    from google.oauth2.service_account import Credentials
    HAS_GS = True
except Exception:
    HAS_GS = False

SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
    "https://www.googleapis.com/auth/drive.file",
]

def extract_sheet_id(url_or_id:str)->str:
    return url_or_id.split("/d/")[1].split("/")[0] if "/d/" in url_or_id else url_or_id

def get_spreadsheet():
    if not HAS_GS: raise RuntimeError("M√¥i tr∆∞·ªùng ch∆∞a c√†i gspread/google-auth.")
    sid = st.session_state.get("sheet_url_or_id","").strip()
    if not sid: raise RuntimeError("Ch∆∞a nh·∫≠p ID/URL Google Sheet.")
    if "gcp_service_account" in st.secrets:
        info = dict(st.secrets["gcp_service_account"])
        creds = Credentials.from_service_account_info(info, scopes=SCOPES)
    elif Path("credentials.json").exists():
        creds = Credentials.from_service_account_file("credentials.json", scopes=SCOPES)
    else:
        raise RuntimeError("Thi·∫øu th√¥ng tin Service Account (secrets['gcp_service_account'] ho·∫∑c credentials.json).")
    gc = gspread.authorize(creds)
    return gc.open_by_key(extract_sheet_id(sid))

# ================== RULES (registry) ==================
@st.cache_data(ttl=600)
def load_rules():
    """ƒê·ªçc sheet RULES n·∫øu c√≥, n·∫øu kh√¥ng d√πng m·∫∑c ƒë·ªãnh."""
    reg = {
        "RATIO_UP_DEFAULT": {"Type":"RATIO_UP"},
        "RATIO_DOWN_DEFAULT": {"Type":"RATIO_DOWN"},
        "PASS_FAIL_DEFAULT": {"Type":"PASS_FAIL"},
        "PENALTY_ERR_004": {"Type":"PENALTY_ERR","thr":1.5,"step":0.1,"pen":0.04,"cap":3,"apply_weight":"false"},
        "MANUAL_POINT": {"Type":"MANUAL","apply_weight":"false"},
    }
    try:
        sh = get_spreadsheet()
        try:
            ws = sh.worksheet("RULES")
        except Exception:
            return reg
        df = pd.DataFrame(ws.get_all_records())
        for _,r in df.iterrows():
            code = str(r.get("Code") or "").strip().upper()
            if not code: continue
            rule = {k:r.get(k) for k in df.columns}
            rule["Type"] = str(rule.get("Type") or "").strip().upper()
            for k in ("thr","step","pen","cap","lo","hi"):
                if k in rule: rule[k] = parse_float(rule[k])
            reg[code]=rule
    except Exception:
        pass
    return reg

def ensure_rules_template():
    """T·∫°o/c·∫≠p nh·∫≠t RULES m·∫´u."""
    sh = get_spreadsheet()
    headers = ["Code","Type","keywords","thr","step","pen","cap","op","lo","hi","metric","apply_weight","points_json","expr","description"]
    rows = [
        ["RATIO_UP_DEFAULT","RATIO_UP","tƒÉng t·ªët h∆°n; ‚â•","","","","","","","","","TRUE","","","TƒÉng ƒë·∫°t/v∆∞·ª£t: min(ACTUAL/PLAN,2)*10*W"],
        ["RATIO_DOWN_DEFAULT","RATIO_DOWN","gi·∫£m t·ªët h∆°n; ‚â§","","","","","","","","","TRUE","","","Gi·∫£m c√†ng t·ªët"],
        ["PASS_FAIL_DEFAULT","PASS_FAIL","ƒë·∫°t/kh√¥ng ƒë·∫°t","","","","","","","","","TRUE","","","ƒê·∫°t = 10*W"],
        ["PENALTY_ERR_004","PENALTY_ERR","sai s·ªë ¬±1,5%; tr·ª´ 0,04","1.5","0.1","0.04","3","","","","","FALSE","","","D·ª± b√°o ‚Äì tr·ª´ t·ªëi ƒëa 3ƒë"],
        ["MANUAL_POINT","MANUAL","nh·∫≠p tay","","","","","","","","","FALSE","","","ƒêi·ªÉm nh·∫≠p tay ·ªü c·ªôt ƒêi·ªÉm KPI ho·∫∑c ghi ch√∫: point=..."],
    ]
    try:
        try:
            ws = sh.worksheet("RULES"); ws.clear()
        except Exception:
            ws = sh.add_worksheet(title="RULES", rows=100, cols=len(headers))
        ws.update([headers]+rows, value_input_option="USER_ENTERED")
        return True
    except Exception as e:
        st.error(f"L·ªói t·∫°o RULES: {e}")
        return False

# ================== SCORING ==================
def _score_ratio_up(row):
    W = weight_to_ratio(row.get("Tr·ªçng s·ªë"))
    plan = parse_float(row.get("K·∫ø ho·∫°ch")); actual = parse_float(row.get("Th·ª±c hi·ªán"))
    if plan in (None,0) or actual is None: return None
    ratio = max(0.0, min(actual/plan, 2.0))
    return round(ratio*10*W, 2)

def _score_ratio_down(row):
    W = weight_to_ratio(row.get("Tr·ªçng s·ªë"))
    plan = parse_float(row.get("K·∫ø ho·∫°ch")); actual = parse_float(row.get("Th·ª±c hi·ªán"))
    if plan is None or actual is None: return None
    if actual <= plan: return round(10*W,2)
    over = (actual-plan)/plan
    return round(max(0.0, 1 - over*2)*10*W, 2)

def _score_pass_fail(row):
    W = weight_to_ratio(row.get("Tr·ªçng s·ªë"))
    note = str(row.get("Ghi ch√∫") or "").lower()
    plan = parse_float(row.get("K·∫ø ho·∫°ch")); actual = parse_float(row.get("Th·ª±c hi·ªán"))
    ok = None
    m = re.search(r"pass\s*=\s*(true|false|1|0)", note)
    if m: ok = m.group(1) in ("true","1")
    else: ok = (plan is not None and actual is not None and actual>=plan)
    return round(10*W if ok else 0.0, 2)

def _score_penalty_err(row, rule):
    """Sai s·ªë ¬±1.5% r·ªìi tr·ª´ 0.04/0.1% ƒë·∫øn t·ªëi ƒëa cap=3 ƒëi·ªÉm. (ch·ªâ tr·ª´)"""
    W = weight_to_ratio(row.get("Tr·ªçng s·ªë"))
    thr  = rule.get("thr",1.5); step = rule.get("step",0.1)
    pen  = rule.get("pen",0.04); cap  = rule.get("cap",3.0)
    plan = parse_float(row.get("K·∫ø ho·∫°ch")); actual = parse_float(row.get("Th·ª±c hi·ªán"))
    if plan in (None,0) or actual is None: return None
    err = abs(actual-plan)/plan*100.0
    if err<=thr: return round(10*W,2)  # ko tr·ª´
    times = math.floor((err-thr)/step + 1e-9)
    minus = min(cap, times*pen)
    # tu·ª≥ ch√≠nh s√°ch: tr·∫£ "10*W - minus" (ƒëi·ªÉm ƒë√£ tr·ª´) hay tr·∫£ "-minus" (ƒëi·ªÉm tr·ª´)
    # ·ªû ƒë√¢y ta tr·∫£ ƒëi·ªÉm sau tr·ª´ ƒë·ªÉ c·ªông t·ªïng (n·∫øu KPI n√†y ch·ªâ tr·ª´, tr·ªçng s·ªë n√™n l√† 100 ho·∫∑c ph√π h·ª£p).
    return round(10*W - minus, 2)

def _score_manual(row):
    v = parse_float(row.get("ƒêi·ªÉm KPI"))
    if v is None:
        m = re.search(r"point\s*=\s*([0-9\.,\-]+)", str(row.get("Ghi ch√∫") or ""))
        if m: v = parse_float(m.group(1))
    return None if v is None else float(v)

def compute_score(row, reg):
    method = str(row.get("Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£") or "")
    # ∆Øu ti√™n [CODE]
    m = re.search(r"\[([A-Za-z0-9_]+)\]", method)
    code = m.group(1).upper() if m else ""
    rule = reg.get(code)
    t = (rule.get("Type") if rule else "").upper()
    if   t=="RATIO_UP":    return _score_ratio_up(row)
    elif t=="RATIO_DOWN":  return _score_ratio_down(row)
    elif t=="PASS_FAIL":   return _score_pass_fail(row)
    elif t=="PENALTY_ERR": return _score_penalty_err(row, rule)
    elif t=="MANUAL":      return _score_manual(row)
    # fallback theo t·ª´ kh√≥a
    ml = method.lower()
    if "ƒë·∫°t/kh√¥ng ƒë·∫°t" in ml: return _score_pass_fail(row)
    if "‚â§" in ml or "<=" in ml: return _score_ratio_down(row)
    return _score_ratio_up(row)

# ================== STATE ==================
if "df" not in st.session_state: st.session_state.df = pd.DataFrame()
if "logged_in" not in st.session_state: st.session_state.logged_in = False
if "confirm_clear" not in st.session_state: st.session_state.confirm_clear = False

# ================== SIDEBAR: LOGIN & SETTINGS ==================
with st.sidebar:
    st.header("üîê ƒêƒÉng nh·∫≠p (b·∫Øt bu·ªôc)")
    with st.form("login_form", clear_on_submit=False):
        st.text_input("USE (vd: PCTN\\KVDHA)", key="use_username")
        st.text_input("M·∫≠t kh·∫©u", type="password", key="use_password")
        do_login = st.form_submit_button("ƒêƒÉng nh·∫≠p")
    if do_login:
        if st.session_state.use_username and st.session_state.use_password:
            st.session_state.logged_in = True
            st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng.")
        else:
            st.error("Nh·∫≠p ƒë·ªß USE & M·∫≠t kh·∫©u.")

    if st.button("ƒêƒÉng xu·∫•t", use_container_width=True):
        st.session_state.logged_in = False
        st.info("ƒê√£ ƒëƒÉng xu·∫•t.")

    st.divider()
    st.header("üîó Google Sheets")
    st.text_input("ID/URL Google Sheet", key="sheet_url_or_id", placeholder="D√°n URL ho·∫∑c ID")
    st.text_input("T√™n sheet KPI", key="kpi_sheet_name", value="KPI")

    cA,cB = st.columns(2)
    with cA:
        if st.button("üìÑ T·∫°o/ c·∫≠p nh·∫≠t RULES (m·∫´u)", use_container_width=True):
            try:
                if ensure_rules_template():
                    st.success("ƒê√£ t·∫°o/c·∫≠p nh·∫≠t RULES.")
            except Exception as e:
                st.error(f"L·ªói: {e}")
    with cB:
        if st.button("üîÅ N·∫°p l·∫°i RULES", use_container_width=True):
            load_rules.clear()
            st.success("ƒê√£ l√†m m·ªõi RULES cache.")

# ---------------- BLOCK: stop if not logged in ----------------
if not st.session_state.logged_in:
    st.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ l√†m vi·ªác.")
    st.stop()

# ================== CSV INPUT ==================
st.subheader("üì• Nh·∫≠p CSV v√†o KPI")
up = st.file_uploader("T·∫£i file CSV (m·∫´u KPI_Input_template.csv)", type=["csv"], accept_multiple_files=False, label_visibility="collapsed")
if up is not None:
    try:
        df = pd.read_csv(up)
        if "Ch·ªçn" not in df.columns: df.insert(0,"Ch·ªçn",False)
        # ƒë·∫£m b·∫£o c√°c c·ªôt ch√≠nh
        needed = ["T√™n ch·ªâ ti√™u (KPI)","ƒê∆°n v·ªã t√≠nh","K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Tr·ªçng s·ªë","B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch",
                  "Th√°ng","NƒÉm","Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£","ƒêi·ªÉm KPI","Ghi ch√∫","T√™n ƒë∆°n v·ªã"]
        for c in needed:
            if c not in df.columns: df[c] = ""
        st.session_state.df = df
        st.success("ƒê√£ n·∫°p CSV.")
    except Exception as e:
        st.error(f"L·ªói ƒë·ªçc CSV: {e}")

# ================== STICKY FORM ==================
with st.container():
    st.markdown('<div class="sticky-box">', unsafe_allow_html=True)

    # N√∫t n·∫°p d√≤ng ƒë√£ ch·ªçn l√™n form (ƒë·∫£m b·∫£o method/plan/actual‚Ä¶ ƒë∆∞·ª£c load)
    if st.button("‚¨ÜÔ∏è N·∫°p d√≤ng ƒë√£ t√≠ch l√™n bi·ªÉu m·∫´u", use_container_width=True):
        if st.session_state.df.empty:
            st.warning("Ch∆∞a c√≥ b·∫£ng CSV.")
        else:
            df = st.session_state.df
            if "Ch·ªçn" in df.columns and df["Ch·ªçn"].sum()==1:
                r = df[df["Ch·ªçn"]==True].iloc[0]
                # set v√†o session_state ƒë·ªÉ l√†m default value cho widget
                st.session_state.form_kpi_name = str(r.get("T√™n ch·ªâ ti√™u (KPI)") or r.get("T√™n ch·ªâ ti√™u") or "")
                st.session_state.unit_txt      = str(r.get("ƒê∆°n v·ªã t√≠nh") or "")
                st.session_state.dept_txt      = str(r.get("B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch") or "")
                st.session_state.owner_txt     = str(r.get("T√™n ƒë∆°n v·ªã") or "")
                st.session_state.plan_txt      = str(r.get("K·∫ø ho·∫°ch") or "")
                st.session_state.actual_txt    = str(r.get("Th·ª±c hi·ªán") or "")
                st.session_state.weight_txt    = str(r.get("Tr·ªçng s·ªë") or "100")
                st.session_state.method_txt    = str(r.get("Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£") or "")
                st.session_state.month_txt     = str(r.get("Th√°ng") or "")
                st.session_state.year_txt      = str(r.get("NƒÉm") or str(datetime.now().year))
                st.session_state.note_txt      = str(r.get("Ghi ch√∫") or "")
                st.success("ƒê√£ n·∫°p d√≤ng ƒë∆∞·ª£c ch·ªçn.")
            else:
                st.warning("H√£y t√≠ch ch·ªçn ƒë√∫ng 1 d√≤ng.")

    c1,c2,c3,c4 = st.columns([3,1,1,2])
    with c1: name = st.text_input("T√™n ch·ªâ ti√™u (KPI)", key="form_kpi_name", value=st.session_state.get("form_kpi_name",""))
    with c2: unit = st.text_input("ƒê∆°n v·ªã t√≠nh", key="unit_txt", value=st.session_state.get("unit_txt",""))
    with c3: dept = st.text_input("B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", key="dept_txt", value=st.session_state.get("dept_txt",""))
    with c4: owner= st.text_input("T√™n ƒë∆°n v·ªã", key="owner_txt", value=st.session_state.get("owner_txt",""))

    c5,c6,c7 = st.columns([1,1,1])
    with c5: plan   = st.text_input("K·∫ø ho·∫°ch", key="plan_txt", value=st.session_state.get("plan_txt","0,00"))
    with c6: actual = st.text_input("Th·ª±c hi·ªán", key="actual_txt", value=st.session_state.get("actual_txt","0,00"))
    with c7: weight = st.text_input("Tr·ªçng s·ªë (%)", key="weight_txt", value=st.session_state.get("weight_txt","100"))

    method = st.text_input("Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£ (c√≥ th·ªÉ ghi [CODE]...)", key="method_txt", value=st.session_state.get("method_txt","ƒê·∫°t/Kh√¥ng ƒë·∫°t"))

    c8,c9,c10 = st.columns([1,1,2])
    with c8: month = st.text_input("Th√°ng", key="month_txt", value=st.session_state.get("month_txt","7"))
    with c9: year  = st.text_input("NƒÉm", key="year_txt", value=st.session_state.get("year_txt",str(datetime.now().year)))
    with c10: note = st.text_input("Ghi ch√∫", key="note_txt", value=st.session_state.get("note_txt",""))

    # Xem tr∆∞·ªõc ƒëi·ªÉm theo RULES
    reg = load_rules()
    preview = compute_score({"Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£":method,"K·∫ø ho·∫°ch":plan,"Th·ª±c hi·ªán":actual,"Tr·ªçng s·ªë":weight,"Ghi ch√∫":note}, reg)
    st.markdown(f"<div class='total-box'>ƒêi·ªÉm xem tr∆∞·ªõc: <b>{'‚Äî' if preview is None else preview}</b></div>", unsafe_allow_html=True)

    # H√†ng n√∫t thao t√°c
    b0,b1,b2,b3,b4 = st.columns([1.1,1,1,1,1])
    with b0:
        st.markdown('<div class="btn-apply">', unsafe_allow_html=True)
        apply_btn = st.button("√Åp d·ª•ng v√†o b·∫£ng CSV t·∫°m", use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    with b1:
        st.markdown('<div class="btn-save">', unsafe_allow_html=True)
        write_btn = st.button("üíæ Ghi CSV t·∫°m v√†o sheet KPI", use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    with b2:
        st.markdown('<div class="btn-clear">', unsafe_allow_html=True)
        clear_btn = st.button("üîÑ L√†m m·ªõi b·∫£ng CSV", use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    with b3:
        st.markdown('<div class="btn-export">', unsafe_allow_html=True)
        export_btn = st.button("üì§ Xu·∫•t b√°o c√°o (Excel)", use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    with b4:
        st.markdown('<div class="btn-drive">', unsafe_allow_html=True)
        drive_btn = st.button("‚òÅÔ∏è L∆∞u d·ªØ li·ªáu (ghi l·∫°i l√™n Sheet)", use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)  # /sticky-box

# ================== √ÅP D·ª§NG V√ÄO B·∫¢NG CSV ==================
if apply_btn:
    if st.session_state.df.empty:
        st.warning("Ch∆∞a c√≥ b·∫£ng CSV.")
    else:
        df = st.session_state.df.copy()
        if "Ch·ªçn" not in df.columns:
            st.warning("Ch∆∞a c√≥ c·ªôt 'Ch·ªçn' ƒë·ªÉ ƒë√°nh d·∫•u d√≤ng.")
        else:
            mask = (df["Ch·ªçn"]==True)
            if mask.sum()==0:
                st.warning("H√£y t√≠ch ch·ªçn √≠t nh·∫•t 1 d√≤ng.")
            else:
                df.loc[mask,"T√™n ch·ªâ ti√™u (KPI)"] = name
                df.loc[mask,"ƒê∆°n v·ªã t√≠nh"] = unit
                df.loc[mask,"B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"] = dept
                df.loc[mask,"T√™n ƒë∆°n v·ªã"] = owner
                df.loc[mask,"K·∫ø ho·∫°ch"] = plan
                df.loc[mask,"Th·ª±c hi·ªán"] = actual
                df.loc[mask,"Tr·ªçng s·ªë"] = weight
                df.loc[mask,"Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£"] = method
                df.loc[mask,"Th√°ng"] = month
                df.loc[mask,"NƒÉm"] = year
                df.loc[mask,"Ghi ch√∫"] = note
                if preview is not None:
                    df.loc[mask,"ƒêi·ªÉm KPI"] = preview
                st.session_state.df = df
                st.success(f"ƒê√£ √°p d·ª•ng cho {mask.sum()} d√≤ng.")

# ================== B·∫¢NG KPI ==================
st.subheader("üìã B·∫£ng KPI (CSV t·∫°m)")
if not st.session_state.df.empty:
    df = st.session_state.df.copy()

    # T√≠nh l·∫°i ƒëi·ªÉm (tr·ª´ khi MANUAL ƒë√£ ƒëi·ªÅn)
    reg = load_rules()
    sc = []
    for _, r in df.iterrows():
        s = compute_score(r, reg)
        sc.append(s if s is not None else r.get("ƒêi·ªÉm KPI"))
    df["ƒêi·ªÉm KPI"] = sc

    # T·ªïng ƒëi·ªÉm
    total = 0.0
    for v in df["ƒêi·ªÉm KPI"].tolist():
        vv = parse_float(v)
        if vv is not None: total += vv
    st.markdown(f"<div class='total-box'>T·ªïng ƒëi·ªÉm KPI (t·∫°m t√≠nh): <b>{format_vn(total,2)}</b></div>", unsafe_allow_html=True)

    edited = st.data_editor(
        df,
        use_container_width=True,
        num_rows="dynamic",
        height=460,
        column_config={"Ch·ªçn": st.column_config.CheckboxColumn("Ch·ªçn", help="T√≠ch ƒë·ªÉ n·∫°p d√≤ng l√™n bi·ªÉu m·∫´u")},
        disabled=[],   # cho ph√©p tick ch·ªçn
        key="kpi_editor",
    )
    st.session_state.df = edited
else:
    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ‚Äì vui l√≤ng t·∫£i CSV m·∫´u l√™n.")

# ================== GHI SHEET / L√ÄM M·ªöI / XU·∫§T EXCEL ==================
def write_to_sheet(df_out: pd.DataFrame):
    sh = get_spreadsheet()
    sheet_name = st.session_state.get("kpi_sheet_name","KPI")
    try:
        ws = sh.worksheet(sheet_name); ws.clear()
    except Exception:
        ws = sh.add_worksheet(title=sheet_name, rows=2000, cols=max(26, len(df_out.columns)))
    ws.update([df_out.columns.tolist()] + df_out.fillna("").astype(str).values.tolist(), value_input_option="USER_ENTERED")
    return True

if write_btn:
    if st.session_state.df.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ghi.")
    else:
        try:
            write_to_sheet(st.session_state.df.copy())
            st.success("ƒê√£ ghi d·ªØ li·ªáu l√™n Google Sheet.")
        except Exception as e:
            st.error(f"L·ªói khi ghi Sheets: {e}")

if clear_btn:
    # x√°c nh·∫≠n l√†m m·ªõi
    st.session_state.confirm_clear = True

if st.session_state.confirm_clear:
    with st.expander("‚ùì X√°c nh·∫≠n l√†m m·ªõi b·∫£ng CSV? (S·∫Ω m·∫•t thay ƒë·ªïi ch∆∞a ghi)", expanded=True):
        c1,c2 = st.columns(2)
        if c1.button("C√≥, l√†m m·ªõi ngay", type="primary"):
            st.session_state.df = pd.DataFrame()
            st.session_state.confirm_clear = False
            st.success("ƒê√£ l√†m m·ªõi b·∫£ng CSV.")
        if c2.button("Kh√¥ng, gi·ªØ nguy√™n"):
            st.session_state.confirm_clear = False

if export_btn:
    if st.session_state.df.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")
    else:
        try:
            out = io.BytesIO()
            with pd.ExcelWriter(out, engine="xlsxwriter") as writer:
                st.session_state.df.to_excel(writer, sheet_name="KPI", index=False)
            st.download_button("‚¨áÔ∏è T·∫£i Excel", data=out.getvalue(),
                               file_name=f"KPI_{datetime.now():%Y%m%d_%H%M}.xlsx",
                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            st.success("ƒê√£ t·∫°o file Excel.")
        except Exception as e:
            st.error(f"L·ªói xu·∫•t: {e}")

if drive_btn:
    # Hi·ªán t·∫°i: ghi l·∫°i l√™n Sheet nh∆∞ m·ªôt c√°ch "l∆∞u" an to√†n (n·∫øu c·∫ßn upload file Drive ri√™ng, c√≥ th·ªÉ b·ªï sung sau).
    if st.session_state.df.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u.")
    else:
        try:
            write_to_sheet(st.session_state.df.copy())
            st.success("ƒê√£ l∆∞u (ghi l·∫°i) d·ªØ li·ªáu l√™n Google Sheet.")
        except Exception as e:
            st.error(f"L·ªói l∆∞u: {e}")
