# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
from datetime import datetime
from io import BytesIO
import base64
import os
import unicodedata

# =============================
# C·∫§U H√åNH TRANG
# =============================
st.set_page_config(
    page_title="KPI Scorer ‚Äì ƒê·ªãnh H√≥a (Full Suite)",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded",
)

# =============================
# H·∫∞NG S·ªê & H√ÄM D√ôNG CHUNG
# =============================
EXPECTED_KPI_COLS = [
    "T√™n ch·ªâ ti√™u (KPI)",          # 1
    "ƒê∆°n v·ªã t√≠nh",                 # 2
    "K·∫ø ho·∫°ch",                    # 3
    "Th·ª±c hi·ªán",                   # 4
    "Tr·ªçng s·ªë",                    # 5
    "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch",     # 6
    "Th√°ng",                       # 7
    "NƒÉm",                         # 8
    "ƒêi·ªÉm KPI",                    # 9 = (Th·ª±c hi·ªán/K·∫ø ho·∫°ch)√óTr·ªçng s·ªë (tr·ª´ KPI d·ª± b√°o)
]


def _safe_number(x, default=0.0):
    try:
        if x is None or x == "":
            return float(default)
        return float(x)
    except Exception:
        return float(default)


# --- C√îNG TH·ª®C CHUNG ---

def compute_kpi_score(thuc_hien, ke_hoach, trong_so):
    ke_hoach = _safe_number(ke_hoach, 0.0)
    thuc_hien = _safe_number(thuc_hien, 0.0)
    trong_so = _safe_number(trong_so, 0.0)
    if ke_hoach == 0:
        return 0.0
    return round((thuc_hien / ke_hoach) * trong_so, 4)


# --- KPI D·ª∞ B√ÅO T·ªîNG TH∆Ø∆†NG PH·∫®M (¬±1.5%; v∆∞·ª£t 0.1% tr·ª´ 0.04; tr·∫ßn 3ƒë) ---

def _kpi_sai_so_du_bao_diem(sai_so_percent, trong_so):
    sai_so = abs(_safe_number(sai_so_percent, 0.0))
    ts = min(_safe_number(trong_so, 0.0), 3.0)  # tr·∫ßn 3 ƒëi·ªÉm
    if sai_so <= 1.5:
        return ts
    vuot = sai_so - 1.5
    tru = (vuot / 0.1) * 0.04
    tru = min(tru, 3.0)
    return max(round(ts - tru, 4), 0.0)


def _is_du_bao_tong_thuong_pham(ten_chi_tieu: str) -> bool:
    if not ten_chi_tieu:
        return False
    s = ten_chi_tieu.strip().lower()
    return "d·ª± b√°o t·ªïng th∆∞∆°ng ph·∫©m" in s


def compute_kpi_score_dynamic(ten_chi_tieu, thuc_hien, ke_hoach, trong_so):
    # N·∫øu l√† KPI d·ª± b√°o ‚Üí thuc_hien coi l√† sai s·ªë (%) theo th√°ng
    if _is_du_bao_tong_thuong_pham(ten_chi_tieu):
        return _kpi_sai_so_du_bao_diem(thuc_hien, trong_so)
    return compute_kpi_score(thuc_hien, ke_hoach, trong_so)


def export_dataframe_to_excel(df: pd.DataFrame) -> bytes:
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name="KPI")
        workbook = writer.book
        worksheet = writer.sheets["KPI"]
        fmt = workbook.add_format({"text_wrap": True, "valign": "vcenter"})
        worksheet.set_column(0, len(df.columns)-1, 22, fmt)
    buffer.seek(0)
    return buffer.read()


# =============================
# LOGO TR√íN (ƒëa ngu·ªìn + m·∫∑c ƒë·ªãnh GitHub c·ªßa anh Long)
# =============================

def _detect_logo_bytes():
    """∆Øu ti√™n:
    1) secrets['ui']['logo_url'] ho·∫∑c secrets['logo_url']
    2) /mnt/data/logo.png
    3) ./assets/logo.png ho·∫∑c ./.streamlit/logo.png
    4) ENV LOGO_URL
    5) DEFAULT_LOGO_URL (GitHub c·ªßa anh Long)
    """
    DEFAULT_LOGO_URL = "https://raw.githubusercontent.com/phamlong666/kpi/main/logo_hinh_tron.png"
    try:
        ui = st.secrets.get("ui", {})
        logo_url = ui.get("logo_url") or st.secrets.get("logo_url")
        if logo_url:
            return f'<img class="floating-logo" src="{logo_url}" />', "secrets.logo_url"
    except Exception:
        pass
    for p in ["/mnt/data/logo.png", "./assets/logo.png", "./.streamlit/logo.png"]:
        if os.path.exists(p):
            try:
                with open(p, "rb") as f:
                    b64 = base64.b64encode(f.read()).decode()
                return f'<img class="floating-logo" src="data:image/png;base64,{b64}" />', p
            except Exception:
                pass
    env_logo = os.getenv("LOGO_URL")
    if env_logo:
        return f'<img class="floating-logo" src="{env_logo}" />', "env.LOGO_URL"
    if DEFAULT_LOGO_URL:
        return f'<img class="floating-logo" src="{DEFAULT_LOGO_URL}" />', "DEFAULT_LOGO_URL"
    return '<div class="floating-logo">‚ö°</div>', "fallback"


def _inject_ui_enhancements():
    logo_tag, _ = _detect_logo_bytes()
    css = """
    <style>
    .title-card{padding:14px 18px;border:1px solid #ececec;border-radius:12px;background:#fff;box-shadow:0 2px 8px rgba(0,0,0,0.04)}
    .title-card h1{margin:0;font-size:28px;line-height:1.25;font-weight:800;color:#0B5ED7;display:flex;align-items:center;gap:10px}
    .title-card .title-icon{font-size:26px;background:#0B5ED7;color:#fff;width:36px;height:36px;border-radius:50%;display:inline-flex;align-items:center;justify-content:center;box-shadow:0 2px 6px rgba(11,94,215,.35)}
    .title-card .subtitle{margin:6px 0 0 0;color:#444}
    .section-title{font-size:24px;font-weight:800;margin:6px 0 12px 0;color:#222}
    [data-testid="stDataFrame"] *,[data-testid="stDataEditor"] *,[data-testid="stDataEditorGrid"] *{font-size:20px !important}
    html, body, [data-testid="stAppViewContainer"] *{font-size:20px}
    .stTextInput>div>div>input,.stNumberInput input{font-size:19px !important}
    .stButton>button{font-size:18px !important}
    .floating-logo{position:fixed;right:16px;top:86px;width:76px;height:76px;border-radius:50%;box-shadow:0 6px 16px rgba(0,0,0,0.15);z-index:99999;background:#ffffffee;backdrop-filter:blur(4px);display:inline-block;object-fit:cover;text-align:center;line-height:76px;font-size:38px;animation:pop .6s ease-out;pointer-events:none}
    @keyframes pop{0%{transform:scale(.6);opacity:.2}100%{transform:scale(1);opacity:1}}
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)
    st.markdown(logo_tag, unsafe_allow_html=True)


# =============================
# GOOGLE SHEETS (t√πy ch·ªçn) & SESSION STATE
# =============================

def read_service_account_from_secrets():
    try:
        conf = st.secrets["google_service_account"]
    except Exception:
        try:
            conf = st.secrets["gdrive_service_account"]
        except Exception as e:
            raise RuntimeError("Kh√¥ng t√¨m th·∫•y google_service_account ho·∫∑c gdrive_service_account trong secrets.") from e
    conf = dict(conf)
    if "private_key" in conf and conf["private_key"]:
        # FIX: thay '\n' b·∫±ng xu·ªëng d√≤ng th·∫≠t (handle c·∫£ d·∫°ng ƒë√£ b·ªã escape)
        pk = str(conf["private_key"])
        conf["private_key"] = pk.replace("\\n", "\n")
        return conf
    if "private_key_b64" in conf and conf["private_key_b64"]:
        import base64
        decoded = base64.b64decode(conf["private_key_b64"]).decode("utf-8")
        conf["private_key"] = decoded.replace("\\n", "\n")
        return conf
    raise RuntimeError("Secrets thi·∫øu private_key ho·∫∑c private_key_b64.")


def get_gspread_client_if_possible():
    try:
        from oauth2client.service_account import ServiceAccountCredentials
        import gspread
    except Exception as e:
        return None, f"Thi·∫øu th∆∞ vi·ªán gspread/oauth2client: {e}"
    try:
        sa = read_service_account_from_secrets()
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(sa, scope)
        client = gspread.authorize(creds)
        return client, "ƒê√£ s·∫µn s√†ng k·∫øt n·ªëi Google Sheets."
    except Exception as e:
        return None, str(e)


def init_session_state():
    # B·∫£ng t·∫°m cho lu·ªìng CSV + form
    st.session_state.setdefault("kpi_rows", [])
    # State form th·ªß c√¥ng
    defaults = {
        'ten_kpi':'', 'dvt':'', 'ke_hoach':0.0, 'thuc_hien':0.0, 'trong_so':0.0,
        'bo_phan':'T·ªï Kinh doanh t·ªïng h·ª£p', 'thang':datetime.now().month, 'nam':datetime.now().year
    }
    for k, v in defaults.items():
        st.session_state.setdefault(k, v)
    # Google flags
    st.session_state.setdefault("connected", False)
    st.session_state.setdefault("connect_msg", "")
    # ‚úÖ L∆ØU TR·∫†NG TH√ÅI T√çCH CH·ªåN H√ÄNG TRONG B·∫¢NG T·∫†M (ƒë·ªÉ kh√¥ng b·ªã m·∫•t khi rerun)
    # key: __row_id ‚Üí bool
    st.session_state.setdefault("temp_selected", {})


# =============================
# SIDEBAR & HEADER
# =============================
init_session_state()

with st.sidebar:
    st.header("üîó K·∫øt n·ªëi")
    spreadsheet_id = st.text_input(
        "Spreadsheet ID",
        help=(
            "D√°n ID c·ªßa Google Sheets. V√≠ d·ª• t·ª´ URL:\n"
            "https://docs.google.com/spreadsheets/d/1AbCdEfGh.../edit#gid=0\n"
            "=> Spreadsheet ID l√† ph·∫ßn gi·ªØa /d/ v√† /edit"
        ),
    )
    nhom_cham = st.selectbox("Nh√≥m ch·∫•m", [1,2,3,4,5], index=1)
    email_nhan_bao_cao = st.text_input("Email nh·∫≠n b√°o c√°o", "phamlong666@gmail.com")

    st.markdown("---")
    st.caption("M·∫Øt N√¢u v·∫´n cho ph√©p **nh·∫≠p KPI th·ªß c√¥ng** k·ªÉ c·∫£ khi ch∆∞a k·∫øt n·ªëi Google.")

connected = False
connect_msg = ""
if spreadsheet_id:
    client, msg = get_gspread_client_if_possible()
    if client is None:
        connect_msg = f"Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c Google Sheets: {msg}"
        st.warning(connect_msg)
    else:
        connected = True
        connect_msg = "K·∫øt n·ªëi Google Sheets s·∫µn s√†ng."
        st.success(connect_msg)

st.session_state.connected = connected
st.session_state.connect_msg = connect_msg

_inject_ui_enhancements()
st.markdown(
    """
<div class="title-card">
  <h1><span class="title-icon">‚ö°</span><span class="title-text">KPI ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a</span></h1>
  <p class="subtitle">Lu·ªìng chu·∫©n: Upload CSV ‚Üí th√™m v√†o B·∫£ng t·∫°m ‚Üí ch·ªçn d√≤ng ‚Üí t·ª± n·∫°p l√™n Form nh·∫≠p ‚Üí t√≠nh ƒëi·ªÉm ngay.</p>
</div>
""",
    unsafe_allow_html=True,
)

# =============================
# 3) NH·∫¨P TH·ª¶ C√îNG KPI & XU·∫§T EXCEL (9 C·ªòT)
#    + N·∫†P CSV V√ÄO B·∫¢NG T·∫†M & CH·ªåN D√íNG ƒê·ªÇ N·∫†P L√äN FORM
# =============================
st.markdown("---")
st.markdown('<h2 class="section-title">3) Nh·∫≠p th·ªß c√¥ng KPI & Xu·∫•t Excel (9 c·ªôt)</h2>', unsafe_allow_html=True)

# ---- 3.a) UPLOAD CSV ‚Üí ƒê·ªî V√ÄO B·∫¢NG T·∫†M ----
with st.expander("‚¨ÜÔ∏è N·∫°p CSV v√†o 'B·∫£ng t·∫°m'", expanded=False):
    up_csv = st.file_uploader(
        "T·∫£i file .csv (c√°c c·ªôt g·ª£i √Ω: 'T√™n ch·ªâ ti√™u (KPI)', 'ƒê∆°n v·ªã t√≠nh', 'K·∫ø ho·∫°ch (th√°ng)', 'Tr·ªçng s·ªë', 'B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch', 'Th√°ng', 'NƒÉm', 'Th·ª±c hi·ªán (th√°ng)')",
        type=["csv"],
        key="csv_to_temp",
    )
    if up_csv is not None:
        try:
            df_csv = pd.read_csv(up_csv)
            # √Ånh x·∫° linh ho·∫°t ‚Üí 9 c·ªôt chu·∫©n c·ªßa b·∫£ng t·∫°m
            def _map_row(r):
                name = r.get('T√™n ch·ªâ ti√™u (KPI)', r.get('Ten KPI', ''))
                dvt = r.get('ƒê∆°n v·ªã t√≠nh', r.get('Don vi tinh', ''))
                plan = r.get('K·∫ø ho·∫°ch (th√°ng)', r.get('K·∫ø ho·∫°ch', r.get('Ke hoach', 0)))
                actual = r.get('Th·ª±c hi·ªán (th√°ng)', r.get('Th·ª±c hi·ªán', r.get('Thuc hien', 0)))
                weight = r.get('Tr·ªçng s·ªë', r.get('Trong so', 0))
                dept = r.get('B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch', r.get('Bo phan', ''))
                month = r.get('Th√°ng', datetime.now().month)
                year = r.get('NƒÉm', datetime.now().year)
                score = compute_kpi_score_dynamic(name, actual, plan, weight)
                return {
                    "T√™n ch·ªâ ti√™u (KPI)": str(name or "").strip(),
                    "ƒê∆°n v·ªã t√≠nh": str(dvt or "").strip(),
                    "K·∫ø ho·∫°ch": _safe_number(plan, 0),
                    "Th·ª±c hi·ªán": _safe_number(actual, 0),
                    "Tr·ªçng s·ªë": _safe_number(weight, 0),
                    "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch": str(dept or "").strip(),
                    "Th√°ng": int(_safe_number(month, datetime.now().month)),
                    "NƒÉm": int(_safe_number(year, datetime.now().year)),
                    "ƒêi·ªÉm KPI": score,
                }
            added = [_map_row(r) for _, r in df_csv.fillna("").iterrows()]
            st.session_state.kpi_rows.extend(added)
            st.success(f"ƒê√£ th√™m {len(added)} d√≤ng v√†o B·∫£ng t·∫°m.")
        except Exception as e:
            st.error(f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c CSV: {e}")

# ---- 3.b) FORM TH·ª¶ C√îNG (g·∫Øn v·ªõi session_state ƒë·ªÉ n·∫°p t·ª´ b·∫£ng t·∫°m) ----
with st.form("kpi_input_form", clear_on_submit=False):
    c1, c2, c3 = st.columns([1.2, 1.2, 1])
    with c1:
        st.text_input("1) T√™n ch·ªâ ti√™u (KPI)", key='ten_kpi')
        st.text_input("2) ƒê∆°n v·ªã t√≠nh", key='dvt')
        st.number_input("3) K·∫ø ho·∫°ch", min_value=0.0, step=0.1, format="%.4f", key='ke_hoach')
    with c2:
        st.number_input("4) Th·ª±c hi·ªán", min_value=0.0, step=0.1, format="%.4f", key='thuc_hien')
        st.number_input("5) Tr·ªçng s·ªë", min_value=0.0, step=0.1, format="%.4f", key='trong_so')
    bo_phan_list = [
        "T·ªï K·∫ø ho·∫°ch k·ªπ thu·∫≠t",
        "T·ªï Kinh doanh t·ªïng h·ª£p",
        "T·ªï Qu·∫£n l√Ω t·ªïng h·ª£p 1",
        "T·ªï Qu·∫£n l√Ω t·ªïng h·ª£p 2",
        "T·ªï Tr·ª±c v·∫≠n h√†nh",
        "T·ªï Ki·ªÉm tra gi√°m s√°t mua b√°n ƒëi·ªán",
    ]
    st.selectbox("6) B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", bo_phan_list, index=bo_phan_list.index(st.session_state.get('bo_phan', bo_phan_list[1])) if st.session_state.get('bo_phan', None) in bo_phan_list else 1, key='bo_phan')
    with c3:
        st.selectbox("7) Th√°ng", list(range(1,13)), index=(st.session_state.get('thang', datetime.now().month)-1), key='thang')
        st.number_input("8) NƒÉm", min_value=2000, max_value=2100, value=st.session_state.get('nam', datetime.now().year), step=1, key='nam')
        st.metric("9) ƒêi·ªÉm KPI (xem tr∆∞·ªõc)", compute_kpi_score_dynamic(st.session_state['ten_kpi'], st.session_state['thuc_hien'], st.session_state['ke_hoach'], st.session_state['trong_so']))

    if st.form_submit_button("‚ûï Th√™m v√†o b·∫£ng t·∫°m"):
        row = {
            "T√™n ch·ªâ ti√™u (KPI)": st.session_state['ten_kpi'].strip(),
            "ƒê∆°n v·ªã t√≠nh": st.session_state['dvt'].strip(),
            "K·∫ø ho·∫°ch": _safe_number(st.session_state['ke_hoach'], 0.0),
            "Th·ª±c hi·ªán": _safe_number(st.session_state['thuc_hien'], 0.0),
            "Tr·ªçng s·ªë": _safe_number(st.session_state['trong_so'], 0.0),
            "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch": st.session_state['bo_phan'].strip(),
            "Th√°ng": int(st.session_state['thang']),
            "NƒÉm": int(st.session_state['nam']),
            "ƒêi·ªÉm KPI": compute_kpi_score_dynamic(st.session_state['ten_kpi'], st.session_state['thuc_hien'], st.session_state['ke_hoach'], st.session_state['trong_so']),
        }
        st.session_state.kpi_rows.append(row)
        st.success("ƒê√£ th√™m 1 d√≤ng KPI v√†o b·∫£ng t·∫°m.")

# ---- 3.c) B·∫¢NG T·∫†M: CH·ªåN D√íNG ‚Üí N·∫†P L√äN FORM & XU·∫§T EXCEL ----
# T·∫°o DataFrame t·ª´ b·∫£ng t·∫°m
df_manual = pd.DataFrame(st.session_state.kpi_rows, columns=EXPECTED_KPI_COLS) if st.session_state.kpi_rows else pd.DataFrame(columns=EXPECTED_KPI_COLS)

st.markdown("**B·∫£ng t·∫°m (tick c·ªôt *Ch·ªçn* r·ªìi nh·∫•n ‚ñ∂ N·∫°p d√≤ng ƒë√£ ch·ªçn l√™n Form):**")

# ‚úÖ T·∫°o __row_id ·ªïn ƒë·ªãnh ƒë·ªÉ l∆∞u tr·∫°ng th√°i ch·ªçn
if not df_manual.empty:
    df_manual["__row_id"] = (
        df_manual["T√™n ch·ªâ ti√™u (KPI)"].astype(str).fillna("") + "|" +
        df_manual["ƒê∆°n v·ªã t√≠nh"].astype(str).fillna("") + "|" +
        df_manual["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"].astype(str).fillna("") + "|" +
        df_manual["Th√°ng"].astype(str).fillna("") + "|" +
        df_manual["NƒÉm"].astype(str).fillna("")
    )
else:
    df_manual["__row_id"] = []

# ‚úÖ D·ª±ng c·ªôt "Ch·ªçn" t·ª´ state, ƒë·ªÉ tick kh√¥ng b·ªã m·∫•t khi app rerun
sel_map = st.session_state.get("temp_selected", {})
chons = [bool(sel_map.get(i, False)) for i in df_manual["__row_id"].tolist()]

# T·∫°o DataFrame hi·ªÉn th·ªã, s·ª≠ d·ª•ng list of booleans cho c·ªôt 'Ch·ªçn'
df_display = df_manual.copy()
df_display.insert(0, "Ch·ªçn", chons)

# C·∫•u h√¨nh c·ªôt: ch·ªâ cho ph√©p tick "Ch·ªçn", c√°c c·ªôt c√≤n l·∫°i kh√≥a l·∫°i
colcfg = {
    "Ch·ªçn": st.column_config.CheckboxColumn(
        "Ch·ªçn",
        help="ƒê√°nh d·∫•u m·ªôt d√≤ng ƒë·ªÉ n·∫°p l√™n Form",
    ),
    "T√™n ch·ªâ ti√™u (KPI)": st.column_config.TextColumn(disabled=True),
    "ƒê∆°n v·ªã t√≠nh": st.column_config.TextColumn(disabled=True),
    "K·∫ø ho·∫°ch": st.column_config.NumberColumn(disabled=True),
    "Th·ª±c hi·ªán": st.column_config.NumberColumn(disabled=True),
    "Tr·ªçng s·ªë": st.column_config.NumberColumn(disabled=True),
    "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch": st.column_config.TextColumn(disabled=True),
    "Th√°ng": st.column_config.NumberColumn(disabled=True),
    "NƒÉm": st.column_config.NumberColumn(disabled=True),
    "ƒêi·ªÉm KPI": st.column_config.NumberColumn(format="%.4f", disabled=True),
}

edited_temp = st.data_editor(
    df_display,
    key="temp_table_editor",
    use_container_width=True,
    hide_index=True,
    column_config=colcfg,
    num_rows="fixed",
)

# ‚úÖ S·ª¨A L·ªñI: C·∫¨P NH·∫¨T L·∫†I state l·ª±a ch·ªçn t·ª´ k·∫øt qu·∫£ edited_temp m·ªôt c√°ch c·∫©n th·∫≠n
if not edited_temp.empty:
    try:
        # L·∫•y danh s√°ch ID hi·ªán t·∫°i
        current_ids = edited_temp["__row_id"].tolist()
        # T·∫°o m·ªôt dictionary m·ªõi ƒë·ªÉ l∆∞u tr·∫°ng th√°i
        new_sel_map = {}
        for _id, _chon in zip(current_ids, edited_temp["Ch·ªçn"].tolist()):
            new_sel_map[_id] = bool(_chon)
        # Thay th·∫ø to√†n b·ªô state c≈© b·∫±ng state m·ªõi
        st.session_state.temp_selected = new_sel_map
    except Exception:
        # Trong tr∆∞·ªùng h·ª£p c√≥ l·ªói, gi·ªØ l·∫°i tr·∫°ng th√°i c≈©
        pass

colSel1, colSel2, colSel3 = st.columns([1,1,2])
with colSel1:
    if st.button("‚ñ∂ N·∫°p d√≤ng ƒë√£ ch·ªçn l√™n Form"):
        # L·∫•y danh s√°ch id ƒë√£ ch·ªçn t·ª´ state (b·ªÅn v·ªØng)
        selected_ids = [k for k, v in st.session_state.temp_selected.items() if v]
        if not selected_ids:
            st.warning("Ch∆∞a ch·ªçn d√≤ng n√†o (tick v√†o c·ªôt 'Ch·ªçn').")
        else:
            # ∆Øu ti√™n d√≤ng cu·ªëi c√πng v·ª´a tick
            sel_id = selected_ids[-1]
            r = df_manual[df_manual["__row_id"] == sel_id].iloc[0]
            # G√°n l√™n form
            st.session_state['ten_kpi'] = str(r["T√™n ch·ªâ ti√™u (KPI)"])
            st.session_state['dvt'] = str(r["ƒê∆°n v·ªã t√≠nh"]) or ""
            st.session_state['ke_hoach'] = float(_safe_number(r["K·∫ø ho·∫°ch"], 0))
            st.session_state['thuc_hien'] = float(_safe_number(r["Th·ª±c hi·ªán"], 0))
            st.session_state['trong_so'] = float(_safe_number(r["Tr·ªçng s·ªë"], 0))
            st.session_state['bo_phan'] = str(r["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"]) or "T·ªï Kinh doanh t·ªïng h·ª£p"
            st.session_state['thang'] = int(_safe_number(r["Th√°ng"], datetime.now().month))
            st.session_state['nam'] = int(_safe_number(r["NƒÉm"], datetime.now().year))
            st.success("ƒê√£ n·∫°p d√≤ng ƒë√£ ch·ªçn l√™n Form. Anh ch·ªânh 'Th·ª±c hi·ªán' ƒë·ªÉ ra ƒëi·ªÉm KPI.")
with colSel2:
    if st.button("üóëÔ∏è X√≥a d√≤ng tick ch·ªçn"):
        selected_ids = [k for k, v in st.session_state.temp_selected.items() if v]
        if not selected_ids:
            st.info("Ch∆∞a tick ch·ªçn d√≤ng n√†o.")
        else:
            # X√≥a kh·ªèi b·∫£ng t·∫°m theo __row_id
            keep_mask = ~df_manual["__row_id"].isin(selected_ids)
            st.session_state.kpi_rows = df_manual[keep_mask].drop(columns=["__row_id"]).to_dict(orient="records")
            # X√≥a tr·∫°ng th√°i ch·ªçn t∆∞∆°ng ·ª©ng
            for k in selected_ids:
                st.session_state.temp_selected.pop(k, None)
            st.success(f"ƒê√£ x√≥a {len(selected_ids)} d√≤ng kh·ªèi B·∫£ng t·∫°m.")
with colSel3:
    if st.button("üíæ Xu·∫•t Excel (B·∫£ng t·∫°m)"):
        if len(st.session_state.kpi_rows) == 0:
            st.error("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")
        else:
            out_df = pd.DataFrame(st.session_state.kpi_rows, columns=EXPECTED_KPI_COLS)
            bin_data = export_dataframe_to_excel(out_df)
            file_name = f"KPI_Scorer_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            st.download_button(
                label="‚¨áÔ∏è T·∫£i file Excel",
                data=bin_data,
                file_name=file_name,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

# =============================
# 4) N·∫†P FILE CHU·∫®N 1 TH√ÅNG ‚Üí AUTO-SCORE TR·ª∞C TI·∫æP TRONG L∆Ø·ªöI (T√ôY CH·ªåN)
# =============================
# Ph·∫ßn n√†y gi·ªØ l·∫°i kh·∫£ nƒÉng n·∫°p file KPI_Input (Excel/CSV) v√† t√≠nh ƒëi·ªÉm t·ª± ƒë·ªông ngay trong b·∫£ng,
# gi√∫p anh x·ª≠ l√Ω nhanh m·ªôt th√°ng d·ªØ li·ªáu ƒë·ªôc l·∫≠p (kh√¥ng ƒë·ª•ng ƒë·∫øn b·∫£ng t·∫°m ·ªü tr√™n).

def _norm_text(s: str) -> str:
    if not isinstance(s, str):
        s = str(s or "")
    s = unicodedata.normalize("NFKD", s)
    s = "".join(ch for ch in s if not unicodedata.combining(ch)).lower()
    s = " ".join(s.split())
    return s

@st.cache_data(show_spinner=False)
def _load_kpi_input_from_xlsx(b: bytes) -> pd.DataFrame:
    xls = pd.ExcelFile(BytesIO(b))
    if "KPI_Input" not in xls.sheet_names:
        raise ValueError("Kh√¥ng t√¨m th·∫•y sheet 'KPI_Input' trong file.")
    df = pd.read_excel(xls, sheet_name="KPI_Input")
    required = [
        "STT", "Nh√≥m/Parent", "T√™n ch·ªâ ti√™u (KPI)", "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£",
        "ƒê∆°n v·ªã t√≠nh", "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", "K·∫ø ho·∫°ch (th√°ng)",
        "Th·ª±c hi·ªán (th√°ng)", "Tr·ªçng s·ªë", "ƒêi·ªÉm KPI", "Th√°ng", "NƒÉm"
    ]
    missing = [c for c in required if c not in df.columns]
    if missing:
        raise ValueError(f"Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {missing}")
    return df[required].copy()


def _autoscore_row_onemonth(row: pd.Series) -> float:
    name = row.get("T√™n ch·ªâ ti√™u (KPI)", "")
    method = row.get("Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£", "")
    plan = row.get("K·∫ø ho·∫°ch (th√°ng)")
    actual = row.get("Th·ª±c hi·ªán (th√°ng)")
    try:
        plan = float(plan); actual = float(actual)
    except Exception:
        return row.get("ƒêi·ªÉm KPI", None)
    txt = _norm_text(f"{name} {method}")
    if "du bao tong thuong pham" in txt:
        ts = row.get("Tr·ªçng s·ªë", 3)
        return _kpi_sai_so_du_bao_diem((actual - plan) / plan * 100.0, ts)
    ts = row.get("Tr·ªçng s·ªë", 0)
    return compute_kpi_score(actual, plan, ts)


def _autoscore_dataframe_onemonth(df: pd.DataFrame) -> pd.DataFrame:
    if df.empty:
        return df
    out = df.copy()
    out["ƒêi·ªÉm KPI"] = out.apply(_autoscore_row_onemonth, axis=1)
    return out

st.markdown("---")
st.markdown('<h2 class="section-title">4) N·∫°p file chu·∫©n 1 th√°ng ‚Üí Nh·∫≠p "Th·ª±c hi·ªán (th√°ng)" ‚Üí T·ª± t√≠nh ƒëi·ªÉm</h2>', unsafe_allow_html=True)

mode = st.radio(
    "Ngu·ªìn file 1 th√°ng",
    ["T·∫£i Excel (.xlsx)", "T·∫£i CSV (.csv)"],
    horizontal=True,
)

mon_df = pd.DataFrame()
if mode == "T·∫£i Excel (.xlsx)":
    up = st.file_uploader("T·∫£i file Excel KPI_Input.xlsx (sheet KPI_Input)", type=["xlsx"], key="one_xlsx")
    if up is not None:
        try:
            mon_df = _load_kpi_input_from_xlsx(up.read())
        except Exception as e:
            st.error(f"L·ªói Excel: {e}")
elif mode == "T·∫£i CSV (.csv)":
    upc = st.file_uploader("T·∫£i file CSV (c·∫•u tr√∫c nh∆∞ KPI_Input)", type=["csv"], key="one_csv")
    if upc is not None:
        try:
            mon_df = pd.read_csv(upc)
        except Exception as e:
            st.error(f"L·ªói CSV: {e}")

if mon_df is None or mon_df.empty:
    st.info("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu h·ª£p l·ªá cho m·ª•c 1 th√°ng.")
else:
    # Chu·∫©n h√≥a ki·ªÉu
    for _col in ["K·∫ø ho·∫°ch (th√°ng)", "Th·ª±c hi·ªán (th√°ng)", "Tr·ªçng s·ªë", "ƒêi·ªÉm KPI", "Th√°ng", "NƒÉm"]:
        if _col in mon_df.columns:
            mon_df[_col] = pd.to_numeric(mon_df[_col], errors="coerce")

    # Ch·ªçn th√°ng/nƒÉm
    colM, colY = st.columns(2)
    with colM:
        month_default = int(mon_df["Th√°ng"].dropna().astype(int).iloc[0]) if "Th√°ng" in mon_df.columns and len(mon_df)>0 else datetime.now().month
        chosen_month = st.number_input("Th√°ng", min_value=1, max_value=12, value=month_default, step=1)
    with colY:
        year_default = int(mon_df["NƒÉm"].dropna().astype(int).iloc[0]) if "NƒÉm" in mon_df.columns and len(mon_df)>0 else datetime.now().year
        chosen_year = st.number_input("NƒÉm", min_value=2000, max_value=2100, value=year_default, step=1)

    base = mon_df[(mon_df["Th√°ng"].astype(int) == int(chosen_month)) & (mon_df["NƒÉm"].astype(int) == int(chosen_year))].copy()

    with st.expander("üîé T√¨m nhanh theo Ph∆∞∆°ng ph√°p/T√™n KPI/B·ªô ph·∫≠n"):
        q = st.text_input("T·ª´ kh√≥a", value="")
        col1, col2 = st.columns(2)
        with col1:
            departments = [x for x in sorted(base["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"].dropna().astype(str).unique().tolist()) if x]
            dept = st.multiselect("B·ªô ph·∫≠n", departments, default=[])
        with col2:
            units = [x for x in sorted(base["ƒê∆°n v·ªã t√≠nh"].dropna().astype(str).unique().tolist()) if x]
            unit = st.multiselect("ƒê∆°n v·ªã t√≠nh", units, default=[])
        mask = pd.Series([True]*len(base))
        if q:
            qlow = q.lower()
            mask &= base.apply(lambda r: qlow in str(r["Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£"]).lower()
                                           or qlow in str(r["T√™n ch·ªâ ti√™u (KPI)"]).lower()
                                           or qlow in str(r["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"]).lower(), axis=1)
        if dept:
            mask &= base["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"].astype(str).isin(dept)
        if unit:
            mask &= base["ƒê∆°n v·ªã t√≠nh"].astype(str).isin(unit)
        base = base[mask].copy()

    # Hi·ªÉn th·ªã l∆∞·ªõi cho ph√©p nh·∫≠p v√† t√≠nh
    scored = _autoscore_dataframe_onemonth(base)
    edited = st.data_editor(
        scored,
        key=f"editor_onemonth_{chosen_year}_{chosen_month}",
        use_container_width=True,
        hide_index=True,
        column_config={
            "Th·ª±c hi·ªán (th√°ng)": st.column_config.NumberColumn(format="%f"),
            "Tr·ªçng s·ªë": st.column_config.NumberColumn(format="%f"),
            "ƒêi·ªÉm KPI": st.column_config.NumberColumn(format="%f", disabled=True),
        },
    )

    # Xu·∫•t Excel
    colL, colR = st.columns([1,1])
    with colL:
        if st.button("üíæ Xu·∫•t Excel (.xlsx) ‚Äì b·∫£ng 1 th√°ng"):
            output = BytesIO()
            with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
                edited.to_excel(writer, index=False, sheet_name="KPI_Input")
                wb = writer.book
                ws = writer.sheets["KPI_Input"]
                fmt_header = wb.add_format({"bold": True, "bg_color": "#E2F0D9", "border": 1})
                fmt_cell = wb.add_format({"border": 1})
                ws.set_row(0, 22, fmt_header)
                for i, _ in enumerate(edited.columns):
                    ws.set_column(i, i, 22, fmt_cell)
            st.download_button(
                label="T·∫£i v·ªÅ KPI_Input",
                data=output.getvalue(),
                file_name=f"KPI_Input_{int(chosen_year)}_{int(chosen_month):02d}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
    with colR:
        st.caption("B·∫£ng tr√™n ƒë√£ hi·ªÉn th·ªã ƒëi·ªÉm KPI tr·ª±c ti·∫øp ‚Äì g·ªçn giao di·ªán.")

# =============================
# FOOTER
# =============================
st.caption("¬© BrownEyes ‚Äì KPI Scorer (CSV ‚Üí B·∫£ng t·∫°m ‚Üí N·∫°p Form + Module 1 th√°ng).")
