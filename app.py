# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
from datetime import datetime
from io import BytesIO
import base64
import json
import re

# ---- C·∫•u h√¨nh trang ----
st.set_page_config(
    page_title="KPI Scorer ‚Äì ƒê·ªãnh H√≥a (Full Suite)",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ------------------------
# 1) TI·ªÜN √çCH & H√ÄM D√ôNG CHUNG
# ------------------------

EXPECTED_KPI_COLS = [
    "T√™n ch·ªâ ti√™u (KPI)",          # 1
    "ƒê∆°n v·ªã t√≠nh",                 # 2
    "K·∫ø ho·∫°ch",                    # 3
    "Th·ª±c hi·ªán",                   # 4
    "Tr·ªçng s·ªë",                    # 5
    "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch",     # 6
    "Th√°ng",                       # 7
    "NƒÉm",                         # 8
    "ƒêi·ªÉm KPI",                    # 9 = (Th·ª±c hi·ªán / K·∫ø ho·∫°ch) √ó Tr·ªçng s·ªë
]

def _safe_number(x, default=0.0):
    try:
        if x is None or x == "":
            return float(default)
        return float(x)
    except Exception:
        return float(default)

# --- C√¥ng th·ª©c m·∫∑c ƒë·ªãnh (d·∫°ng t·ª∑ l·ªá) ---
def compute_kpi_score(thuc_hien, ke_hoach, trong_so):
    ke_hoach = _safe_number(ke_hoach, 0.0)
    thuc_hien = _safe_number(thuc_hien, 0.0)
    trong_so = _safe_number(trong_so, 0.0)
    if ke_hoach == 0:
        return 0.0
    return round((thuc_hien / ke_hoach) * trong_so, 4)

# --- C√¥ng th·ª©c ƒë·∫∑c th√π: D·ª± b√°o t·ªïng th∆∞∆°ng ph·∫©m (¬±1.5%, tr·ª´ 0.04 m·ªói 0.1%) ---
def _kpi_sai_so_du_bao_diem(sai_so_percent, trong_so):
    """
    - |sai s·ªë| ‚â§ 1.5%  => ƒëi·ªÉm = tr·ªçng s·ªë
    - N·∫øu v∆∞·ª£t chu·∫©n: c·ª© 0.1% v∆∞·ª£t ‚Üí tr·ª´ 0.04 ƒëi·ªÉm, t·ªëi ƒëa tr·ª´ 3 ƒëi·ªÉm
    - Kh√¥ng √¢m ƒëi·ªÉm
    """
    sai_so = abs(_safe_number(sai_so_percent, 0.0))
    ts = _safe_number(trong_so, 0.0)
    if sai_so <= 1.5:
        return ts
    vuot = sai_so - 1.5
    tru = (vuot / 0.1) * 0.04
    tru = min(tru, 3.0)
    return max(round(ts - tru, 4), 0.0)

# --- Nh·∫≠n di·ªán t√™n KPI d·ª± b√°o ---
def _is_du_bao_tong_thuong_pham(ten_chi_tieu: str) -> bool:
    if not ten_chi_tieu:
        return False
    s = ten_chi_tieu.strip().lower()
    return "d·ª± b√°o t·ªïng th∆∞∆°ng ph·∫©m" in s

# --- T√≠nh ƒëi·ªÉm ƒë·ªông cho b·∫£ng nh·∫≠p tay (kh√¥ng c√≥ sai s·ªë % r√µ r√†ng) ---
def compute_kpi_score_dynamic(ten_chi_tieu, thuc_hien, ke_hoach, trong_so):
    """
    - N·∫øu t√™n ch·ª©a 'D·ª± b√°o t·ªïng th∆∞∆°ng ph·∫©m' ‚Üí coi 'Th·ª±c hi·ªán' l√† sai s·ªë (%) theo th√°ng v√† √°p c√¥ng th·ª©c ¬±1.5%.
    - Ng∆∞·ª£c l·∫°i ‚Üí c√¥ng th·ª©c m·∫∑c ƒë·ªãnh (Th·ª±c hi·ªán/K·∫ø ho·∫°ch)*Tr·ªçng s·ªë.
    """
    if _is_du_bao_tong_thuong_pham(ten_chi_tieu):
        return _kpi_sai_so_du_bao_diem(thuc_hien, trong_so)
    return compute_kpi_score(thuc_hien, ke_hoach, trong_so)

# --- Xu·∫•t DataFrame ra Excel bytes ---
def export_dataframe_to_excel(df: pd.DataFrame) -> bytes:
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name="KPI")
        workbook  = writer.book
        worksheet = writer.sheets["KPI"]
        fmt = workbook.add_format({"text_wrap": True, "valign": "vcenter"})
        worksheet.set_column(0, len(df.columns)-1, 22, fmt)
    buffer.seek(0)
    return buffer.read()

# --- ƒê·ªçc service account t·ª´ secrets (tu·ª≥ ch·ªçn) ---
def read_service_account_from_secrets():
    try:
        conf = st.secrets["google_service_account"]
    except Exception:
        try:
            conf = st.secrets["gdrive_service_account"]
        except Exception as e:
            raise RuntimeError("Kh√¥ng t√¨m th·∫•y google_service_account ho·∫∑c gdrive_service_account trong secrets.") from e

    conf = dict(conf)
    if "private_key" in conf and conf["private_key"]:
        conf["private_key"] = conf["private_key"].replace("\\n", "\n")
        return conf
    if "private_key_b64" in conf and conf["private_key_b64"]:
        import base64
        try:
            decoded = base64.b64decode(conf["private_key_b64"]).decode("utf-8")
            conf["private_key"] = decoded
            return conf
        except Exception as e:
            raise RuntimeError(f"Gi·∫£i m√£ private_key_b64 l·ªói: {e}")
    raise RuntimeError("Secrets thi·∫øu private_key ho·∫∑c private_key_b64.")

# --- Th·ª≠ k·∫øt n·ªëi gspread (kh√¥ng b·∫Øt bu·ªôc) ---
def get_gspread_client_if_possible():
    try:
        from oauth2client.service_account import ServiceAccountCredentials
        import gspread
    except Exception as e:
        return None, f"Thi·∫øu th∆∞ vi·ªán gspread/oauth2client: {e}"

    try:
        sa = read_service_account_from_secrets()
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(sa, scope)
        client = gspread.authorize(creds)
        return client, "ƒê√£ s·∫µn s√†ng k·∫øt n·ªëi Google Sheets."
    except Exception as e:
        return None, str(e)

# --- Session state ---
def init_session_state():
    if "kpi_rows" not in st.session_state:
        st.session_state.kpi_rows = []
    if "connected" not in st.session_state:
        st.session_state.connected = False
    if "connect_msg" not in st.session_state:
        st.session_state.connect_msg = ""
    if "editing_index" not in st.session_state:
        st.session_state.editing_index = None
    for k, v in {
        'ten_kpi':'', 'dvt':'', 'ke_hoach':0.0, 'thuc_hien':0.0, 'trong_so':0.0,
        'bo_phan':'T·ªï Kinh doanh t·ªïng h·ª£p', 'thang':datetime.now().month, 'nam':datetime.now().year
    }.items():
        st.session_state.setdefault(k, v)


# ------------------------
# 3.5) UI ENHANCEMENTS (Logo tr√≤n + style heading)
# ------------------------

def _inject_ui_enhancements():
    import os, base64
    logo_tag = '<div class="floating-logo">‚ö°</div>'
    try:
        if os.path.exists("/mnt/data/logo.png"):
            with open("/mnt/data/logo.png", "rb") as f:
                b64 = base64.b64encode(f.read()).decode()
            logo_tag = f'<img class="floating-logo" src="data:image/png;base64,{b64}" />'
    except Exception:
        pass

    css = """
    <style>
    .title-card {
      padding:14px 18px;border:1px solid #ececec;border-radius:12px;background:#ffffff;
      box-shadow:0 2px 8px rgba(0,0,0,0.04);
    }
    .title-card h1 {
      margin:0;font-size:28px;line-height:1.25;font-weight:800;color:#0B5ED7;
      display:flex;align-items:center;gap:10px;
    }
    .title-card .title-icon {
      font-size:26px;background:#0B5ED7;color:#fff;width:36px;height:36px;
      border-radius:50%;display:inline-flex;align-items:center;justify-content:center;
      box-shadow:0 2px 6px rgba(11,94,215,.35);
    }
    .title-card .subtitle {margin:6px 0 0 0;color:#444}
    .section-title {font-size:24px;font-weight:800;margin:6px 0 12px 0;color:#222}
    /* tƒÉng c·ª° ch·ªØ trong b·∫£ng */
    [data-testid="stDataFrame"] * { font-size: 20px !important; }
[data-testid="stDataEditor"] * { font-size: 20px !important; }
[data-testid="stDataEditorGrid"] * { font-size: 20px !important; }
html, body, [data-testid="stAppViewContainer"] * { font-size: 20px; }
.stTextInput>div>div>input, .stNumberInput input { font-size: 19px !important; }
.stButton>button { font-size: 18px !important; }
.floating-logo {
  position: fixed; right: 16px; top: 86px; width: 76px; height: 76px;
  border-radius: 50%; box-shadow:0 6px 16px rgba(0,0,0,0.15); z-index: 99999;
  background: #ffffffee; backdrop-filter: blur(4px); display: inline-block;
  object-fit: cover; text-align:center; line-height:76px; font-size:38px; animation: pop .6s ease-out;
  pointer-events: none;
}
    @keyframes pop { 0% { transform: scale(.6); opacity:.2 } 100% { transform: scale(1); opacity:1 } }
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)
    st.markdown(logo_tag, unsafe_allow_html=True)

init_session_state()

# ------------------------
# 2) GIAO DI·ªÜN SIDEBAR
# ------------------------
with st.sidebar:
    st.header("üîó K·∫øt n·ªëi")
    spreadsheet_id = st.text_input(
        "Spreadsheet ID",
        help=(
            "D√°n ID c·ªßa Google Sheets. V√≠ d·ª• t·ª´ URL:\n"
            "https://docs.google.com/spreadsheets/d/1AbCdEfGh.../edit#gid=0\n"
            "=> Spreadsheet ID l√† ph·∫ßn gi·ªØa /d/ v√† /edit"
        ),
    )
    nhom_cham = st.selectbox("Nh√≥m ch·∫•m", [1,2,3,4,5], index=1)
    email_nhan_bao_cao = st.text_input("Email nh·∫≠n b√°o c√°o", "phamlong666@gmail.com")

    st.markdown("---")
    st.caption("M·∫Øt N√¢u v·∫´n cho ph√©p **nh·∫≠p KPI th·ªß c√¥ng** k·ªÉ c·∫£ khi ch∆∞a k·∫øt n·ªëi Google.")

# ------------------------
# 3) TH·ª¨ K·∫æT N·ªêI GOOGLE (KH√îNG D·ª™NG APP)
# ------------------------
connected = False
connect_msg = ""
if spreadsheet_id:
    client, msg = get_gspread_client_if_possible()
    if client is None:
        connect_msg = f"Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c Google Sheets: {msg}"
        st.warning(connect_msg)
    else:
        connected = True
        connect_msg = "K·∫øt n·ªëi Google Sheets s·∫µn s√†ng."
        st.success(connect_msg)

st.session_state.connected = connected
st.session_state.connect_msg = connect_msg

# ------------------------
# 4) HEADER
# ------------------------
_inject_ui_enhancements()
st.markdown(
    """
<div class="title-card">
  <h1><span class="title-icon">‚ö°</span><span class="title-text">KPI ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a</span></h1>
  <p class="subtitle">Nh·∫≠p th·ªß c√¥ng ‚Üí Xu·∫•t Excel chu·∫©n (9 c·ªôt) + N·∫°p file m·∫´u 1 th√°ng ƒë·ªÉ nh·∫≠p TH v√† t√≠nh ƒëi·ªÉm</p>
</div>
""",
    unsafe_allow_html=True,
)

st.markdown("## KPI Scorer ‚Äì ƒê·ªãnh H√≥a (Full Suite)")

if connected:
    with st.expander("0) ƒê·ªìng b·ªô d·ªØ li·ªáu Excel ‚áÑ Google Sheets (t√πy ch·ªçn)", expanded=False):
        st.info("Khu v·ª±c n√†y s·∫Ω ƒë·ªìng b·ªô d·ªØ li·ªáu khi anh Long y√™u c·∫ßu. (ƒê√£ s·∫µn s√†ng k·∫øt n·ªëi)")
    with st.expander("1) Nh·∫≠p KPI t·ª´ Google Sheet (chu·∫©n h√≥a sang 9 c·ªôt)", expanded=False):
        st.info("ƒêang chu·∫©n b·ªã, s·∫Ω ƒë·ªçc d·ªØ li·ªáu ngu·ªìn r·ªìi √°nh x·∫° sang 9 c·ªôt chu·∫©n.")
    with st.expander("2) B√°o c√°o theo c√° nh√¢n/b·ªô ph·∫≠n (khi ƒë√£ c√≥ d·ªØ li·ªáu tr√™n Sheets)", expanded=False):
        st.info("ƒêang chu·∫©n b·ªã, s·∫Ω l·ªçc/summarize theo nh√¢n s·ª± ho·∫∑c b·ªô ph·∫≠n.")

# ------------------------
# 5) NH·∫¨P KPI TH·ª¶ C√îNG & XU·∫§T EXCEL (LU√îN HI·ªÇN TH·ªä)
# ------------------------
st.markdown("---")
st.markdown('<h2 class="section-title">3) Nh·∫≠p KPI th·ªß c√¥ng & Xu·∫•t Excel (9 c·ªôt)</h2>', unsafe_allow_html=True)

with st.form("kpi_input_form", clear_on_submit=False):
    c1, c2, c3 = st.columns([1.2, 1.2, 1])
    with c1:
        ten_chi_tieu = st.text_input("1) T√™n ch·ªâ ti√™u (KPI)")
        don_vi_tinh = st.text_input("2) ƒê∆°n v·ªã t√≠nh")
        ke_hoach = st.number_input("3) K·∫ø ho·∫°ch", min_value=0.0, step=0.1, format="%.4f")
    with c2:
        thuc_hien = st.number_input("4) Th·ª±c hi·ªán", min_value=0.0, step=0.1, format="%.4f")
        trong_so = st.number_input("5) Tr·ªçng s·ªë", min_value=0.0, step=0.1, format="%.4f")
    bo_phan_list = [
        "T·ªï K·∫ø ho·∫°ch k·ªπ thu·∫≠t",
        "T·ªï Kinh doanh t·ªïng h·ª£p",
        "T·ªï Qu·∫£n l√Ω t·ªïng h·ª£p 1",
        "T·ªï Qu·∫£n l√Ω t·ªïng h·ª£p 2",
        "T·ªï Tr·ª±c v·∫≠n h√†nh",
        "T·ªï Ki·ªÉm tra gi√°m s√°t mua b√°n ƒëi·ªán",
    ]
    bo_phan = st.selectbox("6) B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", bo_phan_list)
    with c3:
        thang = st.selectbox("7) Th√°ng", list(range(1,13)), index=datetime.now().month-1)
        nam = st.number_input("8) NƒÉm", min_value=2000, max_value=2100, value=datetime.now().year, step=1)
        diem_kpi_preview = compute_kpi_score_dynamic(ten_chi_tieu, thuc_hien, ke_hoach, trong_so)
        st.metric("9) ƒêi·ªÉm KPI (xem tr∆∞·ªõc)", diem_kpi_preview)

    submitted = st.form_submit_button("‚ûï Th√™m v√†o b·∫£ng t·∫°m")
    if submitted:
        row = {
            "T√™n ch·ªâ ti√™u (KPI)": ten_chi_tieu.strip(),
            "ƒê∆°n v·ªã t√≠nh": don_vi_tinh.strip(),
            "K·∫ø ho·∫°ch": _safe_number(ke_hoach, 0.0),
            "Th·ª±c hi·ªán": _safe_number(thuc_hien, 0.0),
            "Tr·ªçng s·ªë": _safe_number(trong_so, 0.0),
            "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch": bo_phan.strip(),
            "Th√°ng": int(thang),
            "NƒÉm": int(nam),
            "ƒêi·ªÉm KPI": compute_kpi_score_dynamic(ten_chi_tieu, thuc_hien, ke_hoach, trong_so),
        }
        st.session_state.kpi_rows.append(row)
        st.success("ƒê√£ th√™m 1 d√≤ng KPI v√†o b·∫£ng t·∫°m.")

# Hi·ªÉn th·ªã b·∫£ng t·∫°m th·ªùi
df_manual = pd.DataFrame(st.session_state.kpi_rows, columns=EXPECTED_KPI_COLS) if st.session_state.kpi_rows else pd.DataFrame(columns=EXPECTED_KPI_COLS)
st.dataframe(df_manual, use_container_width=True, height=300)

# C√°c n√∫t thao t√°c
cA, cB, cC, cD = st.columns([1,1,1,2])
with cA:
    if st.button("üóëÔ∏è X√≥a d√≤ng cu·ªëi"):
        if st.session_state.kpi_rows:
            st.session_state.kpi_rows.pop()
            st.warning("ƒê√£ x√≥a d√≤ng cu·ªëi.")
        else:
            st.info("Kh√¥ng c√≤n d√≤ng ƒë·ªÉ x√≥a.")
with cB:
    if st.button("üßπ X√≥a t·∫•t c·∫£"):
        st.session_state.kpi_rows = []
        st.warning("ƒê√£ x√≥a to√†n b·ªô b·∫£ng t·∫°m.")
with cC:
    if st.button("üíæ Xu·∫•t Excel (t·∫£i xu·ªëng)"):
        if len(st.session_state.kpi_rows) == 0:
            st.error("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")
        else:
            out_df = pd.DataFrame(st.session_state.kpi_rows, columns=EXPECTED_KPI_COLS)
            bin_data = export_dataframe_to_excel(out_df)
            file_name = f"KPI_Scorer_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            st.download_button(
                label="‚¨áÔ∏è T·∫£i file Excel",
                data=bin_data,
                file_name=file_name,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
with cD:
    st.info(
        "üìå G·ª£i √Ω: ƒêi·ªÉm KPI = (Th·ª±c hi·ªán / K·∫ø ho·∫°ch) √ó Tr·ªçng s·ªë.\n\n"
        "N·∫øu ch∆∞a k·∫øt n·ªëi Google, anh c·ª© nh·∫≠p v√† t·∫£i Excel. Khi k·∫øt n·ªëi xong, em s·∫Ω b·ªï sung n√∫t **ƒê·∫©y l√™n Google Sheet** theo ƒë√∫ng format 9 c·ªôt."
    )

# ------------------------
# 6) N·∫†P FILE CHU·∫®N 1 TH√ÅNG ‚Üí NH·∫¨P TH & AUTO-SCORE (H·ªñ TR·ª¢ EXCEL & CSV)
# ------------------------
st.markdown("---")
st.markdown('<h2 class="section-title">4) N·∫°p file chu·∫©n 1 th√°ng ‚Üí Nh·∫≠p \"Th·ª±c hi·ªán (th√°ng)\" ‚Üí T·ª± t√≠nh ƒëi·ªÉm cho 2 ch·ªâ ti√™u D·ª± b√°o</h2>', unsafe_allow_html=True)

TOTAL_FORECAST_REGEX = re.compile(r"d·ª±\s*b√°o.*t·ªïng\s*th∆∞∆°ng\s*ph·∫©m(?!.*tri·ªáu)", re.IGNORECASE)
SEGMENT_FORECAST_REGEX = re.compile(r"d·ª±\s*b√°o.*t·ªïng\s*th∆∞∆°ng\s*ph·∫©m.*(1\s*tri·ªáu|>\s*1\s*tri·ªáu|tr√™n\s*1\s*tri·ªáu)", re.IGNORECASE)

@st.cache_data(show_spinner=False)
def load_template_from_bytes(b: bytes) -> pd.DataFrame:
    """ƒê·ªçc Excel .xlsx (c·∫ßn openpyxl) v√† tr·∫£ v·ªÅ DataFrame ƒë√£ chu·∫©n c·ªôt."""
    xls = pd.ExcelFile(BytesIO(b))
    if "KPI_Input" not in xls.sheet_names:
        raise ValueError("Kh√¥ng t√¨m th·∫•y sheet 'KPI_Input' trong file.")
    df = pd.read_excel(xls, sheet_name="KPI_Input")
    required = [
        "STT", "Nh√≥m/Parent", "T√™n ch·ªâ ti√™u (KPI)", "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£",
        "ƒê∆°n v·ªã t√≠nh", "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", "K·∫ø ho·∫°ch (th√°ng)",
        "Th·ª±c hi·ªán (th√°ng)", "Tr·ªçng s·ªë", "ƒêi·ªÉm KPI", "Th√°ng", "NƒÉm"
    ]
    missing = [c for c in required if c not in df.columns]
    if missing:
        raise ValueError(f"Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {missing}")
    return df[required].copy()

# Quy t·∫Øc t√≠nh ƒëi·ªÉm cho file 1 th√°ng (t√≠nh sai s·ªë t·ª´ KH & TH)
def _forecast_point_from_plan_actual(plan, actual, max_point: float = 3.0, threshold=1.5):
    try:
        plan = float(plan); actual = float(actual)
    except Exception:
        return None
    if plan == 0:
        return 0.0
    error_pct = (actual - plan) / plan * 100.0
    abs_err = abs(error_pct)
    if abs_err <= threshold:
        return max_point
    steps = (abs_err - threshold) / 0.1
    deduction = steps * 0.04
    return max(0.0, round(max_point - deduction, 4))


def autoscore_row_onemonth(row: pd.Series) -> float:
    import unicodedata
    # Chu·∫©n ho√° chu·ªói: b·ªè d·∫•u/gh√©p d·∫•u ƒë·ªÉ nh·∫≠n di·ªán ch·∫Øc ch·∫Øn "D·ª± b√°o t·ªïng th∆∞∆°ng ph·∫©m"
    def _norm(s: str) -> str:
        if not isinstance(s, str):
            s = str(s or "")
        s = unicodedata.normalize("NFKD", s)
        s = "".join(ch for ch in s if not unicodedata.combining(ch)).lower()
        s = " ".join(s.split())
        return s

    name = row.get("T√™n ch·ªâ ti√™u (KPI)", "")
    method = row.get("Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£", "")
    plan = row.get("K·∫ø ho·∫°ch (th√°ng)")
    actual = row.get("Th·ª±c hi·ªán (th√°ng)")

    # Ch·ªâ t√≠nh khi c√≥ KH & TH d·∫°ng s·ªë
    try:
        plan = float(plan); actual = float(actual)
    except Exception:
        return row.get("ƒêi·ªÉm KPI", None)

    txt = _norm(f"{name} {method}")
    # B·∫Øt 2 KPI d·ª± b√°o (m·ªçi bi·∫øn th·ªÉ, kh√¥ng d·∫•u)
    if "du bao tong thuong pham" in txt:
        return _forecast_point_from_plan_actual(plan, actual)

    # M·∫∑c ƒë·ªãnh: gi·ªØ nguy√™n (nh·∫≠p tay/ho·∫∑c s·∫Ω b·ªï sung rule)
    return row.get("ƒêi·ªÉm KPI", None)

def autoscore_dataframe_onemonth(df: pd.DataFrame) -> pd.DataFrame:
    if df.empty:
        return df
    out = df.copy()
    out["ƒêi·ªÉm KPI"] = out.apply(autoscore_row_onemonth, axis=1)
    return out

# Ch·ªçn ngu·ªìn file (c√≥ h·ªó tr·ª£ CSV khi thi·∫øu openpyxl)
default_excel_path = "/mnt/data/KPI_OneMonth_Template.xlsx"
default_csv_hint = "N·∫øu m√¥i tr∆∞·ªùng thi·∫øu openpyxl, d√πng CSV: KPI_Input_template.csv"
mode = st.radio(
    "Ngu·ªìn file 1 th√°ng",
    ["D√πng ƒë∆∞·ªùng d·∫´n h·ªá th·ªëng (Excel .xlsx)", "T·∫£i Excel (.xlsx)", "T·∫£i CSV (.csv)"],
    horizontal=True
)

file_bytes = None
df1 = pd.DataFrame()
if mode == "D√πng ƒë∆∞·ªùng d·∫´n h·ªá th·ªëng (Excel .xlsx)":
    path = st.text_input("Path Excel", value=default_excel_path)
    if st.button("üìÇ ƒê·ªçc Excel t·ª´ path"):
        try:
            with open(path, "rb") as f:
                file_bytes = f.read()
            df1 = load_template_from_bytes(file_bytes)
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc Excel (.xlsx): {e}")
            st.info(default_csv_hint)
elif mode == "T·∫£i Excel (.xlsx)":
    up = st.file_uploader("T·∫£i file Excel KPI_OneMonth_Template.xlsx", type=["xlsx"])
    if up is not None:
        try:
            file_bytes = up.read()
            df1 = load_template_from_bytes(file_bytes)
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc Excel (.xlsx): {e}")
            st.info(default_csv_hint)
else:  # CSV mode
    upc = st.file_uploader("T·∫£i file CSV (KPI_Input_template.csv)", type=["csv"])
    if upc is not None:
        try:
            df1 = pd.read_csv(upc)
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc CSV: {e}")

# Guard: n·∫øu ch∆∞a ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu h·ª£p l·ªá th√¨ d·ª´ng ·ªü ƒë√¢y
if df1 is None or df1.empty:
    st.info("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu h·ª£p l·ªá. Vui l√≤ng ch·ªçn 1 trong 3 c√°ch: nh·∫≠p path Excel, t·∫£i Excel, ho·∫∑c t·∫£i CSV.")
else:
    # Ki·ªÉm tra c·ªôt b·∫Øt bu·ªôc
    required = [
        "STT", "Nh√≥m/Parent", "T√™n ch·ªâ ti√™u (KPI)", "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£",
        "ƒê∆°n v·ªã t√≠nh", "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", "K·∫ø ho·∫°ch (th√°ng)",
        "Th·ª±c hi·ªán (th√°ng)", "Tr·ªçng s·ªë", "ƒêi·ªÉm KPI", "Th√°ng", "NƒÉm"
    ]
    missing = [c for c in required if c not in df1.columns]
    if missing:
        st.error(f"Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {missing}")
        st.write("C√°c c·ªôt hi·ªán c√≥:", list(df1.columns))
        st.stop()

    # Chu·∫©n ho√° ki·ªÉu d·ªØ li·ªáu quan tr·ªçng (fix CSV kh√¥ng auto-calc)
    for _col in ["K·∫ø ho·∫°ch (th√°ng)", "Th·ª±c hi·ªán (th√°ng)", "Tr·ªçng s·ªë", "ƒêi·ªÉm KPI", "Th√°ng", "NƒÉm"]:
        if _col in df1.columns:
            df1[_col] = pd.to_numeric(df1[_col], errors="coerce")

    # ==== B·∫¢NG NH·∫¨P & T√çNH ƒêI·ªÇM (M·ªòT B·∫¢NG DUY NH·∫§T) ====
    colM, colY = st.columns(2)
    with colM:
        month_default = int(df1["Th√°ng"].iloc[0]) if "Th√°ng" in df1.columns and len(df1)>0 else 7
        chosen_month = st.number_input("Th√°ng", min_value=1, max_value=12, value=month_default, step=1)
    with colY:
        year_default = int(df1["NƒÉm"].iloc[0]) if "NƒÉm" in df1.columns and len(df1)>0 else datetime.now().year
        chosen_year = st.number_input("NƒÉm", min_value=2000, max_value=2100, value=year_default, step=1)

    base = df1[(df1["Th√°ng"].astype(int) == int(chosen_month)) & (df1["NƒÉm"].astype(int) == int(chosen_year))].copy()

    with st.expander("üîé T√¨m nhanh theo 'Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£' / T√™n KPI / B·ªô ph·∫≠n"):
        q = st.text_input("T·ª´ kh√≥a", value="")
        col1, col2 = st.columns(2)
        with col1:
            departments = [x for x in sorted(base["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"].dropna().astype(str).unique().tolist()) if x]
            dept = st.multiselect("B·ªô ph·∫≠n", departments, default=[])
        with col2:
            units = [x for x in sorted(base["ƒê∆°n v·ªã t√≠nh"].dropna().astype(str).unique().tolist()) if x]
            unit = st.multiselect("ƒê∆°n v·ªã t√≠nh", units, default=[])

        mask = pd.Series([True] * len(base))
        if q:
            qlow = q.lower()
            mask &= base.apply(lambda r: qlow in str(r["Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£"]).lower()
                                       or qlow in str(r["T√™n ch·ªâ ti√™u (KPI)"]).lower()
                                       or qlow in str(r["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"]).lower(), axis=1)
        if dept:
            mask &= base["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"].astype(str).isin(dept)
        if unit:
            mask &= base["ƒê∆°n v·ªã t√≠nh"].astype(str).isin(unit)
        base = base[mask].copy()

    st.markdown("**Nh·∫≠p c·ªôt 'Th·ª±c hi·ªán (th√°ng)' ƒë·ªÉ t√≠nh ƒëi·ªÉm ‚Äì hi·ªÉn th·ªã ƒëi·ªÉm KPI ngay trong b·∫£ng:**")

# ==== State merge: GI·ªÆ GI√Å TR·ªä NH·∫¨P TAY GI·ªÆA C√ÅC L·∫¶N CH·∫†Y ====
# T·∫°o kh√≥a d√≤ng ·ªïn ƒë·ªãnh ƒë·ªÉ gh√©p gi√° tr·ªã ƒë√£ nh·∫≠p
base = base.reset_index(drop=True)
base["__row_key"] = (
    base["STT"].astype(str).fillna("") + "|" +
    base["T√™n ch·ªâ ti√™u (KPI)"].astype(str).fillna("") + "|" +
    base["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"].astype(str).fillna("")
)

y_key = f"work_{chosen_year}_{chosen_month}"
prev = st.session_state.get(y_key)
if prev is not None and not pd.DataFrame(prev).empty:
    prev_df = pd.DataFrame(prev)
    if "__row_key" not in prev_df.columns:
        prev_df["__row_key"] = (
            prev_df["STT"].astype(str).fillna("") + "|" +
            prev_df["T√™n ch·ªâ ti√™u (KPI)"].astype(str).fillna("") + "|" +
            prev_df["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"].astype(str).fillna("")
        )
    keep_cols = ["__row_key", "Th·ª±c hi·ªán (th√°ng)", "Tr·ªçng s·ªë"]
    merged = base.merge(prev_df[keep_cols], on="__row_key", how="left", suffixes=("", "_old"))
    for c in ["Th·ª±c hi·ªán (th√°ng)", "Tr·ªçng s·ªë"]:
        # n·∫øu ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p tr∆∞·ªõc ƒë√≥ th√¨ gi·ªØ l·∫°i
        merged[c] = merged[c].where(merged[c].notna(), merged[f"{c}_old"]) 
        if f"{c}_old" in merged.columns:
            merged.drop(columns=[f"{c}_old"], inplace=True)
    working = merged
else:
    working = base.copy()

# L∆∞u state t·∫°m th·ªùi r·ªìi t√≠nh ƒëi·ªÉm ƒë·ªÉ render
st.session_state[y_key] = working.copy()
_work_scored = autoscore_dataframe_onemonth(st.session_state[y_key])

edited = st.data_editor(
    _work_scored,
    key=f"editor_{chosen_year}_{chosen_month}",
    use_container_width=True,
    hide_index=True,
    column_config={
        "Th·ª±c hi·ªán (th√°ng)": st.column_config.NumberColumn(format="%f"),
        "Tr·ªçng s·ªë": st.column_config.NumberColumn(format="%f"),
        "ƒêi·ªÉm KPI": st.column_config.NumberColumn(format="%f", disabled=True),
    },
    num_rows="fixed",
)

# T√çNH L·∫†I ngay theo gi√° tr·ªã v·ª´a nh·∫≠p v√† l∆∞u state (ƒë·ªÉ b·∫£ng hi·ªÉn th·ªã ƒë√∫ng ngay l·∫ßn k·∫ø ti·∫øp)
edited_scored = autoscore_dataframe_onemonth(edited.copy())
# L∆∞u nh∆∞ng b·ªè c·ªôt t√≠nh to√°n (s·∫Ω lu√¥n t√≠nh l·∫°i khi render)
to_save = edited_scored.drop(columns=["ƒêi·ªÉm KPI"]) if "ƒêi·ªÉm KPI" in edited_scored.columns else edited_scored
_prev = st.session_state.get(y_key)
if _prev is None or not pd.DataFrame(_prev).equals(to_save):
    st.session_state[y_key] = to_save
    try:
        st.rerun()
    except Exception:
        st.experimental_rerun()

# Xu·∫•t ngay b·∫£ng ƒë√£ t√≠nh ƒëi·ªÉm
scored_export = autoscore_dataframe_onemonth(st.session_state[y_key])
colL, colR = st.columns([1,1])
with colL:
    if st.button("üíæ Xu·∫•t Excel (.xlsx) ‚Äì b·∫£ng 1 th√°ng"):
        output = BytesIO()
        with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
            scored_export.to_excel(writer, index=False, sheet_name="KPI_Input")
            wb = writer.book
            ws = writer.sheets["KPI_Input"]
            fmt_header = wb.add_format({"bold": True, "bg_color": "#E2F0D9", "border": 1})
            fmt_cell = wb.add_format({"border": 1})
            ws.set_row(0, 22, fmt_header)
            for i, _ in enumerate(scored_export.columns):
                ws.set_column(i, i, 22, fmt_cell)
        st.download_button(
            label="T·∫£i v·ªÅ KPI_Input",
            data=output.getvalue(),
            file_name=f"KPI_Input_{int(chosen_year)}_{int(chosen_month):02d}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
with colR:
    st.caption("B·∫£ng tr√™n ƒë√£ hi·ªÉn th·ªã ƒëi·ªÉm KPI tr·ª±c ti·∫øp ‚Äì g·ªçn giao di·ªán.")

# ------------------------
# Footer
# ------------------------
st.caption("¬© BrownEyes ‚Äì KPI Scorer (Full Suite: nh·∫≠p tay + file 1 th√°ng + auto-score 2 KPI D·ª± b√°o).")
