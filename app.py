
import streamlit as st
import pandas as pd
import numpy as np
import io
import smtplib
from email.message import EmailMessage
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import base64

import gspread
from google.oauth2.service_account import Credentials
from gspread_dataframe import set_with_dataframe, get_as_dataframe

st.set_page_config(page_title="KPI Scorer v4.0 ‚Äì ƒê·ªãnh H√≥a (Full Suite, Secure)", layout="wide")

# =====================
# Worksheet names
# =====================
WS_SOURCE = "ƒê·ªãnh H√≥a"      # danh m·ª•c g·ªëc (excel)
WS_KPI    = "KPI_DATA"      # d·ªØ li·ªáu KPI ch·∫•m theo th√°ng/b·ªô ph·∫≠n
WS_DEPTS  = "DEPARTMENTS"   # danh m·ª•c b·ªô ph·∫≠n
WS_TASKS  = "TASKS"         # danh m·ª•c c√¥ng vi·ªác (M√£ CV, t√™n...)
WS_EMPS   = "EMPLOYEES"     # CBCNV
WS_ASG    = "ASSIGNMENTS"   # ph√¢n c√¥ng c√¥ng vi·ªác cho c√° nh√¢n

# =====================
# Schemas
# =====================
EXPECTED_KPI_COLS = [
    "B·ªô ph·∫≠n","Vai tr√≤","Tr·ªçng s·ªë (%)",
    "Ph∆∞∆°ng ph√°p ƒëo","ƒê∆°n v·ªã t√≠nh","Ch·ªâ ti√™u (tham chi·∫øu)",
    "Th√°ng","NƒÉm","K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Ng∆∞·ª°ng/K·∫ø ho·∫°ch (%)",
    "Sai s·ªë (%)","B·∫≠c v∆∞·ª£t (0.1%)","B·∫≠c gi·∫£m (0.1%)","ƒêi·ªÉm c·ªông","ƒêi·ªÉm tr·ª´","K·∫øt qu·∫£ (r√≤ng)",
    "ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp","L√Ω do th∆∞·ªüng","ƒêi·ªÉm t·ªïng",
    "C·∫≠p nh·∫≠t l√∫c","M√£ CV"
]
EXPECTED_DEPT_COLS = ["B·ªô ph·∫≠n"]
EXPECTED_TASK_COLS = ["M√£ CV","T√™n c√¥ng vi·ªác/Nhi·ªám v·ª•","B·ªô ph·∫≠n","M√¥ t·∫£"]
EXPECTED_EMP_COLS  = ["M√£ NV","H·ªç v√† t√™n","Ch·ª©c danh","B·ªô ph·∫≠n","B·∫≠c th·ª£","H·ªá s·ªë l∆∞∆°ng","H·ªá s·ªë ph·ª• c·∫•p","Tr·∫°ng th√°i"]
EXPECTED_ASG_COLS  = ["M√£ CV","Ch·ªâ ti√™u (tham chi·∫øu)","B·ªô ph·∫≠n","Th√°ng","NƒÉm","M√£ NV","Vai tr√≤ (C√° nh√¢n)","Tr·ªçng s·ªë c√° nh√¢n (%)","ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp (CN)","L√Ω do th∆∞·ªüng (CN)","C·∫≠p nh·∫≠t l√∫c"]

DEFAULT_DEPTS = [
    "T·ªï K·∫ø ho·∫°ch k·ªπ thu·∫≠t",
    "T·ªï Kinh doanh t·ªïng h·ª£p",
    "T·ªï Qu·∫£n l√Ω t·ªïng h·ª£p 1",
    "T·ªï Qu·∫£n l√Ω t·ªïng h·ª£p 2",
    "T·ªï Tr·ª±c v·∫≠n h√†nh",
    "T·ªï Ki·ªÉm tra gi√°m s√°t mua b√°n ƒëi·ªán",
]

# =====================
# Helpers
# =====================
def get_client():
    # Read secrets
    try:
        svc = dict(st.secrets["google_service_account"])
    except Exception:
        st.error("‚ùå Ch∆∞a c·∫•u h√¨nh secrets. T·∫°o .streamlit/secrets.toml v√† d√°n Service Account.")
        st.stop()

    # Support private_key_b64 (preferred) or private_key (fallback)
    if "private_key_b64" in svc and svc["private_key_b64"]:
        try:
            decoded = base64.b64decode(svc["private_key_b64"]).decode("utf-8")
            svc["private_key"] = decoded
        except Exception as e:
            st.error(f"‚ùå Gi·∫£i m√£ private_key_b64 l·ªói: {e}")
            st.stop()
    elif "private_key" in svc and svc["private_key"]:
        svc["private_key"] = svc["private_key"].replace("\\n", "\n")
    else:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y private_key_b64 hay private_key trong secrets.")
        st.stop()

    scopes = ["https://www.googleapis.com/auth/spreadsheets","https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(svc, scopes=scopes)
    return gspread.authorize(creds)

def get_or_create_ws(gc, spreadsheet_id, title, headers=None):
    sh = gc.open_by_key(spreadsheet_id)
    try:
        ws = sh.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = sh.add_worksheet(title=title, rows=3000, cols=80)
        if headers:
            ws.update("A1", [headers])
    return ws

def load_ws_df(ws, expected_cols=None):
    df = get_as_dataframe(ws, evaluate_formulas=True, header=0)
    if df is None:
        df = pd.DataFrame(columns=expected_cols or [])
    else:
        df = df.dropna(how="all")
        if expected_cols:
            for c in expected_cols:
                if c not in df.columns:
                    df[c] = None
            df = df[expected_cols]
    return df

def save_ws_df(ws, df):
    set_with_dataframe(ws, df, include_index=False, include_column_header=True, resize=True)

def safe_float(x):
    if x is None or (isinstance(x, float) and np.isnan(x)):
        return None
    try:
        if isinstance(x, str):
            x = x.replace(".", "").replace(",", ".")
        return float(x)
    except:
        return None

def compute_points(row, group):
    # Group weights (ƒê·ªãnh H√≥a = Nh√≥m 2)
    if group == 2:
        penalty_per_0_1 = 0.04
        bonus_per_0_1 = 0.30
    elif group == 1:
        penalty_per_0_1 = 0.02
        bonus_per_0_1 = 0.50
    else:
        penalty_per_0_1 = 0.05
        bonus_per_0_1 = 0.20
    max_penalty = 3.0
    max_bonus = 2.0

    unit = str(row.get("ƒê∆°n v·ªã t√≠nh") or "").strip()
    nguong = safe_float(row.get("Ng∆∞·ª°ng/K·∫ø ho·∫°ch (%)")) or 1.5
    ke_hoach = safe_float(row.get("K·∫ø ho·∫°ch"))
    thuc_hien = safe_float(row.get("Th·ª±c hi·ªán"))

    sai_so_pct = None
    if unit == "%":
        sai_so_pct = thuc_hien
    else:
        if ke_hoach not in (None, 0) and thuc_hien is not None:
            sai_so_pct = abs(thuc_hien - ke_hoach) / abs(ke_hoach) * 100.0

    bac = improve_bac = None
    diem_tru = diem_cong = 0.0
    if sai_so_pct is not None:
        over = max(0.0, sai_so_pct - nguong)
        improve = max(0.0, nguong - sai_so_pct)
        bac = int(np.floor(over / 0.1 + 1e-9))
        improve_bac = int(np.floor(improve / 0.1 + 1e-9))
        diem_tru = min(max_penalty, penalty_per_0_1 * bac)
        diem_cong = min(max_bonus, bonus_per_0_1 * improve_bac)

    bonus = safe_float(row.get("ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp")) or 0.0
    ket_qua = (diem_cong or 0) - (diem_tru or 0)
    diem_tong = ket_qua + bonus

    return pd.Series({
        "Sai s·ªë (%)": None if sai_so_pct is None else round(sai_so_pct, 3),
        "B·∫≠c v∆∞·ª£t (0.1%)": bac,
        "B·∫≠c gi·∫£m (0.1%)": improve_bac,
        "ƒêi·ªÉm c·ªông": None if diem_cong is None else round(diem_cong, 2),
        "ƒêi·ªÉm tr·ª´": None if diem_tru is None else round(diem_tru, 2),
        "K·∫øt qu·∫£ (r√≤ng)": round(ket_qua, 2),
        "ƒêi·ªÉm t·ªïng": round(diem_tong, 2)
    })

def flatten_dinh_hoa(df_raw):
    H0 = df_raw.iloc[0].astype(str).replace("nan","")
    H1 = df_raw.iloc[1].astype(str).replace("nan","")
    H2 = df_raw.iloc[2].astype(str).replace("nan","")
    ncol = df_raw.shape[1]
    final_cols = []
    for c in range(ncol):
        name = (H2.iloc[c] or H1.iloc[c] or H0.iloc[c])
        final_cols.append(str(name).strip() if name else f"Unnamed:{c}")
    body = df_raw.iloc[3:].copy()
    body.columns = final_cols
    body = body.dropna(axis=1, how='all')
    time_like = []
    for c in body.columns:
        cl = str(c).strip().lower()
        if cl in ["nƒÉm","qu√Ω i","qu√Ω ii","qu√Ω iii","qu√Ω iv"] or cl.startswith("th√°ng "):
            time_like.append(c)
    static_cols = [c for c in ["Ch·ªâ ti√™u","K√ç HI·ªÜU","K√Ω hi·ªáu","ƒê∆°n v·ªã t√≠nh","ƒêVT","Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£","ƒê∆°n v·ªã ch·ªß tr√¨"] if c in body.columns]
    values = body[time_like] if time_like else pd.DataFrame(index=body.index)
    flat = values.melt(ignore_index=False, var_name="K·ª≥", value_name="Gi√° tr·ªã").join(body[static_cols], how="left").reset_index(drop=True)
    flat = flat[flat["K·ª≥"].notna()]
    return flat

def send_email_smtp(to_email, subject, body, attachments=None):
    try:
        mail = st.secrets["smtp"]
        host = mail["host"]
        port = int(mail.get("port", 587))
        user = mail["user"]
        password = mail["password"]
        sender = mail.get("sender", user)
    except Exception:
        st.error("‚ùå Thi·∫øu c·∫•u h√¨nh SMTP trong secrets. ƒêi·ªÅn [smtp] host, port, user, password.")
        return False, "Missing SMTP secrets"

    msg = EmailMessage()
    msg["From"] = sender
    msg["To"] = to_email
    msg["Subject"] = subject
    msg.set_content(body)
    if attachments:
        for fname, bytes_data, mime in attachments:
            maintype, subtype = mime.split("/", 1)
            msg.add_attachment(bytes_data, maintype=maintype, subtype=subtype, filename=fname)
    try:
        with smtplib.SMTP(host, port) as server:
            server.starttls()
            server.login(user, password)
            server.send_message(msg)
        return True, "OK"
    except Exception as e:
        return False, str(e)

# =====================
# Connect
# =====================
st.title("üßÆ KPI Scorer v4.0 ‚Äì ƒê·ªãnh H√≥a (Full Suite, Secure)")

with st.sidebar:
    st.subheader("üîê K·∫øt n·ªëi")
    spreadsheet_id = st.text_input("Spreadsheet ID", value="", placeholder="1A2B3C...")
    group = st.selectbox("Nh√≥m ch·∫•m", options=[1,2,3], index=1, help="ƒê·ªãnh H√≥a thu·ªôc Nh√≥m 2.")
    default_to_email = st.text_input("Email nh·∫≠n b√°o c√°o", value="phamlong666@gmail.com")

if not spreadsheet_id:
    st.info("Nh·∫≠p Spreadsheet ID ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()

try:
    gc = get_client()
    ws_kpi  = get_or_create_ws(gc, spreadsheet_id, WS_KPI, headers=EXPECTED_KPI_COLS)
    ws_src  = get_or_create_ws(gc, spreadsheet_id, WS_SOURCE)
    ws_dept = get_or_create_ws(gc, spreadsheet_id, WS_DEPTS, headers=EXPECTED_DEPT_COLS)
    ws_task = get_or_create_ws(gc, spreadsheet_id, WS_TASKS, headers=EXPECTED_TASK_COLS)
    ws_emp  = get_or_create_ws(gc, spreadsheet_id, WS_EMPS, headers=EXPECTED_EMP_COLS)
    ws_asg  = get_or_create_ws(gc, spreadsheet_id, WS_ASG, headers=EXPECTED_ASG_COLS)
except Exception as e:
    st.error(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
    st.stop()

# Bootstrap departments
dept_df = load_ws_df(ws_dept, expected_cols=EXPECTED_DEPT_COLS)
if dept_df.empty:
    dept_df = pd.DataFrame({"B·ªô ph·∫≠n": DEFAULT_DEPTS})
    save_ws_df(ws_dept, dept_df)
dept_list = dept_df["B·ªô ph·∫≠n"].dropna().astype(str).tolist()

# ====== Excel sync
st.header("0) ƒê·ªìng b·ªô t·ª´ Excel 'ƒê·ªãnh H√≥a'")
up = st.file_uploader("Ch·ªçn file Excel g·ªëc (sheet 'ƒê·ªãnh H√≥a')", type=["xlsx"], key="sync")
colA, colB, colC, colD = st.columns([1,1,1,2])
with colA:
    sync_dept = st.selectbox("G√°n B·ªô ph·∫≠n", options=dept_list)
with colB:
    sync_role = st.selectbox("Vai tr√≤", options=["Ch√≠nh","Ph·ª•"], index=0)
with colC:
    sync_weight = st.number_input("Tr·ªçng s·ªë (%)", min_value=0.0, max_value=100.0, value=100.0, step=5.0)
with colD:
    st.caption("App s·∫Ω g√°n c√°c thu·ªôc t√≠nh n√†y cho d·ªØ li·ªáu import (s·ª≠a l·∫°i sau n·∫øu c·∫ßn).")
colE, colF = st.columns(2)
with colE:
    sync_month = st.number_input("Th√°ng", min_value=1, max_value=12, value=1, step=1)
with colF:
    sync_year = st.number_input("NƒÉm", min_value=2000, max_value=2100, value=datetime.now().year, step=1)
overwrite = st.checkbox("Ghi ƒë√® KPI_DATA c·ªßa B·ªô ph·∫≠n/Th√°ng/NƒÉm n√†y", value=False)

if up and st.button("üîÅ ƒê·ªìng b·ªô t·ª´ Excel ‚Üí KPI_DATA"):
    try:
        xls = pd.ExcelFile(up)
        sheet = "ƒê·ªãnh H√≥a" if "ƒê·ªãnh H√≥a" in xls.sheet_names else xls.sheet_names[0]
        raw = pd.read_excel(xls, sheet_name=sheet, header=None)
        flat = flatten_dinh_hoa(raw)

        chi_tieu_col = "Ch·ªâ ti√™u" if "Ch·ªâ ti√™u" in flat.columns else None
        dvt_col = "ƒê∆°n v·ªã t√≠nh" if "ƒê∆°n v·ªã t√≠nh" in flat.columns else ("ƒêVT" if "ƒêVT" in flat.columns else None)
        phuong_phap_col = "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£" if "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£" in flat.columns else None

        imp = pd.DataFrame({
            "B·ªô ph·∫≠n": sync_dept,
            "Vai tr√≤": sync_role,
            "Tr·ªçng s·ªë (%)": sync_weight,
            "Ph∆∞∆°ng ph√°p ƒëo": flat[phuong_phap_col] if phuong_phap_col else "",
            "ƒê∆°n v·ªã t√≠nh": flat[dvt_col] if dvt_col else "",
            "Ch·ªâ ti√™u (tham chi·∫øu)": flat[chi_tieu_col] if chi_tieu_col else "",
            "Th√°ng": int(sync_month),
            "NƒÉm": int(sync_year),
            "K·∫ø ho·∫°ch": None,
            "Th·ª±c hi·ªán": flat["Gi√° tr·ªã"],
            "Ng∆∞·ª°ng/K·∫ø ho·∫°ch (%)": 1.5,
            "Sai s·ªë (%)": None,
            "B·∫≠c v∆∞·ª£t (0.1%)": None,
            "B·∫≠c gi·∫£m (0.1%)": None,
            "ƒêi·ªÉm c·ªông": None,
            "ƒêi·ªÉm tr·ª´": None,
            "K·∫øt qu·∫£ (r√≤ng)": None,
            "ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp": 0,
            "L√Ω do th∆∞·ªüng": "",
            "ƒêi·ªÉm t·ªïng": None,
            "C·∫≠p nh·∫≠t l√∫c": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "M√£ CV": None
        })
        imp = imp[EXPECTED_KPI_COLS]

        data_df = load_ws_df(ws_kpi, expected_cols=EXPECTED_KPI_COLS)
        if overwrite:
            data_df = data_df[~((data_df["B·ªô ph·∫≠n"]==sync_dept) & (data_df["Th√°ng"]==sync_month) & (data_df["NƒÉm"]==sync_year))]
        data_df2 = pd.concat([data_df, imp], ignore_index=True)
        save_ws_df(ws_kpi, data_df2[EXPECTED_KPI_COLS])
        st.success(f"‚úÖ ƒê√£ ƒë·ªìng b·ªô {len(imp)} d√≤ng v√†o KPI_DATA.")
    except Exception as e:
        st.error(f"‚ùå L·ªói ƒë·ªìng b·ªô: {e}")

st.divider()

# ====== KPI entry & scoring per department
st.header("1) Nh·∫≠p KPI theo Th√°ng/NƒÉm & B·ªô ph·∫≠n (t√≠nh ƒëi·ªÉm Nh√≥m 2 + th∆∞·ªüng)")
col_m, col_y, col_d = st.columns([1,1,2])
with col_m:
    month = st.selectbox("Th√°ng", options=list(range(1,13)), index=0)
with col_y:
    year = st.selectbox("NƒÉm", options=list(range(datetime.now().year-2, datetime.now().year+3)), index=2)
with col_d:
    dept = st.selectbox("B·ªô ph·∫≠n", options=dept_list, index=0)

kpi_df = load_ws_df(ws_kpi, expected_cols=EXPECTED_KPI_COLS)
mask = (kpi_df["Th√°ng"]==month) & (kpi_df["NƒÉm"]==year) & (kpi_df["B·ªô ph·∫≠n"]==dept)
cur = kpi_df[mask].copy()

if cur.empty:
    cur = pd.DataFrame([{
        "B·ªô ph·∫≠n": dept, "Vai tr√≤": "Ch√≠nh", "Tr·ªçng s·ªë (%)": 100.0,
        "Ph∆∞∆°ng ph√°p ƒëo": "", "ƒê∆°n v·ªã t√≠nh": "%", "Ch·ªâ ti√™u (tham chi·∫øu)": "",
        "Th√°ng": month, "NƒÉm": year, "K·∫ø ho·∫°ch": None, "Th·ª±c hi·ªán": None, "Ng∆∞·ª°ng/K·∫ø ho·∫°ch (%)": 1.5,
        "Sai s·ªë (%)": None, "B·∫≠c v∆∞·ª£t (0.1%)": None, "B·∫≠c gi·∫£m (0.1%)": None,
        "ƒêi·ªÉm c·ªông": None, "ƒêi·ªÉm tr·ª´": None, "K·∫øt qu·∫£ (r√≤ng)": None,
        "ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp": 0.0, "L√Ω do th∆∞·ªüng": "", "ƒêi·ªÉm t·ªïng": None,
        "C·∫≠p nh·∫≠t l√∫c": None, "M√£ CV": None
    }], columns=EXPECTED_KPI_COLS)

editor = st.data_editor(
    cur, key="kpi_editor", num_rows="dynamic", use_container_width=True,
    column_config={
        "Vai tr√≤": st.column_config.SelectboxColumn("Vai tr√≤", options=["Ch√≠nh","Ph·ª•"]),
        "Tr·ªçng s·ªë (%)": st.column_config.NumberColumn(min_value=0, max_value=100, step=1),
        "ƒê∆°n v·ªã t√≠nh": st.column_config.SelectboxColumn("ƒê∆°n v·ªã t√≠nh", options=["%","kWh","MWh","GWh","kh√°c"]),
        "ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp": st.column_config.NumberColumn(min_value=-5.0, max_value=5.0, step=0.1),
    }
)

if st.button("üßÆ T√≠nh & L∆∞u KPI b·ªô ph·∫≠n"):
    df_calc = editor.copy()
    df_calc["Th√°ng"] = month
    df_calc["NƒÉm"] = year
    calc = df_calc.apply(lambda r: compute_points(r, group), axis=1)
    for col in ["Sai s·ªë (%)","B·∫≠c v∆∞·ª£t (0.1%)","B·∫≠c gi·∫£m (0.1%)","ƒêi·ªÉm c·ªông","ƒêi·ªÉm tr·ª´","K·∫øt qu·∫£ (r√≤ng)","ƒêi·ªÉm t·ªïng"]:
        df_calc[col] = calc[col]
    df_calc["C·∫≠p nh·∫≠t l√∫c"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    kpi_df2 = kpi_df[~((kpi_df["B·ªô ph·∫≠n"]==dept) & (kpi_df["Th√°ng"]==month) & (kpi_df["NƒÉm"]==year))].copy()
    kpi_df2 = pd.concat([kpi_df2, df_calc], ignore_index=True)
    try:
        save_ws_df(ws_kpi, kpi_df2[EXPECTED_KPI_COLS])
        st.success("‚úÖ ƒê√£ l∆∞u KPI_DATA.")
    except Exception as e:
        st.error(f"‚ùå L·ªói l∆∞u: {e}")

    st.dataframe(df_calc, use_container_width=True)
    total_weighted = (pd.to_numeric(df_calc["ƒêi·ªÉm t·ªïng"], errors="coerce").fillna(0) * pd.to_numeric(df_calc["Tr·ªçng s·ªë (%)"], errors="coerce").fillna(0) / 100.0).sum()
    st.metric(f"ƒêi·ªÉm KPI (ƒë√£ ph√¢n b·ªï) ‚Äì {dept}", f"{total_weighted:.2f}")

st.divider()

# ====== Department comparison
st.header("2) So s√°nh KPI gi·ªØa c√°c B·ªô ph·∫≠n")
all_kpi = load_ws_df(ws_kpi, expected_cols=EXPECTED_KPI_COLS)
mask_m = (all_kpi["Th√°ng"]==month) & (all_kpi["NƒÉm"]==year)
month_kpi = all_kpi[mask_m].copy()
if month_kpi.empty:
    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu th√°ng n√†y.")
else:
    month_kpi["ƒêi·ªÉm t·ªïng (weighted)"] = pd.to_numeric(month_kpi["ƒêi·ªÉm t·ªïng"], errors="coerce").fillna(0) * pd.to_numeric(month_kpi["Tr·ªçng s·ªë (%)"], errors="coerce").fillna(0) / 100.0
    agg = month_kpi.groupby("B·ªô ph·∫≠n").agg(
        Diem_tong_weighted=("ƒêi·ªÉm t·ªïng (weighted)", "sum"),
        So_chi_tieu_khong_dat=("Sai s·ªë (%)", lambda s: (pd.to_numeric(s, errors="coerce").fillna(0) > pd.to_numeric(month_kpi["Ng∆∞·ª°ng/K·∫ø ho·∫°ch (%)"], errors="coerce").fillna(1.5)).sum())
    ).reset_index().sort_values("Diem_tong_weighted", ascending=False)
    st.dataframe(agg, use_container_width=True)

    fig = plt.figure(figsize=(10,5))
    plt.bar(agg["B·ªô ph·∫≠n"], agg["Diem_tong_weighted"])
    plt.title(f"So s√°nh KPI (ƒë√£ ph√¢n b·ªï) ‚Äì {month:02d}/{year}")
    plt.xticks(rotation=20, ha='right'); plt.ylabel("ƒêi·ªÉm")
    st.pyplot(fig)

    dept_excel = io.BytesIO()
    with pd.ExcelWriter(dept_excel, engine="xlsxwriter") as writer:
        month_kpi.to_excel(writer, sheet_name=f"{year}_{month:02d}_DETAIL", index=False)
        agg.to_excel(writer, sheet_name="COMPARE_DEPTS", index=False)
    st.download_button("‚¨áÔ∏è T·∫£i Excel so s√°nh b·ªô ph·∫≠n", data=dept_excel.getvalue(), file_name=f"SoSanhBoPhan_{year}_{month:02d}.xlsx")

    pdf_buf = io.BytesIO()
    from matplotlib.backends.backend_pdf import PdfPages
    with PdfPages(pdf_buf) as pdf:
        fig1 = plt.figure(figsize=(8.27, 11.69)); fig1.clf()
        plt.title(f"T√ìM T·∫ÆT KPI ‚Äì {month:02d}/{year}")
        tot = round(agg["Diem_tong_weighted"].sum(), 2)
        y = 0.9
        for t in [f"T·ªïng ƒëi·ªÉm KPI (to√†n ƒë∆°n v·ªã, ƒë√£ ph√¢n b·ªï): {tot}", f"S·ªë b·ªô ph·∫≠n: {len(agg)}", "Top b·ªô ph·∫≠n:"]:
            plt.text(0.05, y, t, transform=plt.gca().transAxes, fontsize=12); y-=0.06
        for _, r in agg.head(5).iterrows():
            plt.text(0.08, y, f"- {r['B·ªô ph·∫≠n']}: {r['Diem_tong_weighted']:.2f} ƒëi·ªÉm", transform=plt.gca().transAxes, fontsize=11); y-=0.045
        plt.axis('off'); pdf.savefig(fig1); plt.close(fig1)

        fig2 = plt.figure(figsize=(11.69, 8.27)); fig2.clf()
        plt.bar(agg["B·ªô ph·∫≠n"], agg["Diem_tong_weighted"])
        plt.title("Bi·ªÉu ƒë·ªì c·ªôt: ƒêi·ªÉm KPI theo B·ªô ph·∫≠n")
        plt.xticks(rotation=20, ha='right'); plt.ylabel("ƒêi·ªÉm")
        plt.tight_layout(); pdf.savefig(fig2); plt.close(fig2)
    st.download_button("‚¨áÔ∏è T·∫£i PDF t√≥m t·∫Øt b·ªô ph·∫≠n", data=pdf_buf.getvalue(), file_name=f"BaoCao_BoPhan_{year}_{month:02d}.pdf")

st.divider()

# ====== EMPLOYEES CRUD
st.header("3) Danh s√°ch CBCNV (CRUD + Import)")
ws_emp  = get_or_create_ws(gc, spreadsheet_id, WS_EMPS, headers=EXPECTED_EMP_COLS)
emp_df = load_ws_df(ws_emp, expected_cols=EXPECTED_EMP_COLS)
col1, col2 = st.columns([1,1])
with col1:
    st.caption("Th√™m/s·ª≠a tr·ª±c ti·∫øp, ƒë·∫£m b·∫£o 'M√£ NV' duy nh·∫•t.")
with col2:
    up_emp = st.file_uploader("‚¨ÜÔ∏è Import CBCNV (.xlsx)", type=["xlsx"], key="emp_up")
    if up_emp and st.button("Nh·∫≠p file CBCNV"):
        try:
            df_imp = pd.read_excel(up_emp)
            for c in EXPECTED_EMP_COLS:
                if c not in df_imp.columns: df_imp[c] = None
            df_imp = df_imp[EXPECTED_EMP_COLS]
            save_ws_df(ws_emp, df_imp)
            st.success(f"‚úÖ ƒê√£ nh·∫≠p {len(df_imp)} d√≤ng.")
            emp_df = df_imp
        except Exception as e:
            st.error(f"‚ùå L·ªói import: {e}")
emp_editor = st.data_editor(emp_df, key="emp_editor", num_rows="dynamic", use_container_width=True)
if st.button("üíæ L∆∞u CBCNV"):
    tmp = emp_editor.copy()
    if tmp["M√£ NV"].isna().any() or (tmp["M√£ NV"].astype(str).str.strip()=="").any():
        st.error("Thi·∫øu 'M√£ NV'."); st.stop()
    if tmp["M√£ NV"].duplicated().any():
        st.error("Tr√πng 'M√£ NV'."); st.stop()
    save_ws_df(ws_emp, tmp[EXPECTED_EMP_COLS])
    st.success("‚úÖ ƒê√£ l∆∞u CBCNV.")

st.divider()

# ====== ASSIGNMENTS (per-person)
st.header("4) Ph√¢n c√¥ng c√¥ng vi·ªác cho c√° nh√¢n")
data_df = load_ws_df(ws_kpi, expected_cols=EXPECTED_KPI_COLS)
ws_asg  = get_or_create_ws(gc, spreadsheet_id, WS_ASG, headers=EXPECTED_ASG_COLS)
asg_df = load_ws_df(ws_asg, expected_cols=EXPECTED_ASG_COLS)

colf = st.columns(4)
with colf[0]:
    sel_year = st.selectbox("NƒÉm", options=sorted([int(x) for x in pd.to_numeric(data_df["NƒÉm"], errors="coerce").dropna().unique()] + [datetime.now().year]))
with colf[1]:
    sel_month = st.selectbox("Th√°ng", options=list(range(1,13)))
with colf[2]:
    sel_dept = st.selectbox("B·ªô ph·∫≠n (l·ªçc)", options=["(T·∫•t c·∫£)"] + dept_list)
with colf[3]:
    sel_task_code = st.text_input("M√£ CV (t√πy ch·ªçn)", value="")

mask = (data_df["NƒÉm"]==sel_year) & (data_df["Th√°ng"]==sel_month)
if sel_dept != "(T·∫•t c·∫£)": mask &= (data_df["B·ªô ph·∫≠n"]==sel_dept)
kpi_cur = data_df[mask].copy()
st.write("C√°c d√≤ng KPI (l·ªçc theo tr√™n):")
st.dataframe(kpi_cur[["M√£ CV","B·ªô ph·∫≠n","Ch·ªâ ti√™u (tham chi·∫øu)","ƒêi·ªÉm t·ªïng"]], use_container_width=True)

asg_mask = (asg_df["NƒÉm"]==sel_year) & (asg_df["Th√°ng"]==sel_month)
if sel_dept != "(T·∫•t c·∫£)": asg_mask &= (asg_df["B·ªô ph·∫≠n"]==sel_dept)
if sel_task_code.strip(): asg_mask &= (asg_df["M√£ CV"].astype(str)==sel_task_code.strip())
asg_cur = asg_df[asg_mask].copy()

if asg_cur.empty and len(kpi_cur)>0:
    first = kpi_cur.iloc[0]
    asg_cur = pd.DataFrame([{
        "M√£ CV": first.get("M√£ CV"),
        "Ch·ªâ ti√™u (tham chi·∫øu)": first.get("Ch·ªâ ti√™u (tham chi·∫øu)"),
        "B·ªô ph·∫≠n": first.get("B·ªô ph·∫≠n"),
        "Th√°ng": first.get("Th√°ng"),
        "NƒÉm": first.get("NƒÉm"),
        "M√£ NV": None,
        "Vai tr√≤ (C√° nh√¢n)": "Ph·ªëi h·ª£p",
        "Tr·ªçng s·ªë c√° nh√¢n (%)": 100,
        "ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp (CN)": 0.0,
        "L√Ω do th∆∞·ªüng (CN)": "",
        "C·∫≠p nh·∫≠t l√∫c": None
    }], columns=EXPECTED_ASG_COLS)

emp_df = load_ws_df(ws_emp, expected_cols=EXPECTED_EMP_COLS)
asg_editor = st.data_editor(
    asg_cur, key="asg_editor", num_rows="dynamic", use_container_width=True,
    column_config={
        "M√£ NV": st.column_config.SelectboxColumn("M√£ NV", options=emp_df["M√£ NV"].dropna().astype(str).tolist(), required=True),
        "Vai tr√≤ (C√° nh√¢n)": st.column_config.SelectboxColumn("Vai tr√≤ (C√° nh√¢n)", options=["Ch·ªß tr√¨","Ph·ªëi h·ª£p"]),
        "Tr·ªçng s·ªë c√° nh√¢n (%)": st.column_config.NumberColumn(min_value=0, max_value=100, step=1),
        "ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp (CN)": st.column_config.NumberColumn(min_value=-5.0, max_value=5.0, step=0.1),
    }
)

c1, c2 = st.columns([1,1])
with c1:
    if st.button("üíæ L∆∞u ph√¢n c√¥ng"):
        try:
            tmp = asg_editor.copy()
            tmp["Th√°ng"] = sel_month; tmp["NƒÉm"] = sel_year
            tmp["C·∫≠p nh·∫≠t l√∫c"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            df_to_save = asg_df[~asg_mask].copy()
            df_to_save = pd.concat([df_to_save, tmp[EXPECTED_ASG_COLS]], ignore_index=True)
            save_ws_df(ws_asg, df_to_save[EXPECTED_ASG_COLS]); st.success("‚úÖ ƒê√£ l∆∞u ph√¢n c√¥ng.")
        except Exception as e:
            st.error(f"‚ùå L·ªói l∆∞u ph√¢n c√¥ng: {e}")
with c2:
    st.caption("App s·∫Ω c·∫£nh b√°o n·∫øu t·ªïng tr·ªçng s·ªë c√° nh√¢n cho **c√πng 1 c√¥ng vi·ªác** ‚â† 100%.")

st.divider()

# ====== Per-person KPI
st.header("5) KPI c√° nh√¢n (Top/Bottom + Email)")
asg_df = load_ws_df(ws_asg, expected_cols=EXPECTED_ASG_COLS)  # reload after save
kpi_key_cols = ["B·ªô ph·∫≠n","Ch·ªâ ti√™u (tham chi·∫øu)","Th√°ng","NƒÉm","M√£ CV","ƒêi·ªÉm t·ªïng"]
kpi_key = data_df[kpi_key_cols].copy()
has_code = asg_df["M√£ CV"].notna() & (asg_df["M√£ CV"].astype(str).str.strip()!="")
no_code  = ~has_code

merged = pd.DataFrame(columns=list(asg_df.columns) + ["ƒêi·ªÉm t·ªïng"])
if has_code.any():
    m1 = asg_df[has_code].merge(kpi_key.dropna(subset=["M√£ CV"]), on=["M√£ CV","Th√°ng","NƒÉm"], how="left")
    merged = pd.concat([merged, m1], ignore_index=True)
if no_code.any():
    m2 = asg_df[no_code].merge(kpi_key.drop(columns=["M√£ CV"]), on=["B·ªô ph·∫≠n","Ch·ªâ ti√™u (tham chi·∫øu)","Th√°ng","NƒÉm"], how="left")
    merged = pd.concat([merged, m2], ignore_index=True)

colp = st.columns(3)
with colp[0]:
    rep_year = st.selectbox("NƒÉm b√°o c√°o", options=sorted([int(x) for x in pd.to_numeric(merged["NƒÉm"], errors="coerce").dropna().unique()] + [year]), index=0)
with colp[1]:
    rep_month = st.selectbox("Th√°ng b√°o c√°o", options=list(range(1,13)), index=month-1 if 1<=month<=12 else 0)
with colp[2]:
    rep_dept = st.selectbox("B·ªô ph·∫≠n (l·ªçc)", options=["(T·∫•t c·∫£)"] + dept_list)

mask_rep = (merged["NƒÉm"]==rep_year) & (merged["Th√°ng"]==rep_month)
if rep_dept != "(T·∫•t c·∫£)": mask_rep &= (merged["B·ªô ph·∫≠n"]==rep_dept)
merged = merged[mask_rep].copy()

merged["Tr·ªçng s·ªë c√° nh√¢n (%)"] = pd.to_numeric(merged["Tr·ªçng s·ªë c√° nh√¢n (%)"], errors="coerce").fillna(0)
merged["ƒêi·ªÉm t·ªïng"] = pd.to_numeric(merged["ƒêi·ªÉm t·ªïng"], errors="coerce").fillna(0)
merged["ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp (CN)"] = pd.to_numeric(merged["ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp (CN)"], errors="coerce").fillna(0)
merged["ƒêi·ªÉm c√° nh√¢n (ch∆∞a th∆∞·ªüng)"] = merged["ƒêi·ªÉm t·ªïng"] * merged["Tr·ªçng s·ªë c√° nh√¢n (%)"] / 100.0
merged["ƒêi·ªÉm c√° nh√¢n (cu·ªëi)"] = merged["ƒêi·ªÉm c√° nh√¢n (ch∆∞a th∆∞·ªüng)"] + merged["ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp (CN)"]

wcheck = merged.groupby(["M√£ CV","Ch·ªâ ti√™u (tham chi·∫øu)","B·ªô ph·∫≠n","Th√°ng","NƒÉm"], dropna=False)["Tr·ªçng s·ªë c√° nh√¢n (%)"].sum().reset_index(name="T·ªïng tr·ªçng s·ªë (%)")
bad = wcheck[(wcheck["T·ªïng tr·ªçng s·ªë (%)"].round(2) != 100.00)]
if len(bad)>0:
    st.warning("‚ö†Ô∏è C√≥ c√¥ng vi·ªác c√≥ t·ªïng **Tr·ªçng s·ªë c√° nh√¢n (%)** ‚â† 100%. Vui l√≤ng r√† so√°t:")
    st.dataframe(bad, use_container_width=True)

per_person = merged.groupby("M√£ NV").agg(ƒêi·ªÉm_KPI_c√°_nh√¢n=("ƒêi·ªÉm c√° nh√¢n (cu·ªëi)","sum")).reset_index()
emp_df2 = load_ws_df(ws_emp, expected_cols=EXPECTED_EMP_COLS)
per_person = per_person.merge(emp_df2[["M√£ NV","H·ªç v√† t√™n","B·ªô ph·∫≠n","Ch·ª©c danh"]], on="M√£ NV", how="left")
per_person = per_person[["M√£ NV","H·ªç v√† t√™n","B·ªô ph·∫≠n","Ch·ª©c danh","ƒêi·ªÉm_KPI_c√°_nh√¢n"]].sort_values("ƒêi·ªÉm_KPI_c√°_nh√¢n", ascending=False)

st.subheader(f"B·∫£ng KPI c√° nh√¢n ‚Äì {rep_month:02d}/{rep_year}")
st.dataframe(per_person, use_container_width=True)

colc = st.columns(3)
with colc[0]:
    top_n = st.number_input("Top N", min_value=3, max_value=50, value=10, step=1)
with colc[1]:
    bottom_n = st.number_input("Bottom N", min_value=3, max_value=50, value=10, step=1)
with colc[2]:
    show_labels = st.checkbox("Hi·ªÉn th·ªã nh√£n", value=True)

if len(per_person)>0:
    top_df = per_person.head(int(top_n))
    fig1 = plt.figure(figsize=(10,5)); plt.bar(top_df["H·ªç v√† t√™n"], top_df["ƒêi·ªÉm_KPI_c√°_nh√¢n"])
    plt.title(f"Top {int(top_n)} KPI c√° nh√¢n ‚Äì {rep_month:02d}/{rep_year}"); plt.xticks(rotation=20, ha='right'); plt.ylabel("ƒêi·ªÉm")
    if show_labels:
        for i, v in enumerate(top_df["ƒêi·ªÉm_KPI_c√°_nh√¢n"]): plt.text(i, v, f"{v:.2f}", ha='center', va='bottom', fontsize=8)
    st.pyplot(fig1)

    bot_df = per_person.tail(int(bottom_n)).sort_values("ƒêi·ªÉm_KPI_c√°_nh√¢n")
    fig2 = plt.figure(figsize=(10,5)); plt.bar(bot_df["H·ªç v√† t√™n"], bot_df["ƒêi·ªÉm_KPI_c√°_nh√¢n"])
    plt.title(f"Bottom {int(bottom_n)} KPI c√° nh√¢n ‚Äì {rep_month:02d}/{rep_year}"); plt.xticks(rotation=20, ha='right'); plt.ylabel("ƒêi·ªÉm")
    if show_labels:
        for i, v in enumerate(bot_df["ƒêi·ªÉm_KPI_c√°_nh√¢n"]): plt.text(i, v, f"{v:.2f}", ha='center', va='bottom', fontsize=8)
    st.pyplot(fig2)
else:
    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu KPI c√° nh√¢n cho k·ª≥ n√†y.")

excel_buf = io.BytesIO()
with pd.ExcelWriter(excel_buf, engine="xlsxwriter") as writer:
    merged.to_excel(writer, sheet_name="DETAIL_ASSIGN", index=False)
    per_person.to_excel(writer, sheet_name="KPI_PERSON", index=False)
excel_bytes = excel_buf.getvalue()
st.download_button("‚¨áÔ∏è T·∫£i Excel KPI c√° nh√¢n", data=excel_bytes, file_name=f"KPI_canhan_{rep_year}_{rep_month:02d}.xlsx")

to_addr = st.text_input("G·ª≠i t·ªõi (email)", value=default_to_email)
subject = f"B√°o c√°o KPI c√° nh√¢n {rep_month:02d}/{rep_year}"
body = f"ƒê√≠nh k√®m b√°o c√°o KPI c√° nh√¢n th√°ng {rep_month:02d}/{rep_year}. G·ªìm t·ªïng h·ª£p v√† chi ti·∫øt ph√¢n c√¥ng."
if st.button("üìß G·ª≠i email k√®m Excel"):
    ok, msg = send_email_smtp(to_email=to_addr, subject=subject, body=body, attachments=[(f"KPI_canhan_{rep_year}_{rep_month:02d}.xlsx", excel_bytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")])
    if ok: st.success(f"‚úÖ ƒê√£ g·ª≠i email t·ªõi {to_addr}")
    else: st.error(f"‚ùå Kh√¥ng g·ª≠i ƒë∆∞·ª£c email: {msg}")

st.divider()
st.caption("¬© KPI Scorer v4.0 (Secure) ‚Äì ƒê·ªìng b·ªô Excel, ch·∫•m KPI Nh√≥m 2 + th∆∞·ªüng, so s√°nh b·ªô ph·∫≠n, CBCNV & ph√¢n c√¥ng, KPI c√° nh√¢n, xu·∫•t Excel/PDF & email.")
