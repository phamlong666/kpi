# -*- coding: utf-8 -*-
"""
KPI App - ƒê·ªãnh H√≥a (Login + KPI Suite)
- ƒêƒÉng nh·∫≠p t·ª´ Google Sheet tab USE (ho·∫∑c fallback USE.xlsx).
- Sau khi ƒëƒÉng nh·∫≠p: c√°c tab KPI (B·∫£ng KPI, Nh·∫≠p CSV, Qu·∫£n tr·ªã).
- T·ª± ƒë·ªông nh·∫≠n d·∫°ng c·ªôt t∆∞∆°ng ƒë∆∞∆°ng (alias) theo file "app - Copy.py".
- Ghi/ƒë·ªçc KPI t·∫°i worksheet "KPI" (c√≥ th·ªÉ ƒë·ªïi trong sidebar Admin).
"""
import re
from datetime import datetime
import io
import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials

# ========== C·∫§U H√åNH CHUNG ==========
st.set_page_config(page_title="KPI ‚Äì ƒê·ªãnh H√≥a", layout="wide")
APP_TITLE = "üìä KPI ‚Äì ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a"
GOOGLE_SHEET_ID_DEFAULT = "1nXFKJrn8oHwQgUzv5QYihoazYRhhS1PeN-xyo7Er2iM"
ADMIN_ACCOUNTS = {r"pctn\\admin", r"npc\\longph"}

def is_admin(username: str) -> bool:
    return bool(username) and username.strip().lower() in ADMIN_ACCOUNTS

def toast(msg, icon="‚ÑπÔ∏è"):
    try:
        st.toast(msg, icon=icon)
    except Exception:
        pass

def extract_sheet_id(text: str) -> str:
    if not text: return ""
    text = text.strip()
    m = re.search(r"/d/([a-zA-Z0-9-_]+)", text)
    return m.group(1) if m else text

def get_gs_client():
    try:
        svc = dict(st.secrets["gdrive_service_account"])
        if "private_key" in svc:
            svc["private_key"] = (
                svc["private_key"]
                .replace("\\r\\n", "\\n")
                .replace("\\r", "\\n")
                .replace("\\\\n", "\\n")
            )
        scopes = ["https://www.googleapis.com/auth/spreadsheets","https://www.googleapis.com/auth/drive"]
        creds = Credentials.from_service_account_info(svc, scopes=scopes)
        return gspread.authorize(creds)
    except Exception as e:
        st.session_state["_gs_error"] = f"SECRETS_ERROR: {e}"
        return None

def open_spreadsheet(sid_or_url: str):
    sid = extract_sheet_id(sid_or_url or GOOGLE_SHEET_ID_DEFAULT) or GOOGLE_SHEET_ID_DEFAULT
    client = st.session_state.get("_gs_client") or get_gs_client()
    st.session_state["_gs_client"] = client
    if client is None:
        raise RuntimeError("no_client")
    return client.open_by_key(sid)

def df_from_ws(ws) -> pd.DataFrame:
    records = ws.get_all_records(expected_headers=ws.row_values(1))
    return pd.DataFrame(records)

def _normalize_name(s: str) -> str:
    return re.sub(r"\\s+", " ", (s or "").strip())

# ========== ALIAS C·ªòT ==========
ALIAS = {
    "USE (m√£ ƒëƒÉng nh·∫≠p)": [
        "USE (m√£ ƒëƒÉng nh·∫≠p)",
        r"T√†i kho·∫£n (USE\\username)",  # ƒë√£ escape
        "T√†i kho·∫£n (USE/username)",
        "T√†i kho·∫£n", "Username",
    ],
    "M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh": [
        "M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh","Password m·∫∑c ƒë·ªãnh","Password","M·∫≠t kh·∫©u","Mat khau mac dinh"
    ],
    # KPI
    "T√™n ch·ªâ ti√™u (KPI)": ["T√™n ch·ªâ ti√™u (KPI)","Ten chi tieu (KPI)","T√™n KPI","Ten KPI","Ch·ªâ ti√™u","Chi tieu"],
    "ƒê∆°n v·ªã t√≠nh": ["ƒê∆°n v·ªã t√≠nh","Don vi tinh","Unit"],
    "K·∫ø ho·∫°ch": ["K·∫ø ho·∫°ch","Ke hoach","Plan","Target"],
    "Th·ª±c hi·ªán": ["Th·ª±c hi·ªán","Thuc hien","Actual","Th·ª±c hi·ªán (th√°ng)"],
    "Tr·ªçng s·ªë": ["Tr·ªçng s·ªë","Trong so","Weight"],
    "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch": ["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch","Bo phan/nguoi phu trach","Ph·ª• tr√°ch","Nguoi phu trach"],
    "Th√°ng": ["Th√°ng","Thang","Month"],
    "NƒÉm": ["NƒÉm","Nam","Year"],
    "ƒêi·ªÉm KPI": ["ƒêi·ªÉm KPI","Diem KPI","Score","Diem"],
    "Ghi ch√∫": ["Ghi ch√∫","Ghi chu","Notes"],
    "T√™n ƒë∆°n v·ªã": ["T√™n ƒë∆°n v·ªã","Don vi","Ten don vi","ƒê∆°n v·ªã"],
}

def normalize_columns(df: pd.DataFrame) -> pd.DataFrame:
    if df is None or df.empty: return df
    cols_lower = {c.strip().lower(): c for c in df.columns}
    rename = {}
    for std, cands in ALIAS.items():
        if std in df.columns: continue
        for c in cands:
            key = c.strip().lower()
            if key in cols_lower:
                rename[cols_lower[key]] = std
                break
    if rename: df = df.rename(columns=rename)
    return df

# ========== LOAD USERS ==========
def load_users(spreadsheet_id_or_url: str = "") -> pd.DataFrame:
    sid = extract_sheet_id(spreadsheet_id_or_url) or GOOGLE_SHEET_ID_DEFAULT
    client = get_gs_client()
    if client is None:
        st.session_state["_gs_error"] = st.session_state.get("_gs_error","SECRETS_ERROR")
        return pd.DataFrame()
    try:
        sh = client.open_by_key(sid)
        # ∆∞u ti√™n tab 'USE'; n·∫øu kh√¥ng c√≥, qu√©t theo headers
        try:
            ws = sh.worksheet("USE")
        except Exception:
            ws = None
            for w in sh.worksheets():
                hdr = [h.strip() for h in w.row_values(1)]
                if (("USE (m√£ ƒëƒÉng nh·∫≠p)" in hdr) or ("T√†i kho·∫£n (USE\\username)" in hdr) or ("T√†i kho·∫£n" in hdr) or ("Username" in hdr)) \
                   and ("M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh" in hdr or "Password" in hdr or "M·∫≠t kh·∫©u" in hdr):
                    ws = w; break
            if ws is None:
                st.session_state["_gs_error"] = "NO_USE_TAB"
                return pd.DataFrame()
        return df_from_ws(ws)
    except Exception as e:
        st.session_state["_gs_error"] = f"OPEN_ERROR: {e}"
        return pd.DataFrame()

def check_credentials(df: pd.DataFrame, use_input: str, pwd_input: str) -> bool:
    if df is None or df.empty:
        st.error("Ch∆∞a t·∫£i ƒë∆∞·ª£c danh s√°ch ng∆∞·ªùi d√πng (USE).")
        return False
    df = normalize_columns(df)
    # x√°c ƒë·ªãnh c·ªôt
    col_use = next((c for c in df.columns if c.strip().lower() in [
        "t√†i kho·∫£n (use\\username)".lower(),
        "t√†i kho·∫£n".lower(),"username".lower(),"use (m√£ ƒëƒÉng nh·∫≠p)".lower()
    ]), None)
    col_pw = next((c for c in df.columns if c.strip().lower() in [
        "m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh".lower(),"password m·∫∑c ƒë·ªãnh".lower(),"password".lower(),"m·∫≠t kh·∫©u".lower()
    ]), None)
    if not col_use or not col_pw:
        st.error("Thi·∫øu c·ªôt USE ho·∫∑c M·∫≠t kh·∫©u trong b·∫£ng USE.")
        return False
    u = (use_input or "").strip(); p = (pwd_input or "").strip()
    row = df.loc[df[col_use].astype(str).str.strip() == u]
    if row.empty or str(row.iloc[0][col_pw]).strip() != p:
        st.error("USE ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng")
        return False
    return True

# ========== KPI CORE ==========
KPI_COLS = ["T√™n ch·ªâ ti√™u (KPI)","ƒê∆°n v·ªã t√≠nh","K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Tr·ªçng s·ªë","B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch","Th√°ng","NƒÉm","ƒêi·ªÉm KPI","Ghi ch√∫","T√™n ƒë∆°n v·ªã"]

def safe_float(x):
    try:
        s = str(x).replace(",",".")
        return float(s)
    except Exception:
        return None

def compute_score(row):
    plan = safe_float(row.get("K·∫ø ho·∫°ch"))
    actual = safe_float(row.get("Th·ª±c hi·ªán"))
    weight = safe_float(row.get("Tr·ªçng s·ªë")) or 0.0
    if plan in (None,0) or actual is None: return None
    ratio = max(min(actual/plan, 2.0), 0.0)
    w = weight/100.0 if weight and weight>1 else (weight or 0.0)
    return round(ratio*10*w, 2)

def read_kpi_from_sheet(sh, sheet_name: str):
    try:
        ws = sh.worksheet(sheet_name)
    except Exception:
        # t·ª± t√¨m tab n√†o c√≥ ƒë·ªß c·ªôt KPI t·ªëi thi·ªÉu
        ws = None
        for w in sh.worksheets():
            hdr = [h.strip() for h in w.row_values(1)]
            if ("T√™n ch·ªâ ti√™u (KPI)" in hdr or "K·∫ø ho·∫°ch" in hdr) and ("Th·ª±c hi·ªán" in hdr or "Th·ª±c hi·ªán (th√°ng)" in hdr):
                ws = w; break
        if ws is None: return pd.DataFrame()
    df = df_from_ws(ws)
    df = normalize_columns(df)
    if "Th·ª±c hi·ªán (th√°ng)" in df.columns and "Th·ª±c hi·ªán" not in df.columns:
        df = df.rename(columns={"Th·ª±c hi·ªán (th√°ng)":"Th·ª±c hi·ªán"})
    if "ƒêi·ªÉm KPI" not in df.columns:
        df["ƒêi·ªÉm KPI"] = df.apply(compute_score, axis=1)
    return df

def write_kpi_to_sheet(sh, sheet_name: str, df: pd.DataFrame):
    df = df.copy()
    df = normalize_columns(df)
    if "ƒêi·ªÉm KPI" not in df.columns:
        df["ƒêi·ªÉm KPI"] = df.apply(compute_score, axis=1)
    # b·∫£o ƒë·∫£m th·ª© t·ª± c·ªôt
    cols = [c for c in KPI_COLS if c in df.columns] + [c for c in df.columns if c not in KPI_COLS]
    data = [cols] + df[cols].fillna("").astype(str).values.tolist()
    try:
        try:
            ws = sh.worksheet(sheet_name)
            ws.clear()
        except Exception:
            ws = sh.add_worksheet(title=sheet_name, rows=len(data)+10, cols=max(12,len(cols)))
        ws.update(data, value_input_option="USER_ENTERED")
        return True
    except Exception as e:
        toast(f"L∆∞u KPI th·∫•t b·∫°i: {e}", "‚ùå")
        return False

# ========== SIDEBAR (LOGIN + ADMIN) ==========
with st.sidebar:
    st.header("üîí ƒêƒÉng nh·∫≠p")
    use_input = st.text_input("USE (vd: PCTN\\KVDHA)")
    pwd_input = st.text_input("M·∫≠t kh·∫©u", type="password")
    colA,colB = st.columns(2)
    with colA:
        login_clicked = st.button("ƒêƒÉng nh·∫≠p", use_container_width=True, type="primary")
    with colB:
        forgot_clicked = st.button("Qu√™n m·∫≠t kh·∫©u", use_container_width=True)

    if "_user" in st.session_state and is_admin(st.session_state["_user"]):
        st.markdown("---")
        st.header("‚öôÔ∏è Qu·∫£n tr·ªã (Admin)")
        sid_val = st.text_input("Google Sheet ID/URL", value=st.session_state.get("spreadsheet_id",""))
        st.session_state["spreadsheet_id"] = sid_val
        kpi_sheet_name = st.text_input("T√™n sheet KPI", value=st.session_state.get("kpi_sheet_name","KPI"))
        st.session_state["kpi_sheet_name"] = kpi_sheet_name

if login_clicked:
    df_users = load_users(st.session_state.get("spreadsheet_id",""))
    if check_credentials(df_users, use_input, pwd_input):
        st.session_state["_user"] = use_input
        toast(f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng: {use_input}", "‚úÖ")

if forgot_clicked:
    u = (use_input or "").strip()
    if not u:
        toast("Nh·∫≠p USE tr∆∞·ªõc khi b·∫•m 'Qu√™n m·∫≠t kh·∫©u'.", "‚ùó")
    else:
        toast(f"ƒê√£ g·ª≠i y√™u c·∫ßu c·∫•p l·∫°i m·∫≠t kh·∫©u cho {u}", "‚úÖ")

st.title(APP_TITLE)

if "_user" not in st.session_state:
    st.stop()

# ========== MAIN TABS ==========
tab1, tab2, tab3 = st.tabs(["üìã B·∫£ng KPI","‚¨ÜÔ∏è Nh·∫≠p CSV v√†o KPI","‚öôÔ∏è Qu·∫£n tr·ªã"])

def get_sheet_and_name():
    sid_cfg = st.session_state.get("spreadsheet_id","") or GOOGLE_SHEET_ID_DEFAULT
    sheet_name = st.session_state.get("kpi_sheet_name","KPI")
    sh = open_spreadsheet(sid_cfg)
    return sh, sheet_name

with tab1:
    st.subheader("B·∫£ng KPI")
    try:
        sh, sheet_name = get_sheet_and_name()
        df_kpi = read_kpi_from_sheet(sh, sheet_name)
    except Exception as e:
        st.error(f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c KPI: {e}")
        df_kpi = pd.DataFrame()

    if not df_kpi.empty:
        months = ["T·∫•t c·∫£"] + sorted(df_kpi.get("Th√°ng", pd.Series(dtype=str)).dropna().astype(str).unique().tolist())
        years  = ["T·∫•t c·∫£"] + sorted(df_kpi.get("NƒÉm", pd.Series(dtype=str)).dropna().astype(str).unique().tolist())
        colf1, colf2, colf3 = st.columns([1,1,2])
        with colf1:
            m = st.selectbox("Th√°ng", options=months, index=0)
        with colf2:
            y = st.selectbox("NƒÉm", options=years, index=0)
        if m!="T·∫•t c·∫£": df_kpi = df_kpi[df_kpi["Th√°ng"].astype(str)==str(m)]
        if y!="T·∫•t c·∫£": df_kpi = df_kpi[df_kpi["NƒÉm"].astype(str)==str(y)]

        if "T√™n ƒë∆°n v·ªã" in df_kpi.columns:
            units = ["T·∫•t c·∫£"] + sorted(df_kpi["T√™n ƒë∆°n v·ªã"].dropna().astype(str).unique().tolist())
            unit = st.selectbox("ƒê∆°n v·ªã", options=units, index=0)
            if unit!="T·∫•t c·∫£": df_kpi = df_kpi[df_kpi["T√™n ƒë∆°n v·ªã"].astype(str)==unit]

        if "ƒêi·ªÉm KPI" in df_kpi.columns:
            if st.checkbox("S·∫Øp x·∫øp theo ƒêi·ªÉm KPI (gi·∫£m d·∫ßn)", True):
                df_kpi = df_kpi.sort_values(by="ƒêi·ªÉm KPI", ascending=False)

        st.dataframe(df_kpi, use_container_width=True, hide_index=True)

        # Xu·∫•t Excel
        buf = io.BytesIO()
        with pd.ExcelWriter(buf, engine="xlsxwriter") as writer:
            df_kpi.to_excel(writer, sheet_name="KPI", index=False)
        st.download_button("‚¨áÔ∏è T·∫£i Excel", data=buf.getvalue(), file_name="KPI_export.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu KPI ho·∫∑c Admin ch∆∞a c·∫•u h√¨nh sheet.")

with tab2:
    st.subheader("Nh·∫≠p CSV v√†o KPI")
    st.caption("CSV g·ª£i √Ω c√°c c·ªôt: 'T√™n ch·ªâ ti√™u (KPI)', 'ƒê∆°n v·ªã t√≠nh', 'K·∫ø ho·∫°ch', 'Th·ª±c hi·ªán', 'Tr·ªçng s·ªë', 'B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch', 'Th√°ng', 'NƒÉm', 'Ghi ch√∫', 'T√™n ƒë∆°n v·ªã'.")
    up = st.file_uploader("T·∫£i file CSV", type=["csv"])
    if up is not None:
        try:
            df_csv = pd.read_csv(up)
        except Exception:
            up.seek(0)
            df_csv = pd.read_csv(up, encoding="utf-8-sig")
        df_csv = normalize_columns(df_csv)
        # Chu·∫©n t√™n c·ªôt "Th·ª±c hi·ªán (th√°ng)" ‚Üí "Th·ª±c hi·ªán"
        if "Th·ª±c hi·ªán (th√°ng)" in df_csv.columns and "Th·ª±c hi·ªán" not in df_csv.columns:
            df_csv = df_csv.rename(columns={"Th·ª±c hi·ªán (th√°ng)":"Th·ª±c hi·ªán"})
        if "ƒêi·ªÉm KPI" not in df_csv.columns:
            df_csv["ƒêi·ªÉm KPI"] = df_csv.apply(compute_score, axis=1)
        st.dataframe(df_csv, use_container_width=True, hide_index=True)

        colA,colB = st.columns(2)
        with colA:
            save_clicked = st.button("üíæ Ghi v√†o sheet KPI", use_container_width=True, type="primary")
        with colB:
            st.write("")

        if save_clicked:
            try:
                sh, sheet_name = get_sheet_and_name()
                ok = write_kpi_to_sheet(sh, sheet_name, df_csv)
                if ok: toast("ƒê√£ ghi d·ªØ li·ªáu CSV v√†o sheet KPI.", "‚úÖ")
            except Exception as e:
                st.error(f"L∆∞u th·∫•t b·∫°i: {e}")

with tab3:
    st.subheader("Th√¥ng tin")
    st.write("Ng∆∞·ªùi d√πng:", st.session_state.get("_user"))
    st.write("Vai tr√≤:", "Admin" if is_admin(st.session_state.get("_user","")) else "User")
    st.write("Google Sheet:", st.session_state.get("spreadsheet_id","(m·∫∑c ƒë·ªãnh)") or GOOGLE_SHEET_ID_DEFAULT)
    st.write("T√™n sheet KPI:", st.session_state.get("kpi_sheet_name","KPI"))
