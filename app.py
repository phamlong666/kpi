# -*- coding: utf-8 -*-
"""
KPI App ‚Äì ƒê·ªãnh H√≥a (v3.4 ‚Äì penalty sai s·ªë, format s·ªë VN, Sheets/Drive OK)
- Form nh·∫≠p tay ƒë·∫∑t TR√äN; b·ªë c·ª•c theo h√†ng ngang.
- √î K·∫ø ho·∫°ch & Th·ª±c hi·ªán hi·ªÉn th·ªã s·ªë ki·ªÉu VN: 1.000.000,00 (parse v·ªÅ s·ªë t·ª± ƒë·ªông).
- T√≠nh ƒëi·ªÉm KPI theo nhi·ªÅu ph∆∞∆°ng ph√°p, b·ªï sung NH√ÅNH:
  * Sai s·ªë ‚â§ ¬±1,5%, c·ª© v∆∞·ª£t 0,1% tr·ª´ 0,02 ƒëi·ªÉm (t·ªëi ƒëa 3 ƒëi·ªÉm) ‚Üí nh√¢n tr·ªçng s·ªë.
- CSV: ch·ªçn d√≤ng b·∫±ng checkbox, √°p d·ª•ng/l√†m m·ªõi/xu·∫•t b√°o c√°o (Excel/PDF).
- Ghi CSV ‚Üí Sheet KPI (b√°o l·ªói r√µ r√†ng). Tr∆∞·ªõc khi ghi/xu·∫•t/l∆∞u s·∫Ω t·ª± √°p d·ª•ng form l√™n CSV.
- Drive: ∆∞u ti√™n Shared Drive; n·∫øu My Drive b·ªã quota 403 th√¨ UPDATE file c√≥ s·∫µn (ho·∫∑c h∆∞·ªõng d·∫´n).
"""

import re
import io
from datetime import datetime
import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials

# ===== Drive API =====
try:
    from googleapiclient.discovery import build as gbuild
    from googleapiclient.http import MediaIoBaseUpload
    from googleapiclient.errors import HttpError
except Exception:
    gbuild = None
    MediaIoBaseUpload = None
    HttpError = Exception

# ===== C·∫§U H√åNH =====
st.set_page_config(page_title="KPI ‚Äì ƒê·ªãnh H√≥a", layout="wide")
APP_TITLE = "üìä KPI ‚Äì ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a"

GOOGLE_SHEET_ID_DEFAULT = "1nXFKJrn8oHwQgUzv5QYihoazYRhhS1PeN-xyo7Er2iM"
KPI_SHEET_DEFAULT = "KPI"
APP_KPI_DRIVE_ROOT_ID_DEFAULT = "1rE3E8CuPViw8-VYWYZgeB4Mz9WEY3e7"

if "spreadsheet_id" not in st.session_state:
    st.session_state["spreadsheet_id"] = GOOGLE_SHEET_ID_DEFAULT
if "kpi_sheet_name" not in st.session_state:
    st.session_state["kpi_sheet_name"] = KPI_SHEET_DEFAULT
if "drive_root_id" not in st.session_state:
    st.session_state["drive_root_id"] = APP_KPI_DRIVE_ROOT_ID_DEFAULT
if "_report_folder_id" not in st.session_state:
    st.session_state["_report_folder_id"] = ""  # id th∆∞ m·ª•c "B√°o c√°o KPI" ƒë√£ chu·∫©n b·ªã

# ===== TI·ªÜN √çCH CHUNG =====
def toast(msg, icon="‚ÑπÔ∏è"):
    try:
        st.toast(msg, icon=icon)
    except Exception:
        pass

def extract_sheet_id(text: str) -> str:
    if not text:
        return ""
    m = re.search(r"/d/([a-zA-Z0-9-_]+)", text.strip())
    return m.group(1) if m else text.strip()

def extract_drive_folder_id(s: str) -> str:
    """Nh·∫≠n ID ho·∫∑c URL /folders/<id> v√† tr·∫£ v·ªÅ id s·∫°ch."""
    if not s:
        return ""
    s = s.strip()
    m = re.search(r"/folders/([a-zA-Z0-9_-]+)", s)
    return m.group(1) if m else s

def get_gs_clients():
    """Tr·∫£ v·ªÅ (gspread_client, google_credentials)."""
    try:
        svc = dict(st.secrets["gdrive_service_account"])
        if "private_key" in svc:
            svc["private_key"] = (
                svc["private_key"]
                .replace("\\r\\n", "\\n")
                .replace("\\r", "\\n")
                .replace("\\\\n", "\\n")
            )
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = Credentials.from_service_account_info(svc, scopes=scopes)
        return gspread.authorize(creds), creds
    except Exception as e:
        st.session_state["_gs_error"] = f"SECRETS_ERROR: {e}"
        return None, None

def open_spreadsheet(sid_or_url: str):
    sid = extract_sheet_id(sid_or_url or GOOGLE_SHEET_ID_DEFAULT) or GOOGLE_SHEET_ID_DEFAULT
    gclient, creds = st.session_state.get("_gs_pair", (None, None))
    if gclient is None:
        gclient, creds = get_gs_clients()
        st.session_state["_gs_pair"] = (gclient, creds)
    if gclient is None:
        raise RuntimeError("Ch∆∞a c√≥ Google client (secrets).")
    return gclient.open_by_key(sid)

def df_from_ws(ws) -> pd.DataFrame:
    records = ws.get_all_records(expected_headers=ws.row_values(1))
    return pd.DataFrame(records)

# ---- Chu·∫©n ho√° t√™n c·ªôt ----
ALIAS = {
    "USE (m√£ ƒëƒÉng nh·∫≠p)": [
        "USE (m√£ ƒëƒÉng nh·∫≠p)", r"T√†i kho·∫£n (USE\\username)", "T√†i kho·∫£n (USE/username)",
        "T√†i kho·∫£n", "Username", "USE", "User",
    ],
    "M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh": [
        "M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh", "Password m·∫∑c ƒë·ªãnh", "Password", "M·∫≠t kh·∫©u", "Mat khau mac dinh",
    ],
    "T√™n ch·ªâ ti√™u (KPI)": ["T√™n ch·ªâ ti√™u (KPI)", "T√™n KPI", "Ch·ªâ ti√™u"],
    "ƒê∆°n v·ªã t√≠nh": ["ƒê∆°n v·ªã t√≠nh", "Unit"],
    "K·∫ø ho·∫°ch": ["K·∫ø ho·∫°ch", "Plan", "Target", "K·∫ø ho·∫°ch (th√°ng)"],
    "Th·ª±c hi·ªán": ["Th·ª±c hi·ªán", "Th·ª±c hi·ªán (th√°ng)", "Actual (month)"],
    "Tr·ªçng s·ªë": ["Tr·ªçng s·ªë", "Weight"],
    "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch": ["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", "Ph·ª• tr√°ch"],
    "Th√°ng": ["Th√°ng", "Month"],
    "NƒÉm": ["NƒÉm", "Year"],
    "ƒêi·ªÉm KPI": ["ƒêi·ªÉm KPI", "Score"],
    "Ghi ch√∫": ["Ghi ch√∫", "Notes"],
    "T√™n ƒë∆°n v·ªã": ["T√™n ƒë∆°n v·ªã", "ƒê∆°n v·ªã"],
    "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£": ["Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£", "C√°ch t√≠nh", "C√¥ng th·ª©c"],
    "Ng∆∞·ª°ng d∆∞·ªõi": ["Ng∆∞·ª°ng d∆∞·ªõi", "Min"],
    "Ng∆∞·ª°ng tr√™n": ["Ng∆∞·ª°ng tr√™n", "Max"],
}

def normalize_columns(df: pd.DataFrame) -> pd.DataFrame:
    if df is None or df.empty:
        return df
    cols_lower = {c.strip().lower(): c for c in df.columns}
    rename = {}
    for std, cands in ALIAS.items():
        if std in df.columns:
            continue
        for c in cands:
            key = c.strip().lower()
            if key in cols_lower:
                rename[cols_lower[key]] = std
                break
    if rename:
        df = df.rename(columns=rename)
    if "Th·ª±c hi·ªán (th√°ng)" in df.columns and "Th·ª±c hi·ªán" not in df.columns:
        df = df.rename(columns={"Th·ª±c hi·ªán (th√°ng)": "Th·ª±c hi·ªán"})
    if "K·∫ø ho·∫°ch (th√°ng)" in df.columns and "K·∫ø ho·∫°ch" not in df.columns:
        df = df.rename(columns={"K·∫ø ho·∫°ch (th√°ng)": "K·∫ø ho·∫°ch"})
    return df

# ---- ƒê·ªãnh d·∫°ng & parse s·ªë ki·ªÉu Vi·ªát Nam ----
def format_vn_number(x, decimals=2):
    """1_234_567.89 -> '1.234.567,89'"""
    try:
        f = float(x)
    except:
        return ""
    s = f"{f:,.{decimals}f}"        # '1,234,567.89'
    return s.replace(",", "_").replace(".", ",").replace("_", ".")

def parse_vn_number(s):
    """'1.234.567,89' -> 1234567.89"""
    if s is None:
        return None
    txt = str(s).strip()
    if txt == "" or txt.lower() in ("none", "nan"):
        return None
    txt = txt.replace(".", "").replace(",", ".")
    try:
        return float(txt)
    except:
        return None

def parse_float(x):
    """Gi·ªØ t∆∞∆°ng th√≠ch c≈© nh∆∞ng h·ªó tr·ª£ ƒë·ªãnh d·∫°ng VN."""
    if isinstance(x, (int, float)):
        return float(x)
    return parse_vn_number(x)

# ---- Helper t√≠nh KPI sai s·ªë (penalty) ----
def to_percent(val):
    """1.5 -> 1.5% ; 0.015 -> 1.5%"""
    v = parse_float(val)
    if v is None:
        return None
    return v * 100.0 if abs(v) <= 1.0 else v

def kpi_penalty_error_method(actual_err, threshold_pct=1.5,
                             step_pct=0.1, per_step_penalty=0.02,
                             max_penalty=3.0):
    """
    ƒêi·ªÉm tr·ª´ cho KPI sai s·ªë:
    - N·∫øu sai s·ªë th·ª±c t·∫ø ‚â§ threshold_pct => 0 ƒëi·ªÉm tr·ª´.
    - M·ªói 0.1% v∆∞·ª£t ng∆∞·ª°ng => tr·ª´ 0.02 ƒëi·ªÉm.
    - T·ªïng tr·ª´ t·ªëi ƒëa 3 ƒëi·ªÉm.
    - Tr·∫£ v·ªÅ (penalty_points, score10=10-penalty).
    """
    if actual_err is None:
        return 0.0, None
    exceed = max(0.0, actual_err - threshold_pct)
    steps = int(exceed // step_pct)  # b·∫≠c 0.1%
    penalty = min(max_penalty, steps * per_step_penalty)
    return penalty, max(0.0, 10.0 - penalty)

def compute_score_generic(plan, actual, weight):
    if plan in (None, 0) or actual is None:
        return None
    ratio = max(min(actual / plan, 2.0), 0.0)
    w = weight / 100.0 if weight and weight > 1 else (weight or 0.0)
    return round(ratio * 10 * w, 2)

def compute_score_with_method(row):
    plan = parse_float(row.get("K·∫ø ho·∫°ch"))
    actual = parse_float(row.get("Th·ª±c hi·ªán"))
    weight = parse_float(row.get("Tr·ªçng s·ªë")) or 0.0
    method = str(row.get("Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£") or "").strip().lower()

    # === NH√ÅNH KPI "sai s·ªë ‚â§ ¬±1,5%, c·ª© v∆∞·ª£t 0,1% tr·ª´ 0,02 ƒëi·ªÉm (t·ªëi ƒëa 3)" ===
    # K√≠ch ho·∫°t khi 'Ph∆∞∆°ng ph√°p ƒëo' ch·ª©a 'sai s·ªë' + '0,02' (ho·∫∑c 0.02)
    if ("sai s·ªë" in method or "sai so" in method) and ("0,02" in method or "0.02" in method):
        actual_err_pct = to_percent(row.get("Th·ª±c hi·ªán"))

        # Ng∆∞·ª°ng: c·ªë g·∫Øng ƒë·ªçc t·ª´ chu·ªói (s·ªë c√≥ , ho·∫∑c .), n·∫øu kh√¥ng d√πng Ng∆∞·ª°ng tr√™n, default 1.5
        threshold = 1.5
        m = re.search(r"(\d+)[\.,](\d+)", method)
        if m:
            try:
                threshold = float(m.group(1) + "." + m.group(2))
            except Exception:
                threshold = 1.5
        else:
            thr = parse_float(row.get("Ng∆∞·ª°ng tr√™n"))
            if thr is not None:
                threshold = thr

        penalty, base10 = kpi_penalty_error_method(
            actual_err=actual_err_pct,
            threshold_pct=threshold,
            step_pct=0.1,
            per_step_penalty=0.02,
            max_penalty=3.0,
        )
        w = weight / 100.0 if weight and weight > 1 else (weight or 0.0)
        return None if base10 is None else round(base10 * w, 2)

    # === C√°c ph∆∞∆°ng ph√°p chung kh√°c ===
    if not method:
        return compute_score_generic(plan, actual, weight)
    if plan in (None, 0) or actual is None:
        return None

    w = weight / 100.0 if weight and weight > 1 else (weight or 0.0)

    if any(k in method for k in ["tƒÉng", ">=", "cao h∆°n t·ªët", "increase", "higher"]):
        ratio = max(min(actual / plan, 2.0), 0.0)
        return round(ratio * 10 * w, 2)

    if any(k in method for k in ["gi·∫£m", "<=", "th·∫•p h∆°n t·ªët", "decrease", "lower"]):
        if actual <= plan:
            ratio = 1.0
        else:
            ratio = max(min(plan / actual, 2.0), 0.0)
        return round(ratio * 10 * w, 2)

    if any(k in method for k in ["ƒë·∫°t", "dat", "bool", "pass/fail"]):
        ok = actual >= plan
        return round((10.0 if ok else 0.0) * w, 2)

    if any(k in method for k in ["kho·∫£ng", "range", "trong kho·∫£ng"]):
        lo = parse_float(row.get("Ng∆∞·ª°ng d∆∞·ªõi"))
        hi = parse_float(row.get("Ng∆∞·ª°ng tr√™n"))
        if lo is None or hi is None:
            return compute_score_generic(plan, actual, weight)
        ok = lo <= actual <= hi
        return round((10.0 if ok else 0.0) * w, 2)

    return compute_score_generic(plan, actual, weight)

# ===== LOGIN =====
def find_use_worksheet(sh):
    try:
        return sh.worksheet("USE")
    except Exception:
        for ws in sh.worksheets():
            try:
                headers = [h.strip() for h in ws.row_values(1)]
            except Exception:
                continue
            if (
                ("USE (m√£ ƒëƒÉng nh·∫≠p)" in headers)
                or ("T√†i kho·∫£n (USE\\username)" in headers)
                or ("T√†i kho·∫£n" in headers)
                or ("Username" in headers)
                or ("USE" in headers)
            ) and ("M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh" in headers or "Password" in headers or "M·∫≠t kh·∫©u" in headers):
                return ws
        raise gspread.exceptions.WorksheetNotFound("Kh√¥ng t√¨m th·∫•y sheet USE.")

def load_users_df():
    sh = open_spreadsheet(st.session_state.get("spreadsheet_id", ""))
    ws = find_use_worksheet(sh)
    return normalize_columns(df_from_ws(ws))

def check_credentials(use_name: str, password: str) -> bool:
    df = load_users_df()
    if df.empty:
        return False
    col_use = next(
        (c for c in df.columns if c.strip().lower() in
         ["t√†i kho·∫£n (use\\username)", "t√†i kho·∫£n", "username", "use (m√£ ƒëƒÉng nh·∫≠p)", "use"]),
        None,
    )
    col_pw = next(
        (c for c in df.columns if c.strip().lower() in
         ["m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh", "password m·∫∑c ƒë·ªãnh", "password", "m·∫≠t kh·∫©u"]),
        None,
    )
    if not col_use or not col_pw:
        return False
    u = (use_name or "").strip().lower()
    p = (password or "").strip()
    row = df.loc[df[col_use].astype(str).str.strip().str.lower() == u]
    return (not row.empty) and (str(row.iloc[0][col_pw]).strip() == p)

# ===== Drive helpers =====
def get_drive_service():
    if gbuild is None:
        st.warning("Thi·∫øu g√≥i 'google-api-python-client' ƒë·ªÉ l√†m vi·ªác v·ªõi Google Drive.")
        return None
    gclient, creds = st.session_state.get("_gs_pair", (None, None))
    if creds is None:
        gclient, creds = get_gs_clients()
        st.session_state["_gs_pair"] = (gclient, creds)
    if creds is None:
        return None
    return gbuild("drive", "v3", credentials=creds)

def ensure_parent_ok(service, parent_id: str):
    try:
        service.files().get(fileId=parent_id, fields="id,name").execute()
    except HttpError as e:
        raise RuntimeError(
            f"Kh√¥ng truy c·∫≠p ƒë∆∞·ª£c th∆∞ m·ª•c g·ªëc (ID: {parent_id}). "
            "Ki·ªÉm tra: 1) ID/URL ƒë√∫ng, 2) ƒë√£ chia s·∫ª 'Editor' cho service account."
        ) from e

def ensure_folder(service, parent_id: str, name: str) -> str:
    ensure_parent_ok(service, parent_id)
    q = (
        "mimeType='application/vnd.google-apps.folder' "
        f"and name='{name}' and '{parent_id}' in parents and trashed=false"
    )
    res = service.files().list(
        q=q,
        spaces="drive",
        supportsAllDrives=True,
        includeItemsFromAllDrives=True,
        fields="files(id,name)",
    ).execute()
    items = res.get("files", [])
    if items:
        return items[0]["id"]
    file_metadata = {
        "name": name,
        "mimeType": "application/vnd.google-apps.folder",
        "parents": [parent_id],
    }
    folder = service.files().create(
        body=file_metadata, fields="id", supportsAllDrives=True
    ).execute()
    return folder["id"]

def find_file_in_folder(service, parent_id: str, name: str):
    q = (
        f"name='{name}' and '{parent_id}' in parents and "
        "mimeType!='application/vnd.google-apps.folder' and trashed=false"
    )
    res = service.files().list(
        q=q, spaces="drive", supportsAllDrives=True, includeItemsFromAllDrives=True,
        fields="files(id,name,mimeType)"
    ).execute()
    files = res.get("files", [])
    return files[0] if files else None

def upload_or_update(service, parent_id: str, filename: str, data: bytes, mime: str) -> str:
    media = MediaIoBaseUpload(io.BytesIO(data), mimetype=mime, resumable=False)
    existing = find_file_in_folder(service, parent_id, filename)
    if existing:
        f = service.files().update(
            fileId=existing["id"], media_body=media, supportsAllDrives=True, fields="id"
        ).execute()
        return f["id"]
    file_metadata = {"name": filename, "parents": [parent_id]}
    try:
        f = service.files().create(
            body=file_metadata, media_body=media, fields="id", supportsAllDrives=True
        ).execute()
        return f["id"]
    except HttpError as e:
        raise RuntimeError(
            "Service account kh√¥ng c√≥ quota ƒë·ªÉ t·∫°o file m·ªõi trong 'My Drive'. "
            "Khuy·∫øn ngh·ªã d√πng **Shared Drive**; ho·∫∑c t·∫°o s·∫µn file tr·ªëng c√πng t√™n r·ªìi l∆∞u l·∫°i ƒë·ªÉ app **UPDATE**."
        ) from e

# ===== SIDEBAR =====
with st.sidebar:
    st.header("üîí ƒêƒÉng nh·∫≠p")
    if "_user" not in st.session_state:
        with st.form("login_form", clear_on_submit=False):
            use_input = st.text_input("USE (vd: PCTN\\KVDHA)")
            pwd_input = st.text_input("M·∫≠t kh·∫©u", type="password")
            login_submit = st.form_submit_button("ƒêƒÉng nh·∫≠p", use_container_width=True)
        if login_submit:
            if check_credentials(use_input, pwd_input):
                st.session_state["_user"] = use_input.strip()
                toast("ƒêƒÉng nh·∫≠p th√†nh c√¥ng.", "‚úÖ")
                st.rerun()
            else:
                st.error("USE ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.")
    else:
        st.success(f"ƒêang ƒëƒÉng nh·∫≠p: **{st.session_state['_user']}**")

        st.subheader("üß© K·∫øt n·ªëi Google Sheets")
        st.text_input("ID/URL Google Sheet", key="spreadsheet_id")
        st.text_input("T√™n sheet KPI", key="kpi_sheet_name")

        st.subheader("üìÅ Th∆∞ m·ª•c l∆∞u b√°o c√°o (Drive)")
        st.text_input("ID/URL th∆∞ m·ª•c g·ªëc App_KPI", key="drive_root_id")
        st.caption("Khuy·∫øn ngh·ªã: d√πng **B·ªô nh·ªõ d√πng chung (Shared Drive)** ƒë·ªÉ tr√°nh l·ªói quota 403.")
        if st.button("üîß Chu·∫©n b·ªã th∆∞ m·ª•c b√°o c√°o", use_container_width=True):
            try:
                service = get_drive_service()
                if service is None:
                    st.stop()
                use_code = st.session_state["_user"].split("\\")[-1].upper()
                root_id = extract_drive_folder_id(st.session_state.get("drive_root_id") or APP_KPI_DRIVE_ROOT_ID_DEFAULT)
                folder_user = ensure_folder(service, root_id, use_code)
                folder_report = ensure_folder(service, folder_user, "B√°o c√°o KPI")
                st.session_state["_report_folder_id"] = folder_report
                toast(f"ƒê√£ s·∫µn s√†ng: /{use_code}/B√°o c√°o KPI", "‚úÖ")
            except Exception as e:
                st.error(f"L·ªói chu·∫©n b·ªã th∆∞ m·ª•c: {e}")

        if st.button("ƒêƒÉng xu·∫•t", use_container_width=True):
            st.session_state.pop("_user", None)
            st.session_state["_report_folder_id"] = ""
            toast("ƒê√£ ƒëƒÉng xu·∫•t.", "‚úÖ")
            st.rerun()

# ===== MAIN =====
st.title(APP_TITLE)
if "_user" not in st.session_state:
    st.info("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ l√†m vi·ªác.")
    st.stop()

KPI_COLS = [
    "T√™n ch·ªâ ti√™u (KPI)","ƒê∆°n v·ªã t√≠nh","K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Tr·ªçng s·ªë",
    "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch","Th√°ng","NƒÉm","Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£",
    "Ng∆∞·ª°ng d∆∞·ªõi","Ng∆∞·ª°ng tr√™n","ƒêi·ªÉm KPI","Ghi ch√∫","T√™n ƒë∆°n v·ªã"
]

def get_sheet_and_name():
    sid_cfg = st.session_state.get("spreadsheet_id","") or GOOGLE_SHEET_ID_DEFAULT
    sheet_name = st.session_state.get("kpi_sheet_name", KPI_SHEET_DEFAULT)
    sh = open_spreadsheet(sid_cfg)
    return sh, sheet_name

def write_kpi_to_sheet(sh, sheet_name: str, df: pd.DataFrame) -> bool:
    df = normalize_columns(df.copy())
    if "ƒêi·ªÉm KPI" not in df.columns:
        df["ƒêi·ªÉm KPI"] = df.apply(compute_score_with_method, axis=1)
    cols = [c for c in KPI_COLS if c in df.columns] + [c for c in df.columns if c not in KPI_COLS]
    data = [cols] + df[cols].fillna("").astype(str).values.tolist()
    try:
        try:
            ws = sh.worksheet(sheet_name)
            ws.clear()
        except Exception:
            ws = sh.add_worksheet(title=sheet_name, rows=len(data)+10, cols=max(12,len(cols)))
        ws.update(data, value_input_option="USER_ENTERED")
        return True
    except Exception as e:
        st.error(f"L∆∞u KPI th·∫•t b·∫°i: {e}")
        return False

# ===== UI: NH·∫¨P CSV + FORM TR√äN =====
st.subheader("‚¨ÜÔ∏è Nh·∫≠p CSV v√†o KPI")

with st.container(border=True):
    st.markdown("#### ‚úçÔ∏è Bi·ªÉu m·∫´u nh·∫≠p tay")

    if "_csv_form" not in st.session_state:
        st.session_state["_csv_form"] = {
            "T√™n ch·ªâ ti√™u (KPI)": "", "ƒê∆°n v·ªã t√≠nh": "", "K·∫ø ho·∫°ch": 0.0, "Th·ª±c hi·ªán": 0.0,
            "Tr·ªçng s·ªë": 0.0, "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch": "", "Th√°ng": str(datetime.now().month),
            "NƒÉm": str(datetime.now().year), "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£": "TƒÉng t·ªët h∆°n",
            "Ng∆∞·ª°ng d∆∞·ªõi":"", "Ng∆∞·ª°ng tr√™n":"", "Ghi ch√∫":"", "T√™n ƒë∆°n v·ªã":""
        }
    f = st.session_state["_csv_form"]

    # H1
    c0 = st.columns([2,1,1,1])
    with c0[0]:
        f["T√™n ch·ªâ ti√™u (KPI)"] = st.text_input("T√™n ch·ªâ ti√™u (KPI)", value=f["T√™n ch·ªâ ti√™u (KPI)"])
    with c0[1]:
        f["ƒê∆°n v·ªã t√≠nh"] = st.text_input("ƒê∆°n v·ªã t√≠nh", value=f["ƒê∆°n v·ªã t√≠nh"])
    with c0[2]:
        f["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"] = st.text_input("B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", value=f["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch"])
    with c0[3]:
        f["T√™n ƒë∆°n v·ªã"] = st.text_input("T√™n ƒë∆°n v·ªã", value=f["T√™n ƒë∆°n v·ªã"])

    # H2 (K·∫ø ho·∫°ch/Th·ª±c hi·ªán: ƒë·ªãnh d·∫°ng VN)
    c1 = st.columns(3)
    with c1[0]:
        plan_txt_default = format_vn_number(f.get("K·∫ø ho·∫°ch") or 0.0, 2)
        plan_txt = st.text_input("K·∫ø ho·∫°ch", value=plan_txt_default, key="plan_txt")
        plan_val = parse_vn_number(plan_txt)
        if plan_val is not None:
            f["K·∫ø ho·∫°ch"] = plan_val
    with c1[1]:
        actual_txt_default = format_vn_number(f.get("Th·ª±c hi·ªán") or 0.0, 2)
        actual_txt = st.text_input("Th·ª±c hi·ªán", value=actual_txt_default, key="actual_txt")
        actual_val = parse_vn_number(actual_txt)
        if actual_val is not None:
            f["Th·ª±c hi·ªán"] = actual_val
    with c1[2]:
        f["Tr·ªçng s·ªë"] = st.number_input("Tr·ªçng s·ªë (%)", value=float(f.get("Tr·ªçng s·ªë") or 0.0))

    # H3
    c2 = st.columns(3)
    with c2[0]:
        f["Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£"] = st.selectbox(
            "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£",
            options=["TƒÉng t·ªët h∆°n","Gi·∫£m t·ªët h∆°n","ƒê·∫°t/Kh√¥ng ƒë·∫°t","Trong kho·∫£ng"],
            index=["TƒÉng t·ªët h∆°n","Gi·∫£m t·ªët h∆°n","ƒê·∫°t/Kh√¥ng ƒë·∫°t","Trong kho·∫£ng"].index(
                f.get("Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£","TƒÉng t·ªët h∆°n")
            ) if f.get("Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£") in ["TƒÉng t·ªët h∆°n","Gi·∫£m t·ªët h∆°n","ƒê·∫°t/Kh√¥ng ƒë·∫°t","Trong kho·∫£ng"] else 0
        )
    with c2[1]:
        _row_tmp = {k:f.get(k) for k in f.keys()}
        _row_tmp["ƒêi·ªÉm KPI"] = compute_score_with_method(_row_tmp)
        st.metric("ƒêi·ªÉm KPI (t·ª± t√≠nh)", _row_tmp["ƒêi·ªÉm KPI"] if _row_tmp["ƒêi·ªÉm KPI"] is not None else "‚Äî")
    with c2[2]:
        f["Ghi ch√∫"] = st.text_input("Ghi ch√∫", value=f["Ghi ch√∫"])

    if f["Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£"] == "Trong kho·∫£ng":
        c3 = st.columns(2)
        with c3[0]:
            f["Ng∆∞·ª°ng d∆∞·ªõi"] = st.text_input("Ng∆∞·ª°ng d∆∞·ªõi", value=str(f.get("Ng∆∞·ª°ng d∆∞·ªõi") or ""))
        with c3[1]:
            f["Ng∆∞·ª°ng tr√™n"] = st.text_input("Ng∆∞·ª°ng tr√™n", value=str(f.get("Ng∆∞·ª°ng tr√™n") or ""))

    # H4
    c4 = st.columns(2)
    with c4[0]:
        f["Th√°ng"] = st.text_input("Th√°ng", value=str(f["Th√°ng"]))
    with c4[1]:
        f["NƒÉm"] = st.text_input("NƒÉm", value=str(f["NƒÉm"]))

    col_btn = st.columns([1,1,1,1,2])
    apply_clicked      = col_btn[0].button("√Åp d·ª•ng v√†o b·∫£ng CSV t·∫°m", type="primary", use_container_width=True)
    save_csv_clicked   = col_btn[1].button("üíæ Ghi CSV t·∫°m v√†o sheet KPI", use_container_width=True)
    refresh_clicked    = col_btn[2].button("üîÅ L√†m m·ªõi b·∫£ng CSV", use_container_width=True)
    export_clicked     = col_btn[3].button("üì§ Xu·∫•t b√°o c√°o (Excel/PDF)", use_container_width=True)
    save_drive_clicked = col_btn[4].button("‚òÅÔ∏è L∆∞u d·ªØ li·ªáu v√†o Google Drive", use_container_width=True)

# --- CSV ---
up = st.file_uploader("T·∫£i file CSV", type=["csv"])

if "_csv_cache" not in st.session_state:
    st.session_state["_csv_cache"] = pd.DataFrame(columns=KPI_COLS)

if up is not None:
    try:
        tmp = pd.read_csv(up)
    except Exception:
        up.seek(0)
        tmp = pd.read_csv(up, encoding="utf-8-sig")
    tmp = normalize_columns(tmp)
    if "ƒêi·ªÉm KPI" not in tmp.columns:
        tmp["ƒêi·ªÉm KPI"] = tmp.apply(compute_score_with_method, axis=1)
    st.session_state["_csv_cache"] = tmp

df_show = st.session_state["_csv_cache"].copy()
if "‚úì Ch·ªçn" not in df_show.columns:
    df_show.insert(0, "‚úì Ch·ªçn", False)

st.write("T√≠ch ch·ªçn m·ªôt d√≤ng ƒë·ªÉ n·∫°p d·ªØ li·ªáu l√™n bi·ªÉu m·∫´u ph√≠a tr√™n:")
df_edit = st.data_editor(
    df_show, use_container_width=True, hide_index=True, num_rows="dynamic", key="csv_editor"
)
st.session_state["_csv_cache"] = df_edit.drop(columns=["‚úì Ch·ªçn"], errors="ignore")

selected_rows = df_edit[df_edit["‚úì Ch·ªçn"] == True]
if not selected_rows.empty:
    row = selected_rows.iloc[0].drop(labels=["‚úì Ch·ªçn"], errors="ignore").to_dict()
    for k in [c for c in KPI_COLS if c in row]:
        st.session_state["_csv_form"][k] = row.get(k, st.session_state["_csv_form"].get(k))

# ---- H√ÄM √ÅP D·ª§NG FORM ‚Üí CSV ----
def apply_form_to_cache(update_selected=True):
    base = st.session_state["_csv_cache"].copy()
    new_row = {c: st.session_state["_csv_form"].get(c, "") for c in KPI_COLS}
    # √©p K·∫ø ho·∫°ch/Th·ª±c hi·ªán v·ªÅ s·ªë (t·ª´ text ƒë·ªãnh d·∫°ng VN)
    new_row["K·∫ø ho·∫°ch"] = parse_float(new_row.get("K·∫ø ho·∫°ch"))
    new_row["Th·ª±c hi·ªán"] = parse_float(new_row.get("Th·ª±c hi·ªán"))
    new_row["ƒêi·ªÉm KPI"] = compute_score_with_method(new_row)
    if update_selected and not selected_rows.empty:
        idx = selected_rows.index[0]
        for k, v in new_row.items():
            base.loc[idx, k] = v
    else:
        if str(new_row.get("T√™n ch·ªâ ti√™u (KPI)", "")).strip():
            base = pd.concat([base, pd.DataFrame([new_row])], ignore_index=True)
    st.session_state["_csv_cache"] = base

# ===== N√öT =====
if apply_clicked:
    apply_form_to_cache(update_selected=True)
    toast("ƒê√£ √°p d·ª•ng d·ªØ li·ªáu bi·ªÉu m·∫´u v√†o CSV t·∫°m.", "‚úÖ")
    st.rerun()

def generate_pdf_from_df(df: pd.DataFrame, title: str = "B√ÅO C√ÅO KPI") -> bytes:
    try:
        from reportlab.lib.pagesizes import A4, landscape
        from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
        from reportlab.lib import colors
        from reportlab.lib.units import cm
        from reportlab.lib.styles import getSampleStyleSheet
        buf = io.BytesIO()
        doc = SimpleDocTemplate(buf, pagesize=landscape(A4), rightMargin=20, leftMargin=20, topMargin=20, bottomMargin=20)
        styles = getSampleStyleSheet()
        story = [Paragraph(title, styles["Title"]), Spacer(1, 0.3*cm)]
        cols = list(df.columns)
        data = [cols] + df.fillna("").astype(str).values.tolist()
        t = Table(data, repeatRows=1)
        t.setStyle(TableStyle([
            ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
            ("GRID", (0,0), (-1,-1), 0.25, colors.grey),
            ("FONTSIZE", (0,0), (-1,-1), 8),
            ("ALIGN", (0,0), (-1,-1), "CENTER"),
        ]))
        story.append(t)
        doc.build(story)
        return buf.getvalue()
    except Exception:
        st.warning("Thi·∫øu g√≥i 'reportlab' ƒë·ªÉ xu·∫•t PDF.")
        return b""

if save_csv_clicked:
    try:
        apply_form_to_cache(update_selected=not selected_rows.empty)
        sh, sheet_name = get_sheet_and_name()
        ok = write_kpi_to_sheet(sh, sheet_name, st.session_state["_csv_cache"])
        if ok: toast(f"ƒê√£ ghi d·ªØ li·ªáu v√†o sheet '{sheet_name}'.", "‚úÖ")
    except Exception as e:
        st.error(f"L·ªói khi ghi Sheets: {e}")

if refresh_clicked:
    if "confirm_refresh" not in st.session_state:
        st.session_state["confirm_refresh"] = True
    else:
        st.session_state["confirm_refresh"] = not st.session_state["confirm_refresh"]

if st.session_state.get("confirm_refresh", False):
    with st.expander("‚ùì B·∫°n x√°c ƒë·ªãnh l√†m m·ªõi d·ªØ li·ªáu ch·ª©? (S·∫Ω m·∫•t nh·ªØng thay ƒë·ªïi ch∆∞a ghi)", expanded=True):
        c = st.columns(2)
        if c[0].button("C√≥, l√†m m·ªõi ngay", type="primary"):
            st.session_state["_csv_cache"] = pd.DataFrame(columns=KPI_COLS)
            st.session_state["confirm_refresh"] = False
            toast("ƒê√£ l√†m m·ªõi b·∫£ng CSV t·∫°m.", "‚úÖ")
            st.rerun()
        if c[1].button("Kh√¥ng, gi·ªØ nguy√™n d·ªØ li·ªáu"):
            st.session_state["confirm_refresh"] = False
            toast("ƒê√£ h·ªßy l√†m m·ªõi.", "‚ÑπÔ∏è")

if export_clicked:
    apply_form_to_cache(update_selected=not selected_rows.empty)
    buf_xlsx = io.BytesIO()
    with pd.ExcelWriter(buf_xlsx, engine="xlsxwriter") as writer:
        st.session_state["_csv_cache"].to_excel(writer, index=False, sheet_name="KPI")
    st.download_button(
        "‚¨áÔ∏è T·∫£i Excel b√°o c√°o", data=buf_xlsx.getvalue(), file_name="KPI_baocao.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    pdf_bytes = generate_pdf_from_df(st.session_state["_csv_cache"], title="B√ÅO C√ÅO KPI")
    if pdf_bytes:
        st.download_button("‚¨áÔ∏è T·∫£i PDF b√°o c√°o", data=pdf_bytes, file_name="KPI_baocao.pdf", mime="application/pdf")

if save_drive_clicked:
    try:
        apply_form_to_cache(update_selected=not selected_rows.empty)
        service = get_drive_service()
        if service is None:
            st.stop()
        use_code = st.session_state["_user"].split("\\")[-1].upper()
        folder_report = st.session_state.get("_report_folder_id") or ""
        root_raw = st.session_state.get("drive_root_id") or APP_KPI_DRIVE_ROOT_ID_DEFAULT
        root_id = extract_drive_folder_id(root_raw)

        if not folder_report:
            folder_user = ensure_folder(service, root_id, use_code)
            folder_report = ensure_folder(service, folder_user, "B√°o c√°o KPI")
            st.session_state["_report_folder_id"] = folder_report

        ts = datetime.now().strftime("%d-%m-%y")  # dd-mm-yy
        fname_xlsx = f"KPI_{ts}.xlsx"
        fname_pdf  = f"KPI_{ts}.pdf"

        buf_xlsx = io.BytesIO()
        with pd.ExcelWriter(buf_xlsx, engine="xlsxwriter") as writer:
            st.session_state["_csv_cache"].to_excel(writer, index=False, sheet_name="KPI")
        upload_or_update(service, folder_report, fname_xlsx, buf_xlsx.getvalue(),
                         "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

        pdf_bytes = generate_pdf_from_df(st.session_state["_csv_cache"], title=f"B√ÅO C√ÅO KPI ‚Äì {use_code}")
        if pdf_bytes:
            upload_or_update(service, folder_report, fname_pdf, pdf_bytes, "application/pdf")

        toast(f"ƒê√£ l∆∞u: /{use_code}/B√°o c√°o KPI/{fname_xlsx} & {fname_pdf}", "‚úÖ")
    except Exception as e:
        st.error(f"L·ªói l∆∞u Google Drive: {e}")
