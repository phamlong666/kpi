
# === UI UPGRADE: Title & Logo & Micro Interactions ===
st.markdown(
    """
    <style>
    .big-kpi-title { 
        font-size: 36px !important; 
        font-weight: 800; 
        letter-spacing: 0.2px;
        line-height: 1.2;
        margin: 6px 0 2px 0;
        color: #0F1E49;
        text-shadow: 0 0 1px rgba(0,0,0,0.04);
    }
    /* hi·ªáu ·ª©ng hover nh·∫π cho checkbox list */
    div[data-testid="stVerticalBlock"] label:hover { 
        filter: brightness(1.05);
        transform: translateX(2px);
        transition: all .15s ease-in-out;
    }
    /* Logo tr√≤n sang B√äN TR√ÅI */
    .floating-logo { 
        position: fixed; 
        left: 14px; top: 12px; 
        z-index: 1000; 
        width: 56px; height: 56px; object-fit: contain;
        box-shadow: 0 3px 12px rgba(0,0,0,0.10);
        border-radius: 50%;
        background: white;
        padding: 4px;
    }
    </style>
    """, 
    unsafe_allow_html=True
)

# Ph√≥ng to d√≤ng ti√™u ƒë·ªÅ c·ª• th·ªÉ n·∫øu c√≥
try:
    _html_title = '<div class="big-kpi-title">KPI ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a</div>'
    st.markdown(_html_title, unsafe_allow_html=True)
except Exception:
    pass

# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
from datetime import datetime
from io import BytesIO
import base64
import os
import unicodedata

# =============================
# C·∫§U H√åNH TRANG
# =============================
st.set_page_config(
    page_title="KPI Scorer ‚Äì ƒê·ªãnh H√≥a (Full Suite)",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# =============================
# H·∫∞NG S·ªê & H√ÄM D√ôNG CHUNG
# =============================
EXPECTED_KPI_COLS = [
    "T√™n ch·ªâ ti√™u (KPI)",          # 1
    "ƒê∆°n v·ªã t√≠nh",                 # 2
    "K·∫ø ho·∫°ch",                    # 3
    "Th·ª±c hi·ªán",                   # 4
    "Tr·ªçng s·ªë",                    # 5
    "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch",     # 6
    "Th√°ng",                       # 7
    "NƒÉm",                         # 8
    "ƒêi·ªÉm KPI",                    # 9 = (Th·ª±c hi·ªán/K·∫ø ho·∫°ch)√óTr·ªçng s·ªë (tr·ª´ KPI d·ª± b√°o)
]


def _safe_number(x, default=0.0):
    try:
        if x is None or x == "":
            return float(default)
        return float(x)
    except Exception:
        return float(default)


# --- C√îNG TH·ª®C CHUNG ---

def compute_kpi_score(thuc_hien, ke_hoach, trong_so):
    ke_hoach = _safe_number(ke_hoach, 0.0)
    thuc_hien = _safe_number(thuc_hien, 0.0)
    trong_so = _safe_number(trong_so, 0.0)
    if ke_hoach == 0:
        return 0.0
    return round((thuc_hien / ke_hoach) * trong_so, 4)


# --- KPI D·ª∞ B√ÅO T·ªîNG TH∆Ø∆†NG PH·∫®M (¬±1.5%; v∆∞·ª£t 0.1% tr·ª´ 0.04; tr·∫ßn 3ƒë) ---

def _kpi_sai_so_du_bao_diem(sai_so_percent, trong_so):
    sai_so = abs(_safe_number(sai_so_percent, 0.0))
    ts = min(_safe_number(trong_so, 0.0), 3.0)  # tr·∫ßn 3 ƒëi·ªÉm
    if sai_so <= 1.5:
        return ts
    vuot = sai_so - 1.5
    tru = (vuot / 0.1) * 0.04
    tru = min(tru, 3.0)
    return max(round(ts - tru, 4), 0.0)


def _is_du_bao_tong_thuong_pham(ten_chi_tieu: str) -> bool:
    if not ten_chi_tieu:
        return False
    s = ten_chi_tieu.strip().lower()
    return "d·ª± b√°o t·ªïng th∆∞∆°ng ph·∫©m" in s


def compute_kpi_score_dynamic(ten_chi_tieu, thuc_hien, ke_hoach, trong_so):
    # N·∫øu l√† KPI d·ª± b√°o ‚Üí thuc_hien coi l√† sai s·ªë (%) theo th√°ng
    if _is_du_bao_tong_thuong_pham(ten_chi_tieu):
        return _kpi_sai_so_du_bao_diem(thuc_hien, trong_so)
    return compute_kpi_score(thuc_hien, ke_hoach, trong_so)


def export_dataframe_to_excel(df: pd.DataFrame) -> bytes:
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name="KPI")
        workbook = writer.book
        worksheet = writer.sheets["KPI"]
        fmt = workbook.add_format({"text_wrap": True, "valign": "vcenter"})
        worksheet.set_column(0, len(df.columns)-1, 22, fmt)
    buffer.seek(0)
    return buffer.read()


# =============================
# LOGO TR√íN (ƒëa ngu·ªìn + m·∫∑c ƒë·ªãnh GitHub c·ªßa anh Long)
# =============================

def _detect_logo_bytes():
    """∆Øu ti√™n:
    1) secrets['ui']['logo_url'] ho·∫∑c secrets['logo_url']
    2) /mnt/data/logo.png
    3) ./assets/logo.png ho·∫∑c ./.streamlit/logo.png
    4) ENV LOGO_URL
    5) DEFAULT_LOGO_URL (GitHub c·ªßa anh Long)
    """
    DEFAULT_LOGO_URL = "https://raw.githubusercontent.com/phamlong666/kpi/main/logo_hinh_tron.png"
    try:
        ui = st.secrets.get("ui", {})
        logo_url = ui.get("logo_url") or st.secrets.get("logo_url")
        if logo_url:
            return f'<img class="floating-logo" src="{logo_url}" />', "secrets.logo_url"
    except Exception:
        pass
    for p in ["/mnt/data/logo.png", "./assets/logo.png", "./.streamlit/logo.png"]:
        if os.path.exists(p):
            try:
                with open(p, "rb") as f:
                    b64 = base64.b64encode(f.read()).decode()
                return f'<img class="floating-logo" src="data:image/png;base64,{b64}" />', p
            except Exception:
                pass
    env_logo = os.getenv("LOGO_URL")
    if env_logo:
        return f'<img class="floating-logo" src="{env_logo}" />', "env.LOGO_URL"
    if DEFAULT_LOGO_URL:
        return f'<img class="floating-logo" src="{DEFAULT_LOGO_URL}" />', "DEFAULT_LOGO_URL"
    return '<div class="floating-logo">üìä</div>', "fallback"


def _inject_ui_enhancements():
    logo_tag, _ = _detect_logo_bytes()
    css = """
    <style>
    .title-card{padding:14px 18px;border:1px solid #ececec;border-radius:12px;background:#fff;box-shadow:0 2px 8px rgba(0,0,0,0.04)}
    .title-card h1{margin:0;font-size:28px;line-height:1.25;font-weight:800;color:#0B5ED7;display:flex;align-items:center;gap:10px}
    .title-card .title-icon{font-size:26px;background:#0B5ED7;color:#fff;width:36px;height:36px;border-radius:50%;display:inline-flex;align-items:center;justify-content:center;box-shadow:0 2px 6px rgba(11,94,215,.35)}
    .title-card .subtitle{margin:6px 0 0 0;color:#444}
    .section-title{font-size:24px;font-weight:800;margin:6px 0 12px 0;color:#222}
    [data-testid="stDataFrame"] *,[data-testid="stDataEditor"] *,[data-testid="stDataEditorGrid"] *{font-size:20px !important}
    html, body, [data-testid="stAppViewContainer"] *{font-size:20px}
    .stTextInput>div>div>input,.stNumberInput input{font-size:19px !important}
    .stButton>button{font-size:18px !important}
    .floating-logo{position:fixed;right:16px;top:86px;width:76px;height:76px;border-radius:50%;box-shadow:0 6px 16px rgba(0,0,0,0.15);z-index:99999;background:#ffffffee;backdrop-filter:blur(4px);display:inline-block;object-fit:cover;text-align:center;line-height:76px;font-size:38px;animation:pop .6s ease-out;pointer-events:none}
    @keyframes pop{0%{transform:scale(.6);opacity:.2}100%{transform:scale(1);opacity:1}}
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)
    st.markdown(logo_tag, unsafe_allow_html=True)


# =============================
# GOOGLE SHEETS (t√πy ch·ªçn) & SESSION STATE
# =============================

def read_service_account_from_secrets():
    try:
        conf = st.secrets["google_service_account"]
    except Exception:
        try:
            conf = st.secrets["gdrive_service_account"]
        except Exception as e:
            raise RuntimeError("Kh√¥ng t√¨m th·∫•y google_service_account ho·∫∑c gdrive_service_account trong secrets.") from e
    conf = dict(conf)
    if "private_key" in conf and conf["private_key"]:
        # FIX: thay '\n' b·∫±ng xu·ªëng d√≤ng th·∫≠t (handle c·∫£ d·∫°ng ƒë√£ b·ªã escape)
        pk = str(conf["private_key"])
        conf["private_key"] = pk.replace("\\n", "\n")
        return conf
    if "private_key_b64" in conf and conf["private_key_b64"]:
        import base64
        decoded = base64.b64decode(conf["private_key_b64"]).decode("utf-8")
        conf["private_key"] = decoded.replace("\\n", "\n")
        return conf
    raise RuntimeError("Secrets thi·∫øu private_key ho·∫∑c private_key_b64.")


def get_gspread_client_if_possible():
    try:
        from oauth2client.service_account import ServiceAccountCredentials
        import gspread


    except Exception as e:
        return None, f"Thi·∫øu th∆∞ vi·ªán gspread/oauth2client: {e}"
    try:
        sa = read_service_account_from_secrets()
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(sa, scope)
        client = gspread.authorize(creds)
        return client, "ƒê√£ s·∫µn s√†ng k·∫øt n·ªëi Google Sheets."
    except Exception as e:
        return None, str(e)


def init_session_state():
    # B·∫£ng t·∫°m cho lu·ªìng CSV + form
    st.session_state.setdefault("kpi_rows", [])
    # State form th·ªß c√¥ng
    defaults = {
        'ten_kpi':'', 'dvt':'', 'ke_hoach':0.0, 'thuc_hien':0.0, 'trong_so':0.0,
        'bo_phan':'T·ªï Kinh doanh t·ªïng h·ª£p', 'thang':datetime.now().month, 'nam':datetime.now().year
    }
    for k, v in defaults.items():
        st.session_state.setdefault(k, v)
    # Google flags
    st.session_state.setdefault("connected", False)
    st.session_state.setdefault("connect_msg", "")
    # ‚úÖ L∆ØU TR·∫†NG TH√ÅI B·∫¢NG T·∫†M V·ªöI DF
    # N·∫øu DataFrame ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi. N·∫øu ƒë√£ t·ªìn t·∫°i, d√πng l·∫°i.
    if "temp_kpi_df" not in st.session_state:
        st.session_state.temp_kpi_df = pd.DataFrame(columns=["Ch·ªçn"] + EXPECTED_KPI_COLS)


# =============================
# SIDEBAR & HEADER
# =============================
init_session_state()

with st.sidebar:
    st.header("üîó K·∫øt n·ªëi")
    spreadsheet_id = st.text_input(
        "Spreadsheet ID",
        help=(
            "D√°n ID c·ªßa Google Sheets. V√≠ d·ª• t·ª´ URL:\n"
            "https://docs.google.com/spreadsheets/d/1AbCdEfGh.../edit#gid=0\n"
            "=> Spreadsheet ID l√† ph·∫ßn gi·ªØa /d/ v√† /edit"
        ),
    )
    nhom_cham = st.selectbox("Nh√≥m ch·∫•m", [1,2,3,4,5], index=1)
    email_nhan_bao_cao = st.text_input("Email nh·∫≠n b√°o c√°o", "phamlong666@gmail.com")

    st.markdown("---")
    st.caption("M·∫Øt N√¢u v·∫´n cho ph√©p **nh·∫≠p KPI th·ªß c√¥ng** k·ªÉ c·∫£ khi ch∆∞a k·∫øt n·ªëi Google.")

connected = False
connect_msg = ""
if spreadsheet_id:
    client, msg = get_gspread_client_if_possible()
    if client is None:
        connect_msg = f"Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c Google Sheets: {msg}"
        st.warning(connect_msg)
    else:
        connected = True
        connect_msg = "K·∫øt n·ªëi Google Sheets s·∫µn s√†ng."
        st.success(connect_msg)

st.session_state.connected = connected
st.session_state.connect_msg = connect_msg

_inject_ui_enhancements()
st.markdown(
    """
<div class="title-card">
  <h1><span class="title-icon">üìä</span><span class="title-text">KPI ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a</span></h1>
  <p class="subtitle">Lu·ªìng chu·∫©n: Upload CSV ‚Üí th√™m v√†o B·∫£ng t·∫°m ‚Üí ch·ªçn d√≤ng ‚Üí t·ª± n·∫°p l√™n Form nh·∫≠p ‚Üí t√≠nh ƒëi·ªÉm ngay.</p>
</div>
""",
    unsafe_allow_html=True,
)

# =============================
# 3) NH·∫¨P TH·ª¶ C√îNG KPI & XU·∫§T EXCEL (9 C·ªòT)
#    + N·∫†P CSV V√ÄO B·∫¢NG T·∫†M & CH·ªåN D√íNG ƒê·ªÇ N·∫†P L√äN FORM
# =============================
st.markdown("---")
st.markdown('<h2 class="section-title">3) Nh·∫≠p th·ªß c√¥ng KPI & Xu·∫•t Excel (9 c·ªôt)</h2>', unsafe_allow_html=True)

# ---- 3.a) UPLOAD CSV ‚Üí ƒê·ªî V√ÄO B·∫¢NG T·∫†M ----
with st.expander("N·∫°p CSV v√†o 'B·∫£ng t·∫°m'", expanded=False):
    up_csv = st.file_uploader(
        "T·∫£i file .csv (c√°c c·ªôt g·ª£i √Ω: 'T√™n ch·ªâ ti√™u (KPI)', 'ƒê∆°n v·ªã t√≠nh', 'K·∫ø ho·∫°ch (th√°ng)', 'Tr·ªçng s·ªë', 'B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch', 'Th√°ng', 'NƒÉm', 'Th·ª±c hi·ªán (th√°ng)')",
        type=["csv"],
        key="csv_to_temp",
    )
    if up_csv is not None:
        try:
            df_csv = pd.read_csv(up_csv)
            # √Ånh x·∫° linh ho·∫°t ‚Üí 9 c·ªôt chu·∫©n c·ªßa b·∫£ng t·∫°m
            def _map_row(r):
                name = r.get('T√™n ch·ªâ ti√™u (KPI)', r.get('Ten KPI', ''))
                dvt = r.get('ƒê∆°n v·ªã t√≠nh', r.get('Don vi tinh', ''))
                plan = r.get('K·∫ø ho·∫°ch (th√°ng)', r.get('K·∫ø ho·∫°ch', r.get('Ke hoach', 0)))
                actual = r.get('Th·ª±c hi·ªán (th√°ng)', r.get('Th·ª±c hi·ªán', r.get('Thuc hien', 0)))
                weight = r.get('Tr·ªçng s·ªë', r.get('Trong so', 0))
                dept = r.get('B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch', r.get('Bo phan', ''))
                month = r.get('Th√°ng', datetime.now().month)
                year = r.get('NƒÉm', datetime.now().year)
                score = compute_kpi_score_dynamic(name, actual, plan, weight)
                return {
                    "T√™n ch·ªâ ti√™u (KPI)": str(name or "").strip(),
                    "ƒê∆°n v·ªã t√≠nh": str(dvt or "").strip(),
                    "K·∫ø ho·∫°ch": _safe_number(plan, 0),
                    "Th·ª±c hi·ªán": _safe_number(actual, 0),
                    "Tr·ªçng s·ªë": _safe_number(weight, 0),
                    "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch": str(dept or "").strip(),
                    "Th√°ng": int(_safe_number(month, datetime.now().month)),
                    "NƒÉm": int(_safe_number(year, datetime.now().year)),
                    "ƒêi·ªÉm KPI": score,
                }
            added_rows = [_map_row(r) for _, r in df_csv.fillna("").iterrows()]
            added_df = pd.DataFrame(added_rows, columns=EXPECTED_KPI_COLS)
            added_df.insert(0, "Ch·ªçn", False)
            st.session_state.temp_kpi_df = pd.concat([st.session_state.temp_kpi_df, added_df], ignore_index=True)
            st.success(f"ƒê√£ th√™m {len(added_df)} d√≤ng v√†o B·∫£ng t·∫°m.")
        except Exception as e:
            st.error(f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c CSV: {e}")

# ---- 3.b) FORM TH·ª¶ C√îNG (g·∫Øn v·ªõi session_state ƒë·ªÉ n·∫°p t·ª´ b·∫£ng t·∫°m) ----
with st.form("kpi_input_form", clear_on_submit=False):
    c1, c2, c3 = st.columns([1.2, 1.2, 1])
    with c1:
        st.text_input("1) T√™n ch·ªâ ti√™u (KPI)", key='ten_kpi')
        st.text_input("2) ƒê∆°n v·ªã t√≠nh", key='dvt')
        st.number_input("3) K·∫ø ho·∫°ch", min_value=0.0, step=0.1, format="%.4f", key='ke_hoach')
    with c2:
        st.number_input("4) Th·ª±c hi·ªán", min_value=0.0, step=0.1, format="%.4f", key='thuc_hien')
        st.number_input("5) Tr·ªçng s·ªë", min_value=0.0, step=0.1, format="%.4f", key='trong_so')
    bo_phan_list = [
        "T·ªï K·∫ø ho·∫°ch k·ªπ thu·∫≠t",
        "T·ªï Kinh doanh t·ªïng h·ª£p",
        "T·ªï Qu·∫£n l√Ω t·ªïng h·ª£p 1",
        "T·ªï Qu·∫£n l√Ω t·ªïng h·ª£p 2",
        "T·ªï Tr·ª±c v·∫≠n h√†nh",
        "T·ªï Ki·ªÉm tra gi√°m s√°t mua b√°n ƒëi·ªán",
    ]
    st.selectbox("6) B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", bo_phan_list, index=bo_phan_list.index(st.session_state.get('bo_phan', bo_phan_list[1])) if st.session_state.get('bo_phan', None) in bo_phan_list else 1, key='bo_phan')
    with c3:
        st.selectbox("7) Th√°ng", list(range(1,13)), index=(st.session_state.get('thang', datetime.now().month)-1), key='thang')
        st.number_input("8) NƒÉm", min_value=2000, max_value=2100, value=st.session_state.get('nam', datetime.now().year), step=1, key='nam')
        st.metric("9) ƒêi·ªÉm KPI (xem tr∆∞·ªõc)", compute_kpi_score_dynamic(st.session_state['ten_kpi'], st.session_state['thuc_hien'], st.session_state['ke_hoach'], st.session_state['trong_so']))

    if st.form_submit_button("‚ûï Th√™m v√†o b·∫£ng t·∫°m"):
        new_row_data = {
            "Ch·ªçn": False,
            "T√™n ch·ªâ ti√™u (KPI)": st.session_state['ten_kpi'].strip(),
            "ƒê∆°n v·ªã t√≠nh": st.session_state['dvt'].strip(),
            "K·∫ø ho·∫°ch": _safe_number(st.session_state['ke_hoach'], 0.0),
            "Th·ª±c hi·ªán": _safe_number(st.session_state['thuc_hien'], 0.0),
            "Tr·ªçng s·ªë": _safe_number(st.session_state['trong_so'], 0.0),
            "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch": st.session_state['bo_phan'].strip(),
            "Th√°ng": int(st.session_state['thang']),
            "NƒÉm": int(st.session_state['nam']),
            "ƒêi·ªÉm KPI": compute_kpi_score_dynamic(st.session_state['ten_kpi'], st.session_state['thuc_hien'], st.session_state['ke_hoach'], st.session_state['trong_so']),
        }
        new_row_df = pd.DataFrame([new_row_data], columns=["Ch·ªçn"] + EXPECTED_KPI_COLS)
        st.session_state.temp_kpi_df = pd.concat([st.session_state.temp_kpi_df, new_row_df], ignore_index=True)
        st.success("ƒê√£ th√™m 1 d√≤ng KPI v√†o b·∫£ng t·∫°m.")

# ---- 3.c) B·∫¢NG T·∫†M: CH·ªåN D√íNG ‚Üí N·∫†P L√äN FORM & XU·∫§T EXCEL ----

# ---- 3.c) B·∫¢NG T·∫†M ‚Äî KPI One-Click (tick 100%) ----
st.markdown("### **B·∫£ng t·∫°m (One‚ÄëClick)** ‚Äì tick v√†o c√°c d√≤ng c·∫ßn x·ª≠ l√Ω")

df_tmp = st.session_state.get("temp_kpi_df", pd.DataFrame()).copy()
if df_tmp.empty:
    st.info("B·∫£ng t·∫°m ch∆∞a c√≥ d·ªØ li·ªáu.")
else:
    # ƒê·∫£m b·∫£o c·ªôt 'Ch·ªçn' t·ªìn t·∫°i & l√† bool
    if "Ch·ªçn" not in df_tmp.columns:
        df_tmp.insert(0, "Ch·ªçn", False)
    def _to_bool(v):
        if isinstance(v, bool): return v
        if v is None: return False
        if isinstance(v, (int,float)): 
            try: return bool(int(v))
            except: return False
        if isinstance(v, str): 
            return v.strip().lower() in ("true","1","x","yes","y","checked")
        return False
    df_tmp["Ch·ªçn"] = df_tmp["Ch·ªçn"].map(_to_bool).fillna(False)

    # L·ªçc nhanh theo tr·∫°ng th√°i ch·ªçn
    show_selected_only = st.toggle("üîé Ch·ªâ hi·ªÉn th·ªã c√°c d√≤ng ƒë√£ ch·ªçn", value=False, key="kpi_oneclick_filter")
    view_df = df_tmp[df_tmp["Ch·ªçn"]] if show_selected_only else df_tmp

    # Hi·ªÉn th·ªã b·∫£ng ƒë·ªçc-only, th√™m c·ªôt tr·∫°ng th√°i ‚úÖ/‚¨ú ƒë·ªÉ nh√¨n s∆∞·ªõng m·∫Øt
    view_df_display = view_df.copy()
    view_df_display.insert(0, "‚úì", view_df_display["Ch·ªçn"].map(lambda x: "‚úÖ" if x else "‚¨ú"))
    st.dataframe(
        view_df_display.drop(columns=["Ch·ªçn"], errors="ignore"),
        hide_index=True, use_container_width=True
    )

    # Checkbox ƒë·ªôc l·∫≠p t·ª´ng d√≤ng (CH·∫ÆC CH·∫ÆN tick ƒë∆∞·ª£c)
    with st.expander("üß© Ch·ªçn d√≤ng (One‚ÄëClick) ‚Äî Kh√¥ng ph·ª• thu·ªôc Data Editor", expanded=not show_selected_only):
        for i, row in df_tmp.iterrows():
            label = f"#{i+1} ‚Äì {row.get('T√™n ch·ªâ ti√™u (KPI)', 'KPI')}"
            key = f"oc_sel_{i}"
            checked = bool(row["Ch·ªçn"])
            new_val = st.checkbox(label, key=key, value=checked)
            if new_val != checked:
                df_tmp.at[i, "Ch·ªçn"] = bool(new_val)

    # Ghi l·∫°i v√†o session
    st.session_state.temp_kpi_df = df_tmp
