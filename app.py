from pathlib import Path

FINAL_APP = r'''# -*- coding: utf-8 -*-
"""
KPI App ‚Äì ƒê·ªãnh H√≥a (v2.3 FINAL)
- ƒêƒÉng nh·∫≠p b·∫Øt bu·ªôc: sau khi ƒëƒÉng nh·∫≠p ·∫©n h·∫≥n form, ch·ªâ c√≤n l·ªùi ch√†o + n√∫t ƒêƒÉng xu·∫•t.
- Qu√™n m·∫≠t kh·∫©u: sinh MK t·∫°m 10 k√Ω t·ª± -> c·∫≠p nh·∫≠t Google Sheet (tab USE, c·ªôt "M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh") -> g·ª≠i email t·ªõi phamlong666@gmail.com.
- ƒê·ªïi m·∫≠t kh·∫©u: ch√≠nh ch·ªß (c√≥ MK c≈©) ho·∫∑c Admin (kh√¥ng c·∫ßn MK c≈©) -> c·∫≠p nh·∫≠t Google Sheet -> g·ª≠i email x√°c nh·∫≠n.
- KPI: B·∫£ng KPI (l·ªçc, export), Nh·∫≠p CSV v√†o KPI, Qu·∫£n tr·ªã.
- ƒê√£ x·ª≠ l√Ω so kh·ªõp USE kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng, b·ªè kho·∫£ng tr·∫Øng th·ª´a.
"""
import re
import io
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import random
import string
import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials

# ================ C·∫§U H√åNH ================
st.set_page_config(page_title="KPI ‚Äì ƒê·ªãnh H√≥a", layout="wide")
APP_TITLE = "üìä KPI ‚Äì ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a"
GOOGLE_SHEET_ID_DEFAULT = "1nXFKJrn8oHwQgUzv5QYihoazYRhhS1PeN-xyo7Er2iM"
ADMIN_ACCOUNTS = {r"pctn\\admin", r"npc\\longph"}
FORGOT_TARGET_EMAIL = "phamlong666@gmail.com"  # c·ªë ƒë·ªãnh theo y√™u c·∫ßu

# ================ TI·ªÜN √çCH ================
def is_admin(username: str) -> bool:
    return bool(username) and username.strip().lower() in ADMIN_ACCOUNTS

def toast(msg, icon="‚ÑπÔ∏è"):
    try:
        st.toast(msg, icon=icon)
    except Exception:
        pass

def extract_sheet_id(text: str) -> str:
    if not text: return ""
    text = text.strip()
    m = re.search(r"/d/([a-zA-Z0-9-_]+)", text)
    return m.group(1) if m else text

def get_gs_client():
    try:
        svc = dict(st.secrets["gdrive_service_account"])
        if "private_key" in svc:
            svc["private_key"] = (
                svc["private_key"].replace("\\r\\n", "\\n")
                                   .replace("\\r", "\\n")
                                   .replace("\\\\n", "\\n")
            )
        scopes = ["https://www.googleapis.com/auth/spreadsheets",
                  "https://www.googleapis.com/auth/drive"]
        creds = Credentials.from_service_account_info(svc, scopes=scopes)
        return gspread.authorize(creds)
    except Exception as e:
        st.session_state["_gs_error"] = f"SECRETS_ERROR: {e}"
        return None

def open_spreadsheet(sid_or_url: str):
    sid = extract_sheet_id(sid_or_url or GOOGLE_SHEET_ID_DEFAULT) or GOOGLE_SHEET_ID_DEFAULT
    client = st.session_state.get("_gs_client") or get_gs_client()
    st.session_state["_gs_client"] = client
    if client is None:
        raise RuntimeError("no_client")
    return client.open_by_key(sid)

def df_from_ws(ws) -> pd.DataFrame:
    records = ws.get_all_records(expected_headers=ws.row_values(1))
    return pd.DataFrame(records)

# Chu·∫©n ho√° t√™n c·ªôt
ALIAS = {
    "USE (m√£ ƒëƒÉng nh·∫≠p)": [
        "USE (m√£ ƒëƒÉng nh·∫≠p)",
        r"T√†i kho·∫£n (USE\\username)",
        "T√†i kho·∫£n (USE/username)",
        "T√†i kho·∫£n", "Username", "USE", "User"
    ],
    "M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh": [
        "M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh","Password m·∫∑c ƒë·ªãnh","Password","M·∫≠t kh·∫©u","Mat khau mac dinh"
    ],
    # KPI
    "T√™n ch·ªâ ti√™u (KPI)": ["T√™n ch·ªâ ti√™u (KPI)","T√™n KPI","Ch·ªâ ti√™u"],
    "ƒê∆°n v·ªã t√≠nh": ["ƒê∆°n v·ªã t√≠nh","Unit"],
    "K·∫ø ho·∫°ch": ["K·∫ø ho·∫°ch","Plan","Target"],
    "Th·ª±c hi·ªán": ["Th·ª±c hi·ªán","Th·ª±c hi·ªán (th√°ng)","Actual (month)"],
    "Tr·ªçng s·ªë": ["Tr·ªçng s·ªë","Weight"],
    "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch": ["B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch","Ph·ª• tr√°ch"],
    "Th√°ng": ["Th√°ng","Month"],
    "NƒÉm": ["NƒÉm","Year"],
    "ƒêi·ªÉm KPI": ["ƒêi·ªÉm KPI","Score"],
    "Ghi ch√∫": ["Ghi ch√∫","Notes"],
    "T√™n ƒë∆°n v·ªã": ["T√™n ƒë∆°n v·ªã","ƒê∆°n v·ªã"],
}

def normalize_columns(df: pd.DataFrame) -> pd.DataFrame:
    if df is None or df.empty: return df
    cols_lower = {c.strip().lower(): c for c in df.columns}
    rename = {}
    for std, cands in ALIAS.items():
        if std in df.columns: continue
        for c in cands:
            key = c.strip().lower()
            if key in cols_lower:
                rename[cols_lower[key]] = std
                break
    if rename: df = df.rename(columns=rename)
    return df

def find_use_ws_and_cols(sh):
    """Tr·∫£ v·ªÅ (ws, idx_col_use, idx_col_pwd, headers)."""
    try:
        ws = sh.worksheet("USE")
    except Exception:
        ws = None
        for w in sh.worksheets():
            try:
                headers = [h.strip() for h in w.row_values(1)]
            except Exception:
                continue
            if (("USE (m√£ ƒëƒÉng nh·∫≠p)" in headers) or ("T√†i kho·∫£n (USE\\username)" in headers) or
                ("T√†i kho·∫£n" in headers) or ("Username" in headers) or ("USE" in headers)) and \
               ("M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh" in headers or "Password" in headers or "M·∫≠t kh·∫©u" in headers):
                ws = w; break
        if ws is None:
            raise gspread.exceptions.WorksheetNotFound("NO_USE_TAB")
    headers = [h.strip() for h in ws.row_values(1)]
    def find_idx(names):
        for name in names:
            if name in headers: return headers.index(name)+1
        return None
    idx_use = find_idx(["USE (m√£ ƒëƒÉng nh·∫≠p)", "T√†i kho·∫£n (USE\\username)", "T√†i kho·∫£n", "Username", "USE"])
    idx_pwd = find_idx(["M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh","Password","M·∫≠t kh·∫©u"])
    if not idx_use or not idx_pwd:
        raise RuntimeError("MISSING_USE_OR_PASS_COL")
    return ws, idx_use, idx_pwd, headers

def load_users(spreadsheet_id_or_url: str = "") -> pd.DataFrame:
    sid = extract_sheet_id(spreadsheet_id_or_url) or GOOGLE_SHEET_ID_DEFAULT
    client = get_gs_client()
    if client is not None and sid:
        try:
            sh = client.open_by_key(sid)
            ws, _, _, _ = find_use_ws_and_cols(sh)
            return df_from_ws(ws)
        except Exception as e:
            st.session_state["_gs_error"] = f"OPEN_ERROR: {e}"
    try:
        return pd.read_excel("USE.xlsx", sheet_name="USE")
    except Exception:
        return pd.DataFrame()

def check_credentials(df: pd.DataFrame, use_input: str, pwd_input: str) -> bool:
    if df is None or df.empty:
        st.error("Ch∆∞a t·∫£i ƒë∆∞·ª£c danh s√°ch ng∆∞·ªùi d√πng (USE).")
        return False
    df = normalize_columns(df)
    col_use = next((c for c in df.columns if c.strip().lower() in [
        "t√†i kho·∫£n (use\\username)".lower(), "t√†i kho·∫£n".lower(), "username".lower(), "use (m√£ ƒëƒÉng nh·∫≠p)".lower(), "use"
    ]), None)
    col_pw = next((c for c in df.columns if c.strip().lower() in [
        "m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh".lower(),"password m·∫∑c ƒë·ªãnh".lower(),"password".lower(),"m·∫≠t kh·∫©u".lower()
    ]), None)
    if not col_use or not col_pw:
        st.error("Thi·∫øu c·ªôt USE ho·∫∑c M·∫≠t kh·∫©u trong b·∫£ng USE.")
        return False
    u = (use_input or "").strip(); p = (pwd_input or "").strip()
    row = df.loc[df[col_use].astype(str).str.strip().str.lower() == u.lower()]
    if row.empty or str(row.iloc[0][col_pw]).strip() != p:
        st.error("USE ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng")
        return False
    return True

def generate_temp_password(n=10) -> str:
    chars = string.ascii_letters + string.digits
    return "".join(random.choice(chars) for _ in range(n))

def update_password_on_sheet(user_use: str, new_password: str, spreadsheet_id_or_url: str = "") -> dict:
    """C·∫≠p nh·∫≠t MK tr√™n sheet. Tr·∫£ v·ªÅ dict {'ok':bool, 'row':int|None, 'col_pwd':int|None, 'message':str}"""
    diag = {'ok': False, 'row': None, 'col_pwd': None, 'message': ""}
    try:
        sh = open_spreadsheet(spreadsheet_id_or_url or GOOGLE_SHEET_ID_DEFAULT)
        ws, idx_use, idx_pwd, headers = find_use_ws_and_cols(sh)
        values = ws.col_values(idx_use)
        row_number = None
        needle = str(user_use).strip().lower()
        for i, v in enumerate(values, start=1):
            if i == 1:  # header
                continue
            if str(v).strip().lower() == needle:
                row_number = i
                break
        if not row_number:
            diag['message'] = "Kh√¥ng t√¨m th·∫•y USE tr√™n sheet."
            return diag
        ws.update_cell(row_number, idx_pwd, new_password)
        diag.update({'ok': True, 'row': row_number, 'col_pwd': idx_pwd, 'message': "ƒê√£ c·∫≠p nh·∫≠t MK tr√™n sheet."})
        return diag
    except Exception as e:
        diag['message'] = f"L·ªói c·∫≠p nh·∫≠t sheet: {e}"
        return diag

def send_email(subject: str, body: str, to_email: str) -> dict:
    """G·ª≠i email; tr·∫£ dict {'ok':bool,'mode':'smtp|mock','message':str}"""
    try:
        user = st.secrets["email"]["EMAIL_USER"]
        pwd  = st.secrets["email"]["EMAIL_PASS"]
        server_name = st.secrets["email"].get("SMTP_SERVER", "smtp.gmail.com")
        port = int(st.secrets["email"].get("SMTP_PORT", 465))
    except Exception:
        toast("(Gi·∫£ l·∫≠p) ƒê√£ g·ª≠i email: " + subject, "‚úâÔ∏è")
        return {'ok': True, 'mode': 'mock', 'message': 'Gi·∫£ l·∫≠p g·ª≠i email (thi·∫øu secrets[email]).'}

    try:
        msg = MIMEMultipart()
        msg["Subject"] = subject
        msg["From"] = user
        msg["To"] = to_email
        msg.attach(MIMEText(body, "plain", "utf-8"))

        if port == 465:
            with smtplib.SMTP_SSL(server_name, port) as server:
                server.login(user, pwd)
                server.sendmail(user, [to_email], msg.as_string())
        else:
            with smtplib.SMTP(server_name, port) as server:
                server.starttls()
                server.login(user, pwd)
                server.sendmail(user, [to_email], msg.as_string())
        return {'ok': True, 'mode': 'smtp', 'message': 'ƒê√£ g·ª≠i email b·∫±ng SMTP.'}
    except Exception as e:
        return {'ok': False, 'mode': 'smtp', 'message': f"L·ªói g·ª≠i email: {e}"}

# ================ SIDEBAR (LOGIN/LOGOUT) ================
with st.sidebar:
    st.header("üîí ƒêƒÉng nh·∫≠p")

    if "_user" not in st.session_state:
        # Form ƒëƒÉng nh·∫≠p
        use_input = st.text_input("USE (vd: PCTN\\KVDHA)", key="login_use")
        pwd_input = st.text_input("M·∫≠t kh·∫©u", type="password", key="login_pwd")
        c1, c3 = st.columns([1,1])
        with c1:
            login_clicked = st.button("ƒêƒÉng nh·∫≠p", use_container_width=True, type="primary", key="btn_login")
        with c3:
            forgot_use = st.text_input("USE ƒë·ªÉ c·∫•p MK t·∫°m", key="forgot_use")
            forgot_clicked = st.button("Qu√™n m·∫≠t kh·∫©u", use_container_width=True, key="btn_forgot")

        if login_clicked:
            df_users = load_users(st.session_state.get("spreadsheet_id",""))
            if check_credentials(df_users, use_input, pwd_input):
                st.session_state["_user"] = use_input
                toast("Ch√†o m·ª´ng b·∫°n v√†o l√†m vi·ªác, ch√∫c b·∫°n lu√¥n vui v·∫ª nh√©! üåü", "‚úÖ")
                st.rerun()

        if forgot_clicked:
            u = (forgot_use or "").strip()
            if not u:
                toast("Nh·∫≠p USE tr∆∞·ªõc khi b·∫•m 'Qu√™n m·∫≠t kh·∫©u'.", "‚ùó")
            else:
                temp_pw = generate_temp_password(10)
                res_sheet = update_password_on_sheet(u, temp_pw, st.session_state.get("spreadsheet_id",""))
                subject = f"[KPI ƒê·ªãnh H√≥a] M·∫≠t kh·∫©u t·∫°m cho {u}"
                body = f"Ch√†o anh/ch·ªã,\n\nH·ªá th·ªëng KPI ƒë√£ t·∫°o m·∫≠t kh·∫©u t·∫°m cho t√†i kho·∫£n: {u}\nM·∫≠t kh·∫©u t·∫°m: {temp_pw}\n\nVui l√≤ng ƒëƒÉng nh·∫≠p v√† ƒë·ªïi m·∫≠t kh·∫©u ngay trong m·ª•c Qu·∫£n tr·ªã.\nTr√¢n tr·ªçng."
                res_mail = send_email(subject, body, FORGOT_TARGET_EMAIL)

                if res_sheet['ok'] and res_mail['ok']:
                    st.success(f"‚úÖ ƒê√É C·∫§P M·∫¨T KH·∫®U T·∫†M cho USE: {u}. (Sheet d√≤ng {res_sheet['row']}, c·ªôt MK {res_sheet['col_pwd']}; Email: {res_mail['mode']})")
                elif res_sheet['ok'] and not res_mail['ok']:
                    st.warning(f"MK t·∫°m ƒë√£ c·∫≠p nh·∫≠t tr√™n Sheet (d√≤ng {res_sheet['row']}), nh∆∞ng email l·ªói: {res_mail['message']}")
                elif not res_sheet['ok'] and res_mail['ok']:
                    st.warning(f"ƒê√É G·ª¨I EMAIL m·∫≠t kh·∫©u t·∫°m, nh∆∞ng c·∫≠p nh·∫≠t Sheet th·∫•t b·∫°i: {res_sheet['message']}")
                else:
                    st.error(f"Kh√¥ng c·∫•p ƒë∆∞·ª£c MK t·∫°m. L·ªói Sheet: {res_sheet['message']} | L·ªói email: {res_mail['message']}")

    else:
        # Sau khi ƒëƒÉng nh·∫≠p: KH√îNG hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p n·ªØa
        st.success("Ch√†o m·ª´ng b·∫°n v√†o l√†m vi·ªác, ch√∫c b·∫°n lu√¥n vui v·∫ª nh√©!")
        st.write(f"üë§ ƒêang ƒëƒÉng nh·∫≠p: **{st.session_state['_user']}**")
        logout_clicked = st.button("ƒêƒÉng xu·∫•t", use_container_width=True, key="btn_logout")
        if logout_clicked:
            st.session_state.pop("_user", None)
            toast("ƒê√£ ƒëƒÉng xu·∫•t.", "‚úÖ")
            st.rerun()

        # Qu·∫£n tr·ªã nhanh (c·∫•u h√¨nh Sheet) ch·ªâ hi·ªÉn th·ªã khi ƒë√£ ƒëƒÉng nh·∫≠p
        st.markdown("---")
        st.header("‚öôÔ∏è C·∫•u h√¨nh Sheet")
        sid_val = st.text_input("Google Sheet ID/URL", value=st.session_state.get("spreadsheet_id",""))
        st.session_state["spreadsheet_id"] = sid_val
        kpi_sheet_name = st.text_input("T√™n sheet KPI", value=st.session_state.get("kpi_sheet_name","KPI"))
        st.session_state["kpi_sheet_name"] = kpi_sheet_name

        # ƒê·ªïi m·∫≠t kh·∫©u (ch√≠nh ch·ªß)
        with st.expander("üîê ƒê·ªïi m·∫≠t kh·∫©u (Ch√≠nh ch·ªß)"):
            old_pw_me = st.text_input("M·∫≠t kh·∫©u hi·ªán t·∫°i", type="password", key="me_old")
            new_pw_me = st.text_input("M·∫≠t kh·∫©u m·ªõi", type="password", key="me_new")
            new_pw2_me = st.text_input("Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi", type="password", key="me_new2")
            me_change = st.button("C·∫≠p nh·∫≠t m·∫≠t kh·∫©u c·ªßa t√¥i", type="primary", key="me_change_btn")
            if me_change:
                df_users = load_users(st.session_state.get("spreadsheet_id",""))
                if not check_credentials(df_users, st.session_state["_user"], old_pw_me):
                    st.error("M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng.")
                elif not new_pw_me or new_pw_me != new_pw2_me:
                    st.error("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp.")
                else:
                    res_sheet = update_password_on_sheet(st.session_state["_user"], new_pw_me, st.session_state.get("spreadsheet_id",""))
                    if res_sheet['ok']:
                        st.success("‚úÖ ƒê√£ ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng (ƒë√£ c·∫≠p nh·∫≠t Google Sheet).")
                        try:
                            send_email("[KPI ƒê·ªãnh H√≥a] ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng",
                                       f"T√†i kho·∫£n {st.session_state['_user']} v·ª´a ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.",
                                       FORGOT_TARGET_EMAIL)
                        except Exception:
                            pass
                    else:
                        st.error(f"ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i: {res_sheet['message']}")

        # ƒê·ªïi m·∫≠t kh·∫©u cho user kh√°c (Admin)
        if is_admin(st.session_state["_user"]):
            with st.expander("üõ† ƒê·ªïi m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng (Admin)"):
                target_use = st.text_input("USE c·∫ßn ƒë·ªïi", value="", key="admin_target")
                new_pw_adm = st.text_input("M·∫≠t kh·∫©u m·ªõi", type="password", key="adm_new")
                apply_clicked = st.button("√Åp d·ª•ng", type="primary", key="adm_apply")
                if apply_clicked:
                    if not target_use or not new_pw_adm:
                        st.error("Nh·∫≠p ƒë·ªß USE v√† m·∫≠t kh·∫©u m·ªõi.")
                    else:
                        res_sheet = update_password_on_sheet(target_use, new_pw_adm, st.session_state.get("spreadsheet_id",""))
                        if res_sheet['ok']:
                            st.success(f"‚úÖ ƒê√£ ƒë·ªïi m·∫≠t kh·∫©u cho {target_use} (d√≤ng {res_sheet['row']}).")
                            try:
                                send_email("[KPI ƒê·ªãnh H√≥a] Admin ƒë·ªïi m·∫≠t kh·∫©u",
                                           f"Admin ƒë√£ ƒë·ªïi m·∫≠t kh·∫©u cho t√†i kho·∫£n {target_use}.",
                                           FORGOT_TARGET_EMAIL)
                            except Exception:
                                pass
                        else:
                            st.error(f"ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i: {res_sheet['message']}")

# ================ GATING CH√çNH ================
st.title(APP_TITLE)
if "_user" not in st.session_state:
    st.info("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ l√†m vi·ªác.")
    st.stop()

# ================ KPI CORE ================
KPI_COLS = ["T√™n ch·ªâ ti√™u (KPI)","ƒê∆°n v·ªã t√≠nh","K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Tr·ªçng s·ªë",
            "B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch","Th√°ng","NƒÉm","ƒêi·ªÉm KPI","Ghi ch√∫","T√™n ƒë∆°n v·ªã"]

def safe_float(x):
    try:
        s = str(x).replace(",",".")
        return float(s)
    except Exception:
        return None

def compute_score(row):
    plan = safe_float(row.get("K·∫ø ho·∫°ch"))
    actual = safe_float(row.get("Th·ª±c hi·ªán") or row.get("Th·ª±c hi·ªán (th√°ng)"))
    weight = safe_float(row.get("Tr·ªçng s·ªë")) or 0.0
    if plan in (None,0) or actual is None: return None
    ratio = max(min(actual/plan, 2.0), 0.0)
    w = weight/100.0 if weight and weight>1 else (weight or 0.0)
    return round(ratio*10*w, 2)

def read_kpi_from_sheet(sh, sheet_name: str):
    try:
        ws = sh.worksheet(sheet_name)
    except Exception:
        ws = None
        for w in sh.worksheets():
            hdr = [h.strip() for h in w.row_values(1)]
            if ("K·∫ø ho·∫°ch" in hdr) and ("Th·ª±c hi·ªán" in hdr or "Th·ª±c hi·ªán (th√°ng)" in hdr):
                ws = w; break
        if ws is None: return pd.DataFrame()
    df = df_from_ws(ws)
    df = normalize_columns(df)
    if "Th·ª±c hi·ªán (th√°ng)" in df.columns and "Th·ª±c hi·ªán" not in df.columns:
        df = df.rename(columns={"Th·ª±c hi·ªán (th√°ng)":"Th·ª±c hi·ªán"})
    if "ƒêi·ªÉm KPI" not in df.columns:
        df["ƒêi·ªÉm KPI"] = df.apply(compute_score, axis=1)
    return df

def write_kpi_to_sheet(sh, sheet_name: str, df: pd.DataFrame):
    df = df.copy()
    df = normalize_columns(df)
    if "Th·ª±c hi·ªán (th√°ng)" in df.columns and "Th·ª±c hi·ªán" not in df.columns:
        df = df.rename(columns={"Th·ª±c hi·ªán (th√°ng)":"Th·ª±c hi·ªán"})
    if "ƒêi·ªÉm KPI" not in df.columns:
        df["ƒêi·ªÉm KPI"] = df.apply(compute_score, axis=1)
    cols = [c for c in KPI_COLS if c in df.columns] + [c for c in df.columns if c not in KPI_COLS]
    data = [cols] + df[cols].fillna("").astype(str).values.tolist()
    try:
        try:
            ws = sh.worksheet(sheet_name)
            ws.clear()
        except Exception:
            ws = sh.add_worksheet(title=sheet_name, rows=len(data)+10, cols=max(12,len(cols)))
        ws.update(data, value_input_option="USER_ENTERED")
        return True
    except Exception as e:
        st.error(f"L∆∞u KPI th·∫•t b·∫°i: {e}")
        return False

def get_sheet_and_name():
    sid_cfg = st.session_state.get("spreadsheet_id","") or GOOGLE_SHEET_ID_DEFAULT
    sheet_name = st.session_state.get("kpi_sheet_name","KPI")
    sh = open_spreadsheet(sid_cfg)
    return sh, sheet_name

tab1, tab2 = st.tabs(["üìã B·∫£ng KPI","‚¨ÜÔ∏è Nh·∫≠p CSV v√†o KPI"])

with tab1:
    st.subheader("B·∫£ng KPI")
    try:
        sh, sheet_name = get_sheet_and_name()
        df_kpi = read_kpi_from_sheet(sh, sheet_name)
    except Exception as e:
        st.error(f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c KPI: {e}")
        df_kpi = pd.DataFrame()

    if not df_kpi.empty:
        months = ["T·∫•t c·∫£"] + sorted(df_kpi.get("Th√°ng", pd.Series(dtype=str)).dropna().astype(str).unique().tolist())
        years  = ["T·∫•t c·∫£"] + sorted(df_kpi.get("NƒÉm", pd.Series(dtype=str)).dropna().astype(str).unique().tolist())
        colf1, colf2, colf3 = st.columns([1,1,2])
        with colf1:
            m = st.selectbox("Th√°ng", options=months, index=0)
        with colf2:
            y = st.selectbox("NƒÉm", options=years, index=0)
        if m!="T·∫•t c·∫£" and "Th√°ng" in df_kpi.columns: df_kpi = df_kpi[df_kpi["Th√°ng"].astype(str)==str(m)]
        if y!="T·∫•t c·∫£" and "NƒÉm" in df_kpi.columns:   df_kpi = df_kpi[df_kpi["NƒÉm"].astype(str)==str(y)]

        if "T√™n ƒë∆°n v·ªã" in df_kpi.columns:
            units = ["T·∫•t c·∫£"] + sorted(df_kpi["T√™n ƒë∆°n v·ªã"].dropna().astype(str).unique().tolist())
            unit = st.selectbox("ƒê∆°n v·ªã", options=units, index=0)
            if unit!="T·∫•t c·∫£": df_kpi = df_kpi[df_kpi["T√™n ƒë∆°n v·ªã"].astype(str)==unit]

        if "ƒêi·ªÉm KPI" in df_kpi.columns:
            if st.checkbox("S·∫Øp x·∫øp theo ƒêi·ªÉm KPI (gi·∫£m d·∫ßn)", True):
                df_kpi = df_kpi.sort_values(by="ƒêi·ªÉm KPI", ascending=False)

        st.dataframe(df_kpi, use_container_width=True, hide_index=True)

        buf = io.BytesIO()
        with pd.ExcelWriter(buf, engine="xlsxwriter") as writer:
            df_kpi.to_excel(writer, sheet_name="KPI", index=False)
        st.download_button("‚¨áÔ∏è T·∫£i Excel", data=buf.getvalue(), file_name="KPI_export.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu KPI ho·∫∑c Admin ch∆∞a c·∫•u h√¨nh sheet.")

with tab2:
    st.subheader("Nh·∫≠p CSV v√†o KPI")
    st.caption("CSV g·ª£i √Ω c√°c c·ªôt: 'T√™n ch·ªâ ti√™u (KPI)', 'ƒê∆°n v·ªã t√≠nh', 'K·∫ø ho·∫°ch', 'Th·ª±c hi·ªán', 'Tr·ªçng s·ªë', 'B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch', 'Th√°ng', 'NƒÉm', 'Ghi ch√∫', 'T√™n ƒë∆°n v·ªã'.")
    up = st.file_uploader("T·∫£i file CSV", type=["csv"])
    if up is not None:
        try:
            df_csv = pd.read_csv(up)
        except Exception:
            up.seek(0)
            df_csv = pd.read_csv(up, encoding="utf-8-sig")
        df_csv = normalize_columns(df_csv)
        if "Th·ª±c hi·ªán (th√°ng)" in df_csv.columns and "Th·ª±c hi·ªán" not in df_csv.columns:
            df_csv = df_csv.rename(columns={"Th·ª±c hi·ªán (th√°ng)":"Th·ª±c hi·ªán"})
        if "ƒêi·ªÉm KPI" not in df_csv.columns:
            df_csv["ƒêi·ªÉm KPI"] = df_csv.apply(compute_score, axis=1)
        st.dataframe(df_csv, use_container_width=True, hide_index=True)

        save_clicked = st.button("üíæ Ghi v√†o sheet KPI", use_container_width=True, type="primary")
        if save_clicked:
            try:
                sh, sheet_name = get_sheet_and_name()
                ok = write_kpi_to_sheet(sh, sheet_name, df_csv)
                if ok: toast("ƒê√£ ghi d·ªØ li·ªáu CSV v√†o sheet KPI.", "‚úÖ")
            except Exception as e:
                st.error(f"L∆∞u th·∫•t b·∫°i: {e}")
'''

Path("/mnt/data/app.py").write_text(FINAL_APP, encoding="utf-8")
print("Wrote FINAL app.py v2.3 (~{} KB)".format(round(len(FINAL_APP.encode('utf-8'))/1024,1)))
