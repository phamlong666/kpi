import streamlit as st
import pandas as pd
import numpy as np
import io
import smtplib
from email.message import EmailMessage
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import base64

import gspread
from google.oauth2.service_account import Credentials
from gspread_dataframe import set_with_dataframe, get_as_dataframe

st.set_page_config(page_title="KPI Scorer ‚Äì ƒê·ªãnh H√≥a (Full Suite)", layout="wide", page_icon="üîê")

# ----- CSS + Logo -----
from pathlib import Path as _Path
_logo_path = _Path(__file__).parent / "assets" / "logo.png"
st.markdown('''
<style>
.brand-wrap{display:flex;align-items:center;gap:18px;padding:14px 18px;margin:8px 0 8px;
  border-radius:16px;border:1px solid rgba(245,158,11,.25);
  background: radial-gradient(900px circle at 0% -20%, rgba(245,158,11,.10), transparent 40%);}
.brand-wrap h1{font-size:28px;line-height:1.2;margin:0;}
.brand-wrap p{margin:2px 0 0;color:#6b7280}
.stButton>button{background:#f59e0b;color:white;border:0;border-radius:12px;padding:8px 14px}
.stButton>button:hover{filter:brightness(.95)}
</style>
''', unsafe_allow_html=True)
if _logo_path.exists():
    cA, cB = st.columns([1,10])
    with cA: st.image(str(_logo_path), width=64)
    with cB: st.markdown("<div class='brand-wrap'><div><h1>KPI ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a</h1><p>Full Suite ¬∑ Import linh ho·∫°t ¬∑ Nh·∫≠p tay ¬∑ B√°o c√°o & Email</p></div></div>", unsafe_allow_html=True)

# =====================
# Worksheet names
# =====================
WS_SOURCE = "ƒê·ªãnh H√≥a"      # danh m·ª•c g·ªëc (excel)
WS_KPI    = "KPI_DATA"      # d·ªØ li·ªáu KPI ch·∫•m theo th√°ng/b·ªô ph·∫≠n
WS_DEPTS  = "DEPARTMENTS"   # danh m·ª•c b·ªô ph·∫≠n
WS_TASKS  = "TASKS"         # danh m·ª•c c√¥ng vi·ªác (M√£ CV, t√™n...)
WS_EMPS   = "EMPLOYEES"     # CBCNV
WS_ASG    = "ASSIGNMENTS"   # ph√¢n c√¥ng c√¥ng vi·ªác cho c√° nh√¢n

# =====================
# Schemas
# =====================
EXPECTED_KPI_COLS = [
    "B·ªô ph·∫≠n","Vai tr√≤","Tr·ªçng s·ªë (%)",
    "Ph∆∞∆°ng ph√°p ƒëo","ƒê∆°n v·ªã t√≠nh","Ch·ªâ ti√™u (tham chi·∫øu)",
    "Th√°ng","NƒÉm","K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Ng∆∞·ª°ng/K·∫ø ho·∫°ch (%)",
    "Sai s·ªë (%)","B·∫≠c v∆∞·ª£t (0.1%)","B·∫≠c gi·∫£m (0.1%)","ƒêi·ªÉm c·ªông","ƒêi·ªÉm tr·ª´","K·∫øt qu·∫£ (r√≤ng)",
    "ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp","L√Ω do th∆∞·ªüng","ƒêi·ªÉm t·ªïng",
    "C·∫≠p nh·∫≠t l√∫c","M√£ CV"
]
EXPECTED_DEPT_COLS = ["B·ªô ph·∫≠n"]
EXPECTED_TASK_COLS = ["M√£ CV","T√™n c√¥ng vi·ªác/Nhi·ªám v·ª•","B·ªô ph·∫≠n","M√¥ t·∫£"]
EXPECTED_EMP_COLS  = ["M√£ NV","H·ªç v√† t√™n","Ch·ª©c danh","B·ªô ph·∫≠n","B·∫≠c th·ª£","H·ªá s·ªë l∆∞∆°ng","H·ªá s·ªë ph·ª• c·∫•p","Tr·∫°ng th√°i"]
EXPECTED_ASG_COLS  = ["M√£ CV","Ch·ªâ ti√™u (tham chi·∫øu)","B·ªô ph·∫≠n","Th√°ng","NƒÉm","M√£ NV","Vai tr√≤ (C√° nh√¢n)","Tr·ªçng s·ªë c√° nh√¢n (%)","ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp (CN)","L√Ω do th∆∞·ªüng (CN)","C·∫≠p nh·∫≠t l√∫c"]

DEFAULT_DEPTS = [
    "T·ªï K·∫ø ho·∫°ch k·ªπ thu·∫≠t",
    "T·ªï Kinh doanh t·ªïng h·ª£p",
    "T·ªï Qu·∫£n l√Ω t·ªïng h·ª£p 1",
    "T·ªï Qu·∫£n l√Ω t·ªïng h·ª£p 2",
    "T·ªï Tr·ª±c v·∫≠n h√†nh",
    "T·ªï Ki·ªÉm tra gi√°m s√°t mua b√°n ƒëi·ªán",
]

# =====================
# Helpers from both files, with name conflicts resolved
# =====================
def get_client():
    # Read secrets
    try:
        svc = dict(st.secrets["google_service_account"])
    except Exception:
        st.error("‚ùå Ch∆∞a c·∫•u h√¨nh secrets. T·∫°o .streamlit/secrets.toml v√† d√°n Service Account.")
        st.stop()

    # Support private_key_b64 (preferred) or private_key (fallback)
    if "private_key_b64" in svc and svc["private_key_b64"]:
        try:
            decoded = base64.b64decode(svc["private_key_b64"]).decode("utf-8")
            svc["private_key"] = decoded
        except Exception as e:
            st.error(f"‚ùå Gi·∫£i m√£ private_key_b64 l·ªói: {e}")
            st.stop()
    elif "private_key" in svc and svc["private_key"]:
        svc["private_key"] = svc["private_key"].replace("\\n", "\n")
    else:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y private_key_b64 hay private_key trong secrets.")
        st.stop()

    scopes = ["https://www.googleapis.com/auth/spreadsheets","https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(svc, scopes=scopes)
    return gspread.authorize(creds)

# This is a combined get_or_create_ws function
def get_or_create_ws(gc, spreadsheet_id, title, headers=None):
    sh = gc.open_by_key(spreadsheet_id)
    try:
        ws = sh.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = sh.add_worksheet(title=title, rows=3000, cols=80)
        if headers:
            ws.update("A1", [headers])
    return ws

# This is a combined load_ws_df function
def load_ws_df(ws, expected_cols=None):
    df = get_as_dataframe(ws, evaluate_formulas=True, header=0) or pd.DataFrame()
    df = df.dropna(how="all")
    if expected_cols:
        for c in expected_cols:
            if c not in df.columns:
                df[c] = None
        df = df[expected_cols]
    return df

# This is a combined save_ws_df function
def save_ws_df(ws, df):
    set_with_dataframe(ws, df, include_index=False, include_column_header=True, resize=True)

# This is a combined safe_float function
def safe_float(x):
    if x is None or (isinstance(x, float) and np.isnan(x)):
        return None
    try:
        if isinstance(x, str):
            x = x.replace(".", "").replace(",", ".")
        return float(x)
    except:
        return None

def compute_points(row, group):
    # Group weights (ƒê·ªãnh H√≥a = Nh√≥m 2)
    if group == 2:
        penalty_per_0_1 = 0.04
        bonus_per_0_1 = 0.30
    elif group == 1:
        penalty_per_0_1 = 0.02
        bonus_per_0_1 = 0.50
    else:
        penalty_per_0_1 = 0.05
        bonus_per_0_1 = 0.20
    max_penalty = 3.0
    max_bonus = 2.0

    unit = str(row.get("ƒê∆°n v·ªã t√≠nh") or "").strip()
    nguong = safe_float(row.get("Ng∆∞·ª°ng/K·∫ø ho·∫°ch (%)")) or 1.5
    ke_hoach = safe_float(row.get("K·∫ø ho·∫°ch"))
    thuc_hien = safe_float(row.get("Th·ª±c hi·ªán"))

    sai_so_pct = None
    if unit == "%":
        sai_so_pct = thuc_hien
    else:
        if ke_hoach not in (None, 0) and thuc_hien is not None:
            sai_so_pct = abs(thuc_hien - ke_hoach) / abs(ke_hoach) * 100.0

    bac = improve_bac = None
    diem_tru = diem_cong = 0.0
    if sai_so_pct is not None:
        over = max(0.0, sai_so_pct - nguong)
        improve = max(0.0, nguong - sai_so_pct)
        bac = int(np.floor(over / 0.1 + 1e-9))
        improve_bac = int(np.floor(improve / 0.1 + 1e-9))
        diem_tru = min(max_penalty, penalty_per_0_1 * bac)
        diem_cong = min(max_bonus, bonus_per_0_1 * improve_bac)

    bonus = safe_float(row.get("ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp")) or 0.0
    ket_qua = (diem_cong or 0) - (diem_tru or 0)
    diem_tong = ket_qua + bonus

    return pd.Series({
        "Sai s·ªë (%)": None if sai_so_pct is None else round(sai_so_pct, 3),
        "B·∫≠c v∆∞·ª£t (0.1%)": bac,
        "B·∫≠c gi·∫£m (0.1%)": improve_bac,
        "ƒêi·ªÉm c·ªông": None if diem_cong is None else round(diem_cong, 2),
        "ƒêi·ªÉm tr·ª´": None if diem_tru is None else round(diem_tru, 2),
        "K·∫øt qu·∫£ (r√≤ng)": round(ket_qua, 2),
        "ƒêi·ªÉm t·ªïng": round(diem_tong, 2)
    })

def flatten_dinh_hoa(df_raw):
    H0 = df_raw.iloc[0].astype(str).replace("nan","")
    H1 = df_raw.iloc[1].astype(str).replace("nan","")
    H2 = df_raw.iloc[2].astype(str).replace("nan","")
    ncol = df_raw.shape[1]
    final_cols = []
    for c in range(ncol):
        name = (H2.iloc[c] or H1.iloc[c] or H0.iloc[c])
        final_cols.append(str(name).strip() if name else f"Unnamed:{c}")
    body = df_raw.iloc[3:].copy()
    body.columns = final_cols
    body = body.dropna(axis=1, how='all')
    time_like = []
    for c in body.columns:
        cl = str(c).strip().lower()
        if cl in ["nƒÉm","qu√Ω i","qu√Ω ii","qu√Ω iii","qu√Ω iv"] or cl.startswith("th√°ng "):
            time_like.append(c)
    static_cols = [c for c in ["Ch·ªâ ti√™u","K√ç HI·ªÜU","K√Ω hi·ªáu","ƒê∆°n v·ªã t√≠nh","ƒêVT","Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£","ƒê∆°n v·ªã ch·ªß tr√¨"] if c in body.columns]
    values = body[time_like] if time_like else pd.DataFrame(index=body.index)
    flat = values.melt(ignore_index=False, var_name="K·ª≥", value_name="Gi√° tr·ªã").join(body[static_cols], how="left").reset_index(drop=True)
    flat = flat[flat["K·ª≥"].notna()]
    return flat

def send_email_smtp(to_email, subject, body, attachments=None):
    try:
        mail = st.secrets["smtp"]
        host = mail["host"]
        port = int(mail.get("port", 587))
        user = mail["user"]
        password = mail["password"]
        sender = mail.get("sender", user)
    except Exception:
        st.error("‚ùå Thi·∫øu c·∫•u h√¨nh SMTP trong secrets. ƒêi·ªÅn [smtp] host, port, user, password.")
        return False, "Missing SMTP secrets"

    msg = EmailMessage()
    msg["From"] = sender
    msg["To"] = to_email
    msg["Subject"] = subject
    msg.set_content(body)
    if attachments:
        for fname, bytes_data, mime in attachments:
            maintype, subtype = mime.split("/", 1)
            msg.add_attachment(bytes_data, maintype=maintype, subtype=subtype, filename=fname)
    try:
        with smtplib.SMTP(host, port) as server:
            server.starttls()
            server.login(user, password)
            server.send_message(msg)
        return True, "OK"
    except Exception as e:
        return False, str(e)


# =====================
# Main Application
# =====================
# The main application logic from app.py and app1.py is now combined
st.title("üßÆ KPI Scorer ‚Äì ƒê·ªãnh H√≥a (Full Suite)")

with st.sidebar:
    st.subheader("üîê K·∫øt n·ªëi")
    spreadsheet_id = st.text_input("Spreadsheet ID", value="", placeholder="1A2B3C...")
    group = st.selectbox("Nh√≥m ch·∫•m", options=[1,2,3], index=1, help="ƒê·ªãnh H√≥a thu·ªôc Nh√≥m 2.")
    default_to_email = st.text_input("Email nh·∫≠n b√°o c√°o", value="phamlong666@gmail.com")

if not spreadsheet_id:
    st.info("Nh·∫≠p Spreadsheet ID ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()

try:
    gc = get_client()
    ws_kpi  = get_or_create_ws(gc, spreadsheet_id, WS_KPI, headers=EXPECTED_KPI_COLS)
    ws_src  = get_or_create_ws(gc, spreadsheet_id, WS_SOURCE)
    ws_dept = get_or_create_ws(gc, spreadsheet_id, WS_DEPTS, headers=EXPECTED_DEPT_COLS)
    ws_task = get_or_create_ws(gc, spreadsheet_id, WS_TASKS, headers=EXPECTED_TASK_COLS)
    ws_emp  = get_or_create_ws(gc, spreadsheet_id, WS_EMPS, headers=EXPECTED_EMP_COLS)
    ws_asg  = get_or_create_ws(gc, spreadsheet_id, WS_ASG, headers=EXPECTED_ASG_COLS)
except Exception as e:
    st.error(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
    st.stop()

# Bootstrap departments
dept_df = load_ws_df(ws_dept, expected_cols=EXPECTED_DEPT_COLS)
if dept_df.empty:
    dept_df = pd.DataFrame({"B·ªô ph·∫≠n": DEFAULT_DEPTS})
    save_ws_df(ws_dept, dept_df)
dept_list = dept_df["B·ªô ph·∫≠n"].dropna().astype(str).tolist()
emp_df = load_ws_df(ws_emp, expected_cols=EXPECTED_EMP_COLS)
asg_df = load_ws_df(ws_asg, expected_cols=EXPECTED_ASG_COLS)
all_kpi = load_ws_df(ws_kpi, expected_cols=EXPECTED_KPI_COLS)

# ====== Excel sync (from app.py)
st.header("0) ƒê·ªìng b·ªô t·ª´ Excel 'ƒê·ªãnh H√≥a'")
up = st.file_uploader("Ch·ªçn file Excel g·ªëc (sheet 'ƒê·ªãnh H√≥a')", type=["xlsx"], key="sync")
colA, colB, colC, colD = st.columns([1,1,1,2])
with colA:
    sync_dept = st.selectbox("G√°n B·ªô ph·∫≠n", options=dept_list)
with colB:
    sync_role = st.selectbox("Vai tr√≤", options=["Ch√≠nh","Ph·ª•"], index=0)
with colC:
    sync_weight = st.number_input("Tr·ªçng s·ªë (%)", min_value=0.0, max_value=100.0, value=100.0, step=5.0)
with colD:
    st.caption("App s·∫Ω g√°n c√°c thu·ªôc t√≠nh n√†y cho d·ªØ li·ªáu import (s·ª≠a l·∫°i sau n·∫øu c·∫ßn).")
colE, colF = st.columns(2)
with colE:
    sync_month = st.number_input("Th√°ng", min_value=1, max_value=12, value=1, step=1, key="sync_month")
with colF:
    sync_year = st.number_input("NƒÉm", min_value=2000, max_value=2100, value=datetime.now().year, step=1, key="sync_year")
overwrite = st.checkbox("Ghi ƒë√® KPI_DATA c·ªßa B·ªô ph·∫≠n/Th√°ng/NƒÉm n√†y", value=False)

if up and st.button("üîÅ ƒê·ªìng b·ªô t·ª´ Excel ‚Üí KPI_DATA"):
    try:
        xls = pd.ExcelFile(up)
        sheet = "ƒê·ªãnh H√≥a" if "ƒê·ªãnh H√≥a" in xls.sheet_names else xls.sheet_names[0]
        raw = pd.read_excel(xls, sheet_name=sheet, header=None)
        flat = flatten_dinh_hoa(raw)
        
        chi_tieu_col = "Ch·ªâ ti√™u" if "Ch·ªâ ti√™u" in flat.columns else None
        dvt_col = "ƒê∆°n v·ªã t√≠nh" if "ƒê∆°n v·ªã t√≠nh" in flat.columns else ("ƒêVT" if "ƒêVT" in flat.columns else None)
        phuong_phap_col = "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£" if "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£" in flat.columns else None
        
        imp = pd.DataFrame({
            "B·ªô ph·∫≠n": sync_dept,
            "Vai tr√≤": sync_role,
            "Tr·ªçng s·ªë (%)": sync_weight,
            "Ph∆∞∆°ng ph√°p ƒëo": flat[phuong_phap_col] if phuong_phap_col else "",
            "ƒê∆°n v·ªã t√≠nh": flat[dvt_col] if dvt_col else "",
            "Ch·ªâ ti√™u (tham chi·∫øu)": flat[chi_tieu_col] if chi_tieu_col else "",
            "Th√°ng": int(sync_month),
            "NƒÉm": int(sync_year),
            "K·∫ø ho·∫°ch": None,
            "Th·ª±c hi·ªán": flat["Gi√° tr·ªã"],
            "Ng∆∞·ª°ng/K·∫ø ho·∫°ch (%)": 1.5,
            "Sai s·ªë (%)": None,
            "B·∫≠c v∆∞·ª£t (0.1%)": None,
            "B·∫≠c gi·∫£m (0.1%)": None,
            "ƒêi·ªÉm c·ªông": None,
            "ƒêi·ªÉm tr·ª´": None,
            "K·∫øt qu·∫£ (r√≤ng)": None,
            "ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp": 0,
            "L√Ω do th∆∞·ªüng": "",
            "ƒêi·ªÉm t·ªïng": None,
            "C·∫≠p nh·∫≠t l√∫c": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "M√£ CV": None
        })
        imp = imp[EXPECTED_KPI_COLS]
        
        data_df = load_ws_df(ws_kpi, expected_cols=EXPECTED_KPI_COLS)
        if overwrite:
            mask = (data_df["B·ªô ph·∫≠n"] != sync_dept) | (data_df["Th√°ng"] != sync_month) | (data_df["NƒÉm"] != sync_year)
            data_df = data_df[mask]
        
        final_df = pd.concat([data_df, imp], ignore_index=True)
        final_df = final_df.apply(lambda row: compute_points(row, group) if pd.notna(row['Th·ª±c hi·ªán']) else row, axis=1)
        
        save_ws_df(ws_kpi, final_df)
        st.success("‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng!")

    except Exception as e:
        st.error(f"‚ùå L·ªói: {e}")

# ====== Manual input (from app.py)
st.header("1) Nh·∫≠p KPI th·ªß c√¥ng")
st.caption("Nh·∫≠p KPI c·ªßa m·ªôt th√°ng v√† t√≠nh ƒëi·ªÉm")
with st.expander("üìù Nh·∫≠p KPI", expanded=False):
    dept_kpi_options = ["- Ch·ªçn B·ªô ph·∫≠n -"] + dept_list
    dept_kpi = st.selectbox("B·ªô ph·∫≠n", options=dept_kpi_options, index=0, key="dept_kpi_select")
    col1, col2 = st.columns(2)
    with col1:
        month_kpi = st.number_input("Th√°ng", min_value=1, max_value=12, value=datetime.now().month, step=1, key="kpi_month")
    with col2:
        year_kpi = st.number_input("NƒÉm", min_value=2000, max_value=2100, value=datetime.now().year, step=1, key="kpi_year")

    if dept_kpi != "- Ch·ªçn B·ªô ph·∫≠n -":
        kpi_data = all_kpi[(all_kpi["B·ªô ph·∫≠n"] == dept_kpi) & (all_kpi["Th√°ng"] == month_kpi) & (all_kpi["NƒÉm"] == year_kpi)].copy()
        
        if kpi_data.empty:
            st.info("Ch∆∞a c√≥ KPI cho b·ªô ph·∫≠n n√†y.")
        else:
            edited_kpi_df = st.data_editor(
                kpi_data,
                column_config={
                    "B·ªô ph·∫≠n": st.column_config.SelectboxColumn("B·ªô ph·∫≠n", options=dept_list),
                    "Vai tr√≤": st.column_config.SelectboxColumn("Vai tr√≤", options=["Ch√≠nh", "Ph·ª•"]),
                    "Tr·ªçng s·ªë (%)": st.column_config.NumberColumn("Tr·ªçng s·ªë (%)", format="%.2f", min_value=0.0, max_value=100.0),
                    "Th√°ng": st.column_config.NumberColumn("Th√°ng", min_value=1, max_value=12),
                    "NƒÉm": st.column_config.NumberColumn("NƒÉm", min_value=2000, max_value=2100),
                    "K·∫ø ho·∫°ch": st.column_config.NumberColumn("K·∫ø ho·∫°ch"),
                    "Th·ª±c hi·ªán": st.column_config.NumberColumn("Th·ª±c hi·ªán"),
                    "Ng∆∞·ª°ng/K·∫ø ho·∫°ch (%)": st.column_config.NumberColumn("Ng∆∞·ª°ng/K·∫ø ho·∫°ch (%)", format="%.2f", min_value=0.0, max_value=200.0),
                    "ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp": st.column_config.NumberColumn("ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp"),
                    "L√Ω do th∆∞·ªüng": st.column_config.TextColumn("L√Ω do th∆∞·ªüng", max_chars=200),
                    "ƒêi·ªÉm t·ªïng": st.column_config.NumberColumn("ƒêi·ªÉm t·ªïng", disabled=True),
                    "C·∫≠p nh·∫≠t l√∫c": st.column_config.DatetimeColumn("C·∫≠p nh·∫≠t l√∫c", format="YYYY-MM-DD HH:mm:ss", disabled=True),
                },
                use_container_width=True,
                num_rows="dynamic"
            )
            
            if st.button("üíæ C·∫≠p nh·∫≠t KPI"):
                edited_kpi_df["C·∫≠p nh·∫≠t l√∫c"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                edited_kpi_df = edited_kpi_df.apply(lambda row: compute_points(row, group) if pd.notna(row['Th·ª±c hi·ªán']) else row, axis=1)
                
                # Update the full all_kpi dataframe
                kpi_mask = (all_kpi["B·ªô ph·∫≠n"] == dept_kpi) & (all_kpi["Th√°ng"] == month_kpi) & (all_kpi["NƒÉm"] == year_kpi)
                all_kpi = all_kpi[~kpi_mask]
                all_kpi = pd.concat([all_kpi, edited_kpi_df], ignore_index=True)
                
                save_ws_df(ws_kpi, all_kpi)
                st.success("‚úÖ C·∫≠p nh·∫≠t KPI th√†nh c√¥ng!")
                st.experimental_rerun()

# ====== Individual KPI Report (from app1.py)
st.header("2) B√°o c√°o KPI c√° nh√¢n")
st.caption("T·ªïng h·ª£p v√† b√°o c√°o ƒëi·ªÉm KPI c√° nh√¢n")
rep_month = st.selectbox("Th√°ng", list(range(1, 13)), index=datetime.now().month - 1)
rep_year = st.selectbox("NƒÉm", list(range(2020, datetime.now().year + 1)), index=datetime.now().year - 2020)

has_code_kpi = all_kpi["M√£ CV"].notna() & (all_kpi["M√£ CV"].astype(str).str.strip() != "")
kpi_with_code = all_kpi[has_code_kpi][["B·ªô ph·∫≠n","Ch·ªâ ti√™u (tham chi·∫øu)","Th√°ng","NƒÉm","M√£ CV","ƒêi·ªÉm t·ªïng"]].copy()
kpi_without_code = all_kpi[~has_code_kpi][["B·ªô ph·∫≠n","Ch·ªâ ti√™u (tham chi·∫øu)","Th√°ng","NƒÉm","ƒêi·ªÉm t·ªïng"]].copy()

has_code_asg = asg_df["M√£ CV"].notna() & (asg_df["M√£ CV"].astype(str).str.strip() != "")

merged = pd.DataFrame(columns=list(asg_df.columns) + ["ƒêi·ªÉm t·ªïng"])
if has_code_asg.any():
    merged = pd.concat([merged, asg_df[has_code_asg].merge(kpi_with_code.dropna(subset=["M√£ CV"]), on=["M√£ CV", "Th√°ng", "NƒÉm"], how="left")], ignore_index=True)
no_code_asg = ~has_code_asg
if no_code_asg.any():
    merged = pd.concat([merged, asg_df[no_code_asg].merge(kpi_without_code, on=["B·ªô ph·∫≠n","Ch·ªâ ti√™u (tham chi·∫øu)","Th√°ng","NƒÉm"], how="left")], ignore_index=True)

mask_rep = (merged["NƒÉm"] == rep_year) & (merged["Th√°ng"] == rep_month)
merged = merged[mask_rep].copy()
merged["Tr·ªçng s·ªë c√° nh√¢n (%)"] = pd.to_numeric(merged["Tr·ªçng s·ªë c√° nh√¢n (%)"], errors="coerce").fillna(0)
merged["ƒêi·ªÉm t·ªïng"] = pd.to_numeric(merged["ƒêi·ªÉm t·ªïng"], errors="coerce").fillna(0)
merged["ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp (CN)"] = pd.to_numeric(merged["ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp (CN)"], errors="coerce").fillna(0)

merged["ƒêi·ªÉm KPI c√° nh√¢n"] = merged["ƒêi·ªÉm t·ªïng"] * merged["Tr·ªçng s·ªë c√° nh√¢n (%)"] / 100 + merged["ƒêi·ªÉm th∆∞·ªüng tr·ª±c ti·∫øp (CN)"]
merged["ƒêi·ªÉm KPI c√° nh√¢n"] = merged["ƒêi·ªÉm KPI c√° nh√¢n"].apply(lambda x: round(x, 2))

per_person = merged.groupby("M√£ NV").agg({
    "ƒêi·ªÉm KPI c√° nh√¢n": "sum",
    "Tr·ªçng s·ªë c√° nh√¢n (%)": "sum"
}).reset_index()

per_person = per_person.merge(emp_df[["M√£ NV", "H·ªç v√† t√™n", "B·ªô ph·∫≠n"]], on="M√£ NV", how="left")
per_person = per_person.sort_values(by="ƒêi·ªÉm KPI c√° nh√¢n", ascending=False).reset_index(drop=True)

st.subheader(f"T·ªïng h·ª£p KPI c√° nh√¢n th√°ng {rep_month:02d}/{rep_year}")
st.dataframe(per_person, use_container_width=True)

# ====== Charts (from app1.py)
st.subheader("Bi·ªÉu ƒë·ªì KPI c√° nh√¢n")
show_labels = st.checkbox("Hi·ªÉn th·ªã nh√£n gi√° tr·ªã", value=True)
top_n = st.slider("Top N nh√¢n vi√™n", min_value=1, max_value=len(per_person) or 1, value=min(10, len(per_person) or 1))
top_df = per_person.head(top_n).sort_values(by="ƒêi·ªÉm KPI c√° nh√¢n", ascending=True)

if not top_df.empty:
    fig1, ax1 = plt.subplots()
    ax1.barh(top_df["H·ªç v√† t√™n"], top_df["ƒêi·ªÉm KPI c√° nh√¢n"], color="#f59e0b")
    ax1.set_title(f"Top {top_n} KPI c√° nh√¢n ‚Äì {rep_month:02d}/{rep_year}")
    ax1.set_xlabel("ƒêi·ªÉm")
    if show_labels:
        for i, v in enumerate(top_df["ƒêi·ªÉm KPI c√° nh√¢n"]):
            ax1.text(v, i, f"{v:.2f}", va="center", ha="left", fontsize=8)
    st.pyplot(fig1)
else:
    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu KPI c√° nh√¢n cho k·ª≥ n√†y.")

bottom_n = st.slider("Bottom N nh√¢n vi√™n", min_value=1, max_value=len(per_person) or 1, value=min(10, len(per_person) or 1))
bot_df = per_person.tail(bottom_n).sort_values(by="ƒêi·ªÉm KPI c√° nh√¢n", ascending=False)
if not bot_df.empty:
    fig2, ax2 = plt.subplots(figsize=(10, 6))
    ax2.bar(bot_df["H·ªç v√† t√™n"], bot_df["ƒêi·ªÉm KPI c√° nh√¢n"], color="#dc2626")
    ax2.set_title(f"Bottom {bottom_n} KPI c√° nh√¢n ‚Äì {rep_month:02d}/{rep_year}")
    ax2.set_xticks(range(len(bot_df)))
    ax2.set_xticklabels(bot_df["H·ªç v√† t√™n"], rotation=20, ha="right")
    ax2.set_ylabel("ƒêi·ªÉm")
    if show_labels:
        for i, v in enumerate(bot_df["ƒêi·ªÉm KPI c√° nh√¢n"]):
            ax2.text(i, v, f"{v:.2f}", ha="center", va="bottom", fontsize=8)
    st.pyplot(fig2)
else:
    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu KPI c√° nh√¢n cho k·ª≥ n√†y.")

# ====== Excel and Email (from app1.py)
excel_buf = io.BytesIO()
with pd.ExcelWriter(excel_buf, engine="xlsxwriter") as writer:
    merged.to_excel(writer, sheet_name="DETAIL_ASSIGN", index=False)
    per_person.to_excel(writer, sheet_name="KPI_PERSON", index=False)
excel_bytes = excel_buf.getvalue()

st.download_button("‚¨áÔ∏è T·∫£i Excel KPI c√° nh√¢n", data=excel_bytes, file_name=f"KPI_canhan_{rep_year}_{rep_month:02d}.xlsx")

to_addr = st.text_input("G·ª≠i t·ªõi (email)", value=default_to_email)
subject = f"B√°o c√°o KPI c√° nh√¢n {rep_month:02d}/{rep_year}"
body = f"ƒê√≠nh k√®m b√°o c√°o KPI c√° nh√¢n th√°ng {rep_month:02d}/{rep_year}. G·ªìm t·ªïng h·ª£p v√† chi ti·∫øt ph√¢n c√¥ng."
if st.button("üìß G·ª≠i email k√®m Excel"):
    if not to_addr:
        st.warning("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ email.")
    else:
        ok, msg = send_email_smtp(
            to_email=to_addr,
            subject=subject,
            body=body,
            attachments=[(
                f"KPI_canhan_{rep_year}_{rep_month:02d}.xlsx",
                excel_bytes,
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )]
        )
        if ok:
            st.success("‚úÖ G·ª≠i email th√†nh c√¥ng!")
        else:
            st.error(f"‚ùå L·ªói g·ª≠i email: {msg}")

