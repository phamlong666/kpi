# -*- coding: utf-8 -*-
# KPI ‚Äì ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a
# B·∫£n ƒë√£ t√≠ch h·ª£p RULES (BONUS/MANUAL/PENALTY_ERR), sticky form, n√∫t nhi·ªÅu m√†u, t√≠nh T·ªïng ƒëi·ªÉm.

import re
import json
import io
import math
from datetime import datetime
from pathlib import Path

import pandas as pd
import numpy as np
import streamlit as st

# ==== C·∫§U H√åNH TRANG ====
st.set_page_config(
    page_title="KPI ‚Äì ƒêLKV ƒê·ªãnh H√≥a",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ==== CSS: ti√™u ƒë·ªÅ nh·ªè, sticky form, m√†u n√∫t ====
st.markdown(
    """
    <style>
      /* Thu nh·ªè title */
      .app-title h1 {font-size: 1.6rem !important; margin-bottom: 0.25rem;}
      .app-subnote {color:#666; font-size:0.9rem; margin-bottom:1rem}

      /* Form sticky */
      .sticky-box {
         position: sticky; top: 0; z-index: 20;
         background: var(--background-color);
         border: 1px solid #eee; border-radius: 12px; padding: 12px;
         box-shadow: 0 2px 8px rgba(0,0,0,0.04);
         margin-bottom: 10px;
      }

      /* M√†u n√∫t ri√™ng */
      .btn-green button{background:#0ea5e9 !important;color:white !important}
      .btn-blue button{background:#10b981 !important;color:white !important}
      .btn-orange button{background:#f59e0b !important;color:white !important}
      .btn-purple button{background:#8b5cf6 !important;color:white !important}
      .btn-red button{background:#ef4444 !important;color:white !important}

      /* √î t·ªïng ƒëi·ªÉm */
      .total-box {
        background:#f0f9ff; border:1px dashed #7dd3fc;
        padding:10px 14px;border-radius:10px;color:#0c4a6e;
        font-weight:600;margin-top:8px;
      }

      /* Data editor chi·ªÅu cao d·ªÖ xem */
      section.main > div.block-container{padding-top: 0.8rem;}
    </style>
    """,
    unsafe_allow_html=True,
)

# ==== LOGO ====
LOGO_URL = "https://raw.githubusercontent.com/phamlong666/kpi/main/logo_hinh_tron.png"
col_logo, col_title = st.columns([1,10], vertical_alignment="center")
with col_logo:
    st.image(LOGO_URL, width=60)
with col_title:
    st.markdown('<div class="app-title"><h1>KPI ‚Äì ƒê·ªôi qu·∫£n l√Ω ƒêi·ªán l·ª±c khu v·ª±c ƒê·ªãnh H√≥a</h1></div>', unsafe_allow_html=True)
    st.markdown('<div class="app-subnote">Bi·ªÉu m·∫´u nh·∫≠p tay + ch·∫•m ƒëi·ªÉm theo RULES (c·∫•u h√¨nh trong Sheets)</div>', unsafe_allow_html=True)

# ----------------- Helpers -----------------
def parse_float(x):
    try:
        if x is None or (isinstance(x, float) and math.isnan(x)):
            return None
        if isinstance(x, (int, float)):
            return float(x)
        s = str(x).strip()
        if s == "" or s.lower() in ("none", "nan"):
            return None
        # Vi·ªát Nam number "1.234.567,89"
        s = s.replace(" ", "")
        s = s.replace(".", "").replace(",", ".")
        return float(s)
    except Exception:
        return None

def parse_vn_number(s):
    return parse_float(s)

def format_vn_number(v, nd=2):
    if v is None: return ""
    try:
        q = round(float(v), nd)
    except Exception:
        return str(v)
    s = f"{q:,.{nd}f}"
    # chuy·ªÉn 1,234,567.89 -> 1.234.567,89
    s = s.replace(",", "X").replace(".", ",").replace("X", ".")
    return s

def _coerce_weight(w):
    v = parse_float(w)
    if v is None: return 0.0
    return max(0.0, float(v))

# -------------- Google Sheets ----------------
# Cho ph√©p ch·∫°y khi kh√¥ng c√≥ gspread
try:
    import gspread
    from google.oauth2.service_account import Credentials
    HAS_GSPREAD = True
except Exception:
    HAS_GSPREAD = False

SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
    "https://www.googleapis.com/auth/drive.file",
]

def get_sheet_and_name():
    """M·ªü spreadsheet theo sidebar input. Tr·∫£ (spreadsheet, sheet_name)"""
    url_or_id = st.session_state.get("sheet_url_or_id", "").strip()
    sheet_name = st.session_state.get("kpi_sheet_name", "KPI")
    if not HAS_GSPREAD: raise RuntimeError("Thi·∫øu gspread (m√¥i tr∆∞·ªùng ch∆∞a c√†i).")
    if not url_or_id:
        raise RuntimeError("Ch∆∞a nh·∫≠p ID/URL Google Sheet.")
    # Service account credentials: Streamlit secrets ho·∫∑c file credentials.json n·∫øu c√≥
    creds = None
    if "gcp_service_account" in st.secrets:
        info = dict(st.secrets["gcp_service_account"])
        creds = Credentials.from_service_account_info(info, scopes=SCOPES)
    else:
        # th·ª≠ file credentials.json
        if Path("credentials.json").exists():
            creds = Credentials.from_service_account_file("credentials.json", scopes=SCOPES)
        else:
            raise RuntimeError("Kh√¥ng t√¨m th·∫•y th√¥ng tin Service Account (secrets['gcp_service_account'] ho·∫∑c credentials.json).")
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(extract_sheet_id(url_or_id))
    return sh, sheet_name

def extract_sheet_id(url_or_id: str) -> str:
    """L·∫•y spreadsheetId t·ª´ URL ho·∫∑c tr·∫£ lu√¥n id"""
    if "/d/" in url_or_id:
        # URL d·∫°ng https://docs.google.com/spreadsheets/d/<ID>/edit...
        return url_or_id.split("/d/")[1].split("/")[0]
    return url_or_id

# -------------- RULES Loader ----------------
@st.cache_data(ttl=600)
def load_rules_registry(spreadsheet_id_or_url: str):
    """ƒê·ªçc RULES t·ª´ Google Sheet (sheet RULES). N·∫øu kh√¥ng c√≥/ l·ªói ‚Üí tr·∫£ default."""
    try:
        if not HAS_GSPREAD or not spreadsheet_id_or_url:
            return default_rules()
        sh, _ = get_sheet_and_name()
        try:
            ws = sh.worksheet("RULES")
        except Exception:
            return default_rules()

        df = pd.DataFrame(ws.get_all_records())
        reg = {}
        for _, r in df.iterrows():
            code = str(r.get("Code") or "").strip()
            if not code: continue
            rule = {k: r.get(k) for k in df.columns}
            # Chu·∫©n ho√°
            rule["Type"] = str(rule.get("Type") or "").strip().upper()
            rule["keywords"] = str(rule.get("keywords") or "").lower()
            rule["thr"] = parse_float(rule.get("thr"))
            rule["step"] = parse_float(rule.get("step"))
            rule["pen"] = parse_float(rule.get("pen"))
            rule["cap"] = parse_float(rule.get("cap"))
            rule["op"] = str(rule.get("op") or "").strip()
            rule["lo"] = parse_float(rule.get("lo"))
            rule["hi"] = parse_float(rule.get("hi"))
            rule["metric"] = str(rule.get("metric") or "").strip().lower()
            rule["apply_weight"] = str(rule.get("apply_weight") or "").strip()
            rule["points_json"] = rule.get("points_json")
            rule["expr"] = rule.get("expr")
            reg[code.upper()] = rule
        if not reg:
            return default_rules()
        return reg
    except Exception:
        return default_rules()

def default_rules():
    """B·ªô rule m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ RULES sheet."""
    reg = {
        "RATIO_UP_DEFAULT": {"Type":"RATIO_UP"},
        "RATIO_DOWN_DEFAULT": {"Type":"RATIO_DOWN"},
        "PASS_FAIL_DEFAULT": {"Type":"PASS_FAIL"},
        "RANGE_DEFAULT": {"Type":"RANGE"},
        "PENALTY_ERR_004": {"Type":"PENALTY_ERR","thr":1.5,"step":0.1,"pen":0.04,"cap":3,"apply_weight":"false"},
        "PENALTY_ERR_002": {"Type":"PENALTY_ERR","thr":1.5,"step":0.1,"pen":0.02,"cap":3,"apply_weight":"false"},
        "BONUS_RATIO_TIER": {"Type":"BONUS","metric":"ratio","apply_weight":"false",
            "points_json": json.dumps({"tiers":[{"gte":0.98,"lte":0.99,"point":0.5},{"gt":0.99,"lt":1.0,"point":0.7},{"gte":1.0,"point":1.0}]})
        },
        "MANUAL_POINT": {"Type":"MANUAL","apply_weight":"false"},
    }
    return reg

def ensure_rules_template(sh):
    headers = ["Code","Type","keywords","thr","step","pen","cap","op","lo","hi","metric","apply_weight","points_json","expr","description"]
    try:
        ws = sh.worksheet("RULES"); ws.clear()
    except Exception:
        ws = sh.add_worksheet(title="RULES", rows=100, cols=len(headers))
    rows = [
        ["RATIO_UP_DEFAULT","RATIO_UP","tƒÉng t·ªët h∆°n; ‚â•","","","","","","","","","TRUE","","","TƒÉng ƒë·∫°t/v∆∞·ª£t KH ‚Äì ƒëi·ªÉm = min(ACTUAL/PLAN,2)*10*W"],
        ["RATIO_DOWN_DEFAULT","RATIO_DOWN","gi·∫£m t·ªët h∆°n; ‚â§","","","","","","","","","TRUE","","","Gi·∫£m c√†ng t·ªët"],
        ["PASS_FAIL_DEFAULT","PASS_FAIL","ƒë·∫°t/kh√¥ng ƒë·∫°t","","","","","","","","","TRUE","","","ƒê·∫°t = 10*W"],
        ["RANGE_DEFAULT","RANGE","kho·∫£ng; range","","","","","","","","","TRUE","","","LO‚â§ACTUAL‚â§HI ‚áí 10*W"],
        ["PENALTY_ERR_004","PENALTY_ERR","sai s·ªë ¬±1,5%; tr·ª´ 0,04","1.5","0.1","0.04","3","","","","","FALSE","","","D·ª± b√°o ‚Äì tr·ª´ t·ªëi ƒëa 3ƒë"],
        ["PENALTY_ERR_002","PENALTY_ERR","sai s·ªë ¬±1,5%; tr·ª´ 0,02","1.5","0.1","0.02","3","","","","","FALSE","","","D·ª± b√°o ‚Äì tr·ª´ t·ªëi ƒëa 3ƒë"],
        ["BONUS_RATIO_TIER","BONUS","c·ªông ƒëi·ªÉm theo t·ª∑ l·ªá","","","","","","","","ratio","FALSE",
         '{"tiers":[{"gte":0.98,"lte":0.99,"point":0.5},{"gt":0.99,"lt":1.0,"point":0.7},{"gte":1.0,"point":1.0}]}',"","98‚Äì99% +0.5; 99‚Äì<100% +0.7; ‚â•100% +1.0"],
        ["MANUAL_POINT","MANUAL","nh·∫≠p tay","","","","","","","","","FALSE","","","Nh·∫≠p tay ƒëi·ªÉm ·ªü c·ªôt ƒêi·ªÉm KPI ho·∫∑c Ghi ch√∫: point=..."],
    ]
    ws.update([headers] + rows, value_input_option="USER_ENTERED")
    return True

# -------------- Scoring core ----------------
def find_rule_for_row(row, registry):
    """T√¨m rule theo [CODE] trong 'Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£' ho·∫∑c theo t·ª´ kh√≥a"""
    method = str(row.get("Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£") or "")
    # ∆Øu ti√™n [CODE] trong method
    m = re.search(r"\[(?P<code>[A-Za-z0-9_]+)\]", method)
    overrides = {}
    if m:
        code = m.group("code").upper()
        # ƒë·ªçc tham s·ªë "k=v; ..."
        kvs = re.findall(r"([a-zA-Z_]+)\s*=\s*([^;,\]]+)", method)
        for k, v in kvs:
            k=k.strip().lower(); overrides[k]=v.strip()
        rule = registry.get(code)
        if rule: return rule, overrides
    # Kh√¥ng c√≥ CODE: t√¨m theo keywords
    method_l = method.lower()
    for code, rule in registry.items():
        kw = str(rule.get("keywords") or "").lower().strip()
        if kw and kw in method_l:
            return rule, {}
    # Fallback
    if "ƒë·∫°t" in method_l:
        return registry.get("PASS_FAIL_DEFAULT"), {}
    return registry.get("RATIO_UP_DEFAULT"), {}  # m·∫∑c ƒë·ªãnh

def _score_ratio_up(row):
    W = _coerce_weight(row.get("Tr·ªçng s·ªë"))
    plan = parse_float(row.get("K·∫ø ho·∫°ch"))
    actual = parse_float(row.get("Th·ª±c hi·ªán"))
    if plan in (None,0) or actual is None:
        return None
    ratio = max(0.0, min(actual/plan, 2.0)) # ch·∫∑n 200%
    return round(ratio * 10.0 * W, 2)

def _score_ratio_down(row):
    W = _coerce_weight(row.get("Tr·ªçng s·ªë"))
    plan = parse_float(row.get("K·∫ø ho·∫°ch"))
    actual = parse_float(row.get("Th·ª±c hi·ªán"))
    if plan is None or actual is None:
        return None
    # Th·ª±c hi·ªán <= KH: ƒëi·ªÉm t·ªëi ƒëa
    if actual <= plan:
        return round(10.0 * W, 2)
    # V∆∞·ª£t KH: suy gi·∫£m tuy·∫øn t√≠nh t·ªõi 0 (tu·ª≥ ch·ªânh n·∫øu c·∫ßn)
    # V√≠ d·ª•: v∆∞·ª£t 50% -> 0 ƒëi·ªÉm
    over = (actual - plan) / plan
    score = max(0.0, (1 - over*2) * 10.0 * W)
    return round(score, 2)

def _score_pass_fail(row):
    W = _coerce_weight(row.get("Tr·ªçng s·ªë"))
    method = str(row.get("Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£") or "").lower()
    # ‚Äúƒê·∫°t/Kh√¥ng ƒë·∫°t‚Äù
    if "kh√¥ng" in method and "ƒë·∫°t" in method:
        # L·∫•y t·ª´ Ghi ch√∫: pass=true/false ho·∫∑c d·ª±a ACTUAL vs PLAN
        note = str(row.get("Ghi ch√∫") or "").lower()
        flag = None
        m = re.search(r"pass\s*=\s*(true|false|1|0)", note)
        if m:
            flag = m.group(1) in ("true","1")
        else:
            plan = parse_float(row.get("K·∫ø ho·∫°ch"))
            actual = parse_float(row.get("Th·ª±c hi·ªán"))
            flag = (plan is not None and actual is not None and actual >= plan)
        return round((10.0 * W) if flag else 0.0, 2)
    return None

def _score_range(row, rule, overrides):
    W = _coerce_weight(row.get("Tr·ªçng s·ªë"))
    lo = parse_float(overrides.get("lo")) if overrides.get("lo") else parse_float(rule.get("lo"))
    hi = parse_float(overrides.get("hi")) if overrides.get("hi") else parse_float(rule.get("hi"))
    actual = parse_float(row.get("Th·ª±c hi·ªán"))
    if lo is None or hi is None or actual is None:
        return None
    return round(10.0 * W if (lo <= actual <= hi) else 0.0, 2)

def _score_penalty_err(row, rule, overrides):
    """Ph·∫°t theo sai s·ªë % v∆∞·ª£t ng∆∞·ª°ng, tr·ª´ step->pen m·ªói 0.1% (ho·∫∑c step) ‚Äì cap t·ªëi ƒëa ƒëi·ªÉm tr·ª´."""
    apply_weight = str(overrides.get("apply_weight", rule.get("apply_weight", "false"))).lower() in ("1","true","yes")
    thr  = parse_float(overrides.get("thr")  or rule.get("thr")  or 1.5)
    step = parse_float(overrides.get("step") or rule.get("step") or 0.1)
    pen  = parse_float(overrides.get("pen")  or rule.get("pen")  or 0.04)
    cap  = parse_float(overrides.get("cap")  or rule.get("cap")  or 3.0)

    plan = parse_float(row.get("K·∫ø ho·∫°ch"))
    actual = parse_float(row.get("Th·ª±c hi·ªán"))
    W = _coerce_weight(row.get("Tr·ªçng s·ªë"))

    if plan in (None,0) or actual is None:
        return None

    err_pct = abs(actual - plan) / plan * 100.0
    if err_pct <= thr:
        score = 10.0 * W if apply_weight else 0.0  # kh√¥ng tr·ª´ g√¨
        return round(score,2)

    over = err_pct - thr
    # m·ªói 'step'% v∆∞·ª£t tr·ª´ 'pen' ƒëi·ªÉm
    times = math.floor(over / step + 1e-9)
    minus = min(cap, times * pen)
    score = (10.0 * W) - (minus * (W if apply_weight else 1.0))
    # L∆∞u √Ω: nh√≥m n√†y l√† 'ch·ªâ tr·ª´', n·∫øu mu·ªën ch·ªâ tr·∫£ "ƒëi·ªÉm tr·ª´" th√¨ ƒë·ªÉ apply_weight=False v√† ƒë·ªçc gi√° tr·ªã √¢m
    return round(score, 2)

def _score_bonus(row, rule, overrides):
    """C·ªông ƒëi·ªÉm theo b·∫≠c (tiers). M·∫∑c ƒë·ªãnh kh√¥ng nh√¢n tr·ªçng s·ªë."""
    metric = (str(overrides.get("metric") or rule.get("metric") or "ratio")).lower()
    apply_weight = str(overrides.get("apply_weight", rule.get("apply_weight", "false"))).lower() in ("1","true","yes")

    pts = overrides.get("points_json") or rule.get("points_json")
    tiers = None
    if isinstance(pts, (dict, list)):
        tiers = pts
    elif isinstance(pts, str) and pts.strip():
        try:
            j = json.loads(pts)
            tiers = j.get("tiers", j)
        except Exception:
            tiers = None

    plan   = parse_float(row.get("K·∫ø ho·∫°ch"))
    actual = parse_float(row.get("Th·ª±c hi·ªán"))
    if metric == "ratio":
        x = (actual/plan) if (plan not in (None,0) and actual is not None) else None
    else:
        x = actual

    if x is None: return None

    point = 0.0
    if tiers:
        for t in tiers:
            ok = True
            if "gt" in t:  ok &= (x > float(t["gt"]))
            if "gte" in t: ok &= (x >= float(t["gte"]))
            if "lt" in t:  ok &= (x < float(t["lt"]))
            if "lte" in t: ok &= (x <= float(t["lte"]))
            if ok:
                point = float(t.get("point",0))
                break

    if apply_weight:
        point *= _coerce_weight(row.get("Tr·ªçng s·ªë"))
    return round(point, 2)

def _score_manual(row, overrides):
    v = parse_float(row.get("ƒêi·ªÉm KPI"))
    if v is None:
        m = re.search(r"point\s*=\s*([0-9\.,\-]+)", str(row.get("Ghi ch√∫") or ""))
        if m: v = parse_vn_number(m.group(1))
    return None if v is None else float(v)

def compute_score_with_method(row, registry):
    rule, overrides = find_rule_for_row(row, registry)
    if not rule: return None
    t = (rule.get("Type") or "").upper()
    if   t=="RATIO_UP":      return _score_ratio_up(row)
    elif t=="RATIO_DOWN":    return _score_ratio_down(row)
    elif t=="PASS_FAIL":     return _score_pass_fail(row)
    elif t=="RANGE":         return _score_range(row, rule, overrides)
    elif t=="PENALTY_ERR":   return _score_penalty_err(row, rule, overrides)
    elif t=="BONUS":         return _score_bonus(row, rule, overrides)
    elif t=="MANUAL":        return _score_manual(row, overrides)
    else:                    return _score_ratio_up(row)

# -------------- STATE --------------
if "df" not in st.session_state:
    st.session_state.df = pd.DataFrame()
if "sheet_url_or_id" not in st.session_state:
    st.session_state.sheet_url_or_id = ""
if "kpi_sheet_name" not in st.session_state:
    st.session_state.kpi_sheet_name = "KPI"

# -------------- SIDEBAR --------------
with st.sidebar:
    st.header("üîê ƒêƒÉng nh·∫≠p")
    st.text_input("USE (vd: PCTN\\KVDHA)", key="use_username")
    st.text_input("M·∫≠t kh·∫©u", type="password", key="use_password")
    st.divider()

    st.header("üîó K·∫øt n·ªëi Google Sheets")
    st.text_input("ID/URL Google Sheet", key="sheet_url_or_id", placeholder="D√°n URL ho·∫∑c ID")
    st.text_input("T√™n sheet KPI", key="kpi_sheet_name", value="KPI")

    colA, colB = st.columns(2)
    with colA:
        if st.button("üìÑ T·∫°o/ c·∫≠p nh·∫≠t RULES (m·∫´u)", use_container_width=True):
            try:
                sh,_ = get_sheet_and_name()
                ensure_rules_template(sh)
                st.success("ƒê√£ t·∫°o RULES m·∫´u (sheet RULES).")
            except Exception as e:
                st.error(f"L·ªói t·∫°o RULES: {e}")
    with colB:
        if st.button("üîÅ L√†m m·ªõi RULES", use_container_width=True):
            load_rules_registry.clear()
            st.success("ƒê√£ t·∫£i l·∫°i RULES")

# -------------- FILE CSV --------------
st.subheader("üì• Nh·∫≠p CSV v√†o KPI")
up = st.file_uploader("T·∫£i file CSV (m·∫´u: KPI_Input_template.csv)", type=["csv"], accept_multiple_files=False, label_visibility="collapsed")
if up is not None:
    try:
        df = pd.read_csv(up)
        # b·∫£o ƒë·∫£m m·ªôt s·ªë c·ªôt t·ªìn t·∫°i
        for col in ["Ch·ªçn","K·∫ø ho·∫°ch","Th·ª±c hi·ªán","Tr·ªçng s·ªë","ƒêi·ªÉm KPI","Th√°ng","NƒÉm","Ghi ch√∫","Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£"]:
            if col not in df.columns:
                if col=="Ch·ªçn":
                    df[col] = False
                else:
                    df[col] = ""
        st.session_state.df = df
        st.success("ƒê√£ n·∫°p CSV.")
    except Exception as e:
        st.error(f"L·ªói ƒë·ªçc CSV: {e}")

# -------------- FORM NH·∫¨P (sticky) --------------
with st.container():
    st.markdown('<div class="sticky-box">', unsafe_allow_html=True)

    colF1, colF2, colF3, colF4 = st.columns([3,1,1,2])
    with colF1:
        kpi_name = st.text_input("T√™n ch·ªâ ti√™u (KPI)", value=st.session_state.get("form_kpi_name",""))
    with colF2:
        unit_txt = st.text_input("ƒê∆°n v·ªã t√≠nh", value=st.session_state.get("unit_txt",""))
    with colF3:
        dept_txt = st.text_input("B·ªô ph·∫≠n/ng∆∞·ªùi ph·ª• tr√°ch", value=st.session_state.get("dept_txt",""))
    with colF4:
        unit_owner = st.text_input("T√™n ƒë∆°n v·ªã", value=st.session_state.get("unit_owner",""))

    colP1, colP2, colP3 = st.columns([1,1,1])
    with colP1:
        plan_txt = st.text_input("K·∫ø ho·∫°ch", value=st.session_state.get("plan_txt","0,00"))
    with colP2:
        actual_txt = st.text_input("Th·ª±c hi·ªán", value=st.session_state.get("actual_txt","0,00"))
    with colP3:
        weight_txt = st.text_input("Tr·ªçng s·ªë (%)", value=st.session_state.get("weight_txt","100,00"))

    method = st.text_input("Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£ (c√≥ th·ªÉ ghi [CODE]...)", value=st.session_state.get("method_txt","ƒê·∫°t/Kh√¥ng ƒë·∫°t"))

    colT1, colT2, colT3 = st.columns([1,1,2])
    with colT1:
        month_txt = st.text_input("Th√°ng", value=st.session_state.get("month_txt","7"))
    with colT2:
        year_txt = st.text_input("NƒÉm", value=st.session_state.get("year_txt", str(datetime.now().year)))
    with colT3:
        note_txt = st.text_input("Ghi ch√∫", value=st.session_state.get("note_txt",""))

    # t√≠nh ƒëi·ªÉm th·ª≠ theo RULES
    registry = load_rules_registry(st.session_state.get("sheet_url_or_id",""))
    demo_row = {
        "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£": method,
        "K·∫ø ho·∫°ch": plan_txt,
        "Th·ª±c hi·ªán": actual_txt,
        "Tr·ªçng s·ªë": weight_txt,
        "Ghi ch√∫": note_txt
    }
    score_preview = compute_score_with_method(demo_row, registry)
    colS1, colS2 = st.columns([1,2])
    with colS1:
        st.number_input("ƒêi·ªÉm KPI (t·ª± t√≠nh)", value=0.0 if (score_preview is None) else float(score_preview), step=0.01, key="calc_point", disabled=True)
    with colS2:
        st.markdown(f"<div class='total-box'>ƒêi·ªÉm xem tr∆∞·ªõc: <b>{score_preview if score_preview is not None else '‚Äî'}</b></div>", unsafe_allow_html=True)

    c1, c2, c3, c4, c5 = st.columns(5)
    with c1:
        st.write("")  # spacer
        if st.container().button("√Åp d·ª•ng v√†o b·∫£ng CSV t·∫°m", use_container_width=True, key="btn_apply", help="ƒê·ªï c√°c √¥ tr√™n v√†o d√≤ng ƒë√£ t√≠ch Ch·ªçn", type="primary"):
            if st.session_state.df.empty:
                st.warning("Ch∆∞a c√≥ b·∫£ng CSV.")
            else:
                df = st.session_state.df.copy()
                mask = df["Ch·ªçn"] == True if "Ch·ªçn" in df.columns else pd.Series([False]*len(df))
                if mask.sum()==0:
                    st.warning("H√£y t√≠ch ch·ªçn √≠t nh·∫•t 1 d√≤ng trong b·∫£ng b√™n d∆∞·ªõi.")
                else:
                    df.loc[mask, "Ph∆∞∆°ng ph√°p ƒëo k·∫øt qu·∫£"] = method
                    df.loc[mask, "K·∫ø ho·∫°ch"] = plan_txt
                    df.loc[mask, "Th·ª±c hi·ªán"] = actual_txt
                    df.loc[mask, "Tr·ªçng s·ªë"] = weight_txt
                    df.loc[mask, "ƒêi·ªÉm KPI"] = score_preview if score_preview is not None else df.loc[mask, "ƒêi·ªÉm KPI"]
                    df.loc[mask, "Th√°ng"] = month_txt
                    df.loc[mask, "NƒÉm"] = year_txt
                    df.loc[mask, "Ghi ch√∫"] = note_txt
                    st.session_state.df = df
                    st.success(f"ƒê√£ √°p d·ª•ng v√†o {mask.sum()} d√≤ng.")

    with c2:
        btn1 = st.container().button("üíæ Ghi CSV t·∫°m v√†o sheet KPI", use_container_width=True, key="btn_write", help="Ghi DataFrame hi·ªán t·∫°i l√™n Sheet", type="secondary")
        st.markdown('<div class="btn-green"></div>', unsafe_allow_html=True)
    with c3:
        btn2 = st.container().button("üîÑ L√†m m·ªõi b·∫£ng CSV", use_container_width=True, key="btn_refresh", help="Xo√° b·∫£ng hi·ªán t·∫°i")
        st.markdown('<div class="btn-blue"></div>', unsafe_allow_html=True)
    with c4:
        btn3 = st.container().button("üì§ Xu·∫•t b√°o c√°o (Excel)", use_container_width=True, key="btn_export")
        st.markdown('<div class="btn-orange"></div>', unsafe_allow_html=True)
    with c5:
        btn4 = st.container().button("‚òÅÔ∏è L∆∞u d·ªØ li·ªáu v√†o Google Drive", use_container_width=True, key="btn_drive")
        st.markdown('<div class="btn-purple"></div>', unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

# -------------- B·∫¢NG CH√çNH --------------
st.subheader("üìã B·∫£ng KPI (CSV t·∫°m)")

if not st.session_state.df.empty:
    df = st.session_state.df.copy()

    # Hi·ªÉn th·ªã Data Editor c√≥ checkbox 'Ch·ªçn'
    if "Ch·ªçn" not in df.columns:
        df.insert(0, "Ch·ªçn", False)

    # T√≠nh l·∫°i ƒëi·ªÉm theo RULES cho d√≤ng kh√¥ng ph·∫£i MANUAL (ho·∫∑c MANUAL m√† kh√¥ng c√≥ ƒëi·ªÉm nh·∫≠p)
    registry = load_rules_registry(st.session_state.get("sheet_url_or_id",""))
    scores = []
    for _, r in df.iterrows():
        s = compute_score_with_method(r, registry)
        scores.append(s)
    df["ƒêi·ªÉm KPI"] = [s if s is not None else r for s, r in zip(scores, df.get("ƒêi·ªÉm KPI", [None]*len(df)))]

    # T·ªïng ƒëi·ªÉm KPI (c·ªông c√°c gi√° tr·ªã s·ªë)
    total_point = 0.0
    for v in df["ƒêi·ªÉm KPI"].tolist():
        vv = parse_float(v)
        if vv is not None: total_point += vv
    st.markdown(f"<div class='total-box'>T·ªïng ƒëi·ªÉm KPI (t·∫°m t√≠nh): <b>{format_vn_number(total_point,2)}</b></div>", unsafe_allow_html=True)

    edited = st.data_editor(
        df,
        use_container_width=True,
        num_rows="dynamic",
        disabled=[],
        column_config={
            "Ch·ªçn": st.column_config.CheckboxColumn("Ch·ªçn"),
        },
        height=460
    )
    st.session_state.df = edited
else:
    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu CSV ‚Äì vui l√≤ng t·∫£i file m·∫´u r·ªìi ch·ªânh s·ª≠a.")

# -------------- S·ª∞ KI·ªÜN N√öT --------------
def write_to_google_sheet(df: pd.DataFrame):
    sh, sheet_name = get_sheet_and_name()
    try:
        ws = sh.worksheet(sheet_name)
        ws.clear()
    except Exception:
        ws = sh.add_worksheet(title=sheet_name, rows=1000, cols=max(26, len(df.columns)))
    # update header + data
    ws.update([df.columns.tolist()] + df.fillna("").astype(str).values.tolist(), value_input_option="USER_ENTERED")
    return True

if 'btn_write' in st.session_state and st.session_state['btn_write']:
    if st.session_state.df.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ghi.")
    else:
        try:
            ok = write_to_google_sheet(st.session_state.df.copy())
            st.success("ƒê√£ ghi d·ªØ li·ªáu l√™n Google Sheet.")
        except Exception as e:
            st.error(f"L·ªói khi ghi Sheets: {e}")

if 'btn_refresh' in st.session_state and st.session_state['btn_refresh']:
    st.session_state.df = pd.DataFrame()
    st.success("ƒê√£ l√†m m·ªõi b·∫£ng CSV t·∫°m.")

if 'btn_export' in st.session_state and st.session_state['btn_export']:
    if st.session_state.df.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.")
    else:
        try:
            out = io.BytesIO()
            with pd.ExcelWriter(out, engine="xlsxwriter") as writer:
                st.session_state.df.to_excel(writer, sheet_name="KPI", index=False)
            st.download_button("‚¨áÔ∏è T·∫£i file Excel", data=out.getvalue(), file_name=f"KPI_{datetime.now():%Y%m%d_%H%M}.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            st.success("ƒê√£ t·∫°o file Excel.")
        except Exception as e:
            st.error(f"L·ªói xu·∫•t b√°o c√°o: {e}")

if 'btn_drive' in st.session_state and st.session_state['btn_drive']:
    # T√πy m√¥i tr∆∞·ªùng/quy·ªÅn Drive. ·ªû b·∫£n n√†y, n·∫øu ƒë√£ ghi l√™n Sheet, coi nh∆∞ l∆∞u xong.
    try:
        if st.session_state.df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u.")
        else:
            ok = write_to_google_sheet(st.session_state.df.copy())
            st.success("ƒê√£ l∆∞u d·ªØ li·ªáu l√™n Google Sheets (coi nh∆∞ l∆∞u Drive).")
    except Exception as e:
        st.error(f"L·ªói l∆∞u Drive: {e}")
